// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FOODSELECT_FB_H_
#define FLATBUFFERS_GENERATED_FOODSELECT_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct FoodSelect;
struct FoodSelectBuilder;
struct FoodSelectT;

struct FoodSelectRow;
struct FoodSelectRowBuilder;
struct FoodSelectRowT;

struct FoodSelectT : public ::flatbuffers::NativeTable {
  typedef FoodSelect TableType;
  std::vector<std::unique_ptr<fb::FoodSelectRowT>> FoodSelects{};
  FoodSelectT() = default;
  FoodSelectT(const FoodSelectT &o);
  FoodSelectT(FoodSelectT&&) FLATBUFFERS_NOEXCEPT = default;
  FoodSelectT &operator=(FoodSelectT o) FLATBUFFERS_NOEXCEPT;
};

struct FoodSelect FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FoodSelectT NativeTableType;
  typedef FoodSelectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FOODSELECTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::FoodSelectRow>> *FoodSelects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::FoodSelectRow>> *>(VT_FOODSELECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FOODSELECTS) &&
           verifier.VerifyVector(FoodSelects()) &&
           verifier.VerifyVectorOfTables(FoodSelects()) &&
           verifier.EndTable();
  }
  FoodSelectT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FoodSelectT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<FoodSelect> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FoodSelectT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FoodSelectBuilder {
  typedef FoodSelect Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_FoodSelects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::FoodSelectRow>>> FoodSelects) {
    fbb_.AddOffset(FoodSelect::VT_FOODSELECTS, FoodSelects);
  }
  explicit FoodSelectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FoodSelect> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FoodSelect>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FoodSelect> CreateFoodSelect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::FoodSelectRow>>> FoodSelects = 0) {
  FoodSelectBuilder builder_(_fbb);
  builder_.add_FoodSelects(FoodSelects);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FoodSelect> CreateFoodSelectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::FoodSelectRow>> *FoodSelects = nullptr) {
  auto FoodSelects__ = FoodSelects ? _fbb.CreateVector<::flatbuffers::Offset<fb::FoodSelectRow>>(*FoodSelects) : 0;
  return fb::CreateFoodSelect(
      _fbb,
      FoodSelects__);
}

::flatbuffers::Offset<FoodSelect> CreateFoodSelect(::flatbuffers::FlatBufferBuilder &_fbb, const FoodSelectT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct FoodSelectRowT : public ::flatbuffers::NativeTable {
  typedef FoodSelectRow TableType;
  uint32_t Id = 0;
  uint32_t Group = 0;
  uint32_t ItemId = 0;
  uint32_t Weight = 0;
};

struct FoodSelectRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FoodSelectRowT NativeTableType;
  typedef FoodSelectRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_GROUP = 6,
    VT_ITEMID = 8,
    VT_WEIGHT = 10
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t Group() const {
    return GetField<uint32_t>(VT_GROUP, 0);
  }
  uint32_t ItemId() const {
    return GetField<uint32_t>(VT_ITEMID, 0);
  }
  uint32_t Weight() const {
    return GetField<uint32_t>(VT_WEIGHT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_GROUP, 4) &&
           VerifyField<uint32_t>(verifier, VT_ITEMID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WEIGHT, 4) &&
           verifier.EndTable();
  }
  FoodSelectRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FoodSelectRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<FoodSelectRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FoodSelectRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FoodSelectRowBuilder {
  typedef FoodSelectRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(FoodSelectRow::VT_ID, Id, 0);
  }
  void add_Group(uint32_t Group) {
    fbb_.AddElement<uint32_t>(FoodSelectRow::VT_GROUP, Group, 0);
  }
  void add_ItemId(uint32_t ItemId) {
    fbb_.AddElement<uint32_t>(FoodSelectRow::VT_ITEMID, ItemId, 0);
  }
  void add_Weight(uint32_t Weight) {
    fbb_.AddElement<uint32_t>(FoodSelectRow::VT_WEIGHT, Weight, 0);
  }
  explicit FoodSelectRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FoodSelectRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FoodSelectRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FoodSelectRow> CreateFoodSelectRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t Group = 0,
    uint32_t ItemId = 0,
    uint32_t Weight = 0) {
  FoodSelectRowBuilder builder_(_fbb);
  builder_.add_Weight(Weight);
  builder_.add_ItemId(ItemId);
  builder_.add_Group(Group);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<FoodSelectRow> CreateFoodSelectRow(::flatbuffers::FlatBufferBuilder &_fbb, const FoodSelectRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline FoodSelectT::FoodSelectT(const FoodSelectT &o) {
  FoodSelects.reserve(o.FoodSelects.size());
  for (const auto &FoodSelects_ : o.FoodSelects) { FoodSelects.emplace_back((FoodSelects_) ? new fb::FoodSelectRowT(*FoodSelects_) : nullptr); }
}

inline FoodSelectT &FoodSelectT::operator=(FoodSelectT o) FLATBUFFERS_NOEXCEPT {
  std::swap(FoodSelects, o.FoodSelects);
  return *this;
}

inline FoodSelectT *FoodSelect::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FoodSelectT>(new FoodSelectT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FoodSelect::UnPackTo(FoodSelectT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = FoodSelects(); if (_e) { _o->FoodSelects.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->FoodSelects[_i]) { _e->Get(_i)->UnPackTo(_o->FoodSelects[_i].get(), _resolver); } else { _o->FoodSelects[_i] = std::unique_ptr<fb::FoodSelectRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->FoodSelects.resize(0); } }
}

inline ::flatbuffers::Offset<FoodSelect> FoodSelect::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FoodSelectT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFoodSelect(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<FoodSelect> CreateFoodSelect(::flatbuffers::FlatBufferBuilder &_fbb, const FoodSelectT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const FoodSelectT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _FoodSelects = _o->FoodSelects.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::FoodSelectRow>> (_o->FoodSelects.size(), [](size_t i, _VectorArgs *__va) { return CreateFoodSelectRow(*__va->__fbb, __va->__o->FoodSelects[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateFoodSelect(
      _fbb,
      _FoodSelects);
}

inline FoodSelectRowT *FoodSelectRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FoodSelectRowT>(new FoodSelectRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FoodSelectRow::UnPackTo(FoodSelectRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Group(); _o->Group = _e; }
  { auto _e = ItemId(); _o->ItemId = _e; }
  { auto _e = Weight(); _o->Weight = _e; }
}

inline ::flatbuffers::Offset<FoodSelectRow> FoodSelectRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FoodSelectRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFoodSelectRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<FoodSelectRow> CreateFoodSelectRow(::flatbuffers::FlatBufferBuilder &_fbb, const FoodSelectRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const FoodSelectRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Group = _o->Group;
  auto _ItemId = _o->ItemId;
  auto _Weight = _o->Weight;
  return fb::CreateFoodSelectRow(
      _fbb,
      _Id,
      _Group,
      _ItemId,
      _Weight);
}

inline const fb::FoodSelect *GetFoodSelect(const void *buf) {
  return ::flatbuffers::GetRoot<fb::FoodSelect>(buf);
}

inline const fb::FoodSelect *GetSizePrefixedFoodSelect(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::FoodSelect>(buf);
}

inline bool VerifyFoodSelectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::FoodSelect>(nullptr);
}

inline bool VerifySizePrefixedFoodSelectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::FoodSelect>(nullptr);
}

inline void FinishFoodSelectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::FoodSelect> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFoodSelectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::FoodSelect> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::FoodSelectT> UnPackFoodSelect(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::FoodSelectT>(GetFoodSelect(buf)->UnPack(res));
}

inline std::unique_ptr<fb::FoodSelectT> UnPackSizePrefixedFoodSelect(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::FoodSelectT>(GetSizePrefixedFoodSelect(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_FOODSELECT_FB_H_
