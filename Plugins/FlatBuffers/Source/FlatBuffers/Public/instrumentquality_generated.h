// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INSTRUMENTQUALITY_FB_H_
#define FLATBUFFERS_GENERATED_INSTRUMENTQUALITY_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct InstrumentQuality;
struct InstrumentQualityBuilder;
struct InstrumentQualityT;

struct InstrumentQualityRow;
struct InstrumentQualityRowBuilder;
struct InstrumentQualityRowT;

struct InstrumentQualityT : public ::flatbuffers::NativeTable {
  typedef InstrumentQuality TableType;
  std::vector<std::unique_ptr<fb::InstrumentQualityRowT>> InstrumentQualitys{};
  InstrumentQualityT() = default;
  InstrumentQualityT(const InstrumentQualityT &o);
  InstrumentQualityT(InstrumentQualityT&&) FLATBUFFERS_NOEXCEPT = default;
  InstrumentQualityT &operator=(InstrumentQualityT o) FLATBUFFERS_NOEXCEPT;
};

struct InstrumentQuality FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InstrumentQualityT NativeTableType;
  typedef InstrumentQualityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTRUMENTQUALITYS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentQualityRow>> *InstrumentQualitys() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentQualityRow>> *>(VT_INSTRUMENTQUALITYS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTRUMENTQUALITYS) &&
           verifier.VerifyVector(InstrumentQualitys()) &&
           verifier.VerifyVectorOfTables(InstrumentQualitys()) &&
           verifier.EndTable();
  }
  InstrumentQualityT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(InstrumentQualityT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<InstrumentQuality> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentQualityT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct InstrumentQualityBuilder {
  typedef InstrumentQuality Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_InstrumentQualitys(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentQualityRow>>> InstrumentQualitys) {
    fbb_.AddOffset(InstrumentQuality::VT_INSTRUMENTQUALITYS, InstrumentQualitys);
  }
  explicit InstrumentQualityBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InstrumentQuality> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InstrumentQuality>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InstrumentQuality> CreateInstrumentQuality(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentQualityRow>>> InstrumentQualitys = 0) {
  InstrumentQualityBuilder builder_(_fbb);
  builder_.add_InstrumentQualitys(InstrumentQualitys);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<InstrumentQuality> CreateInstrumentQualityDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::InstrumentQualityRow>> *InstrumentQualitys = nullptr) {
  auto InstrumentQualitys__ = InstrumentQualitys ? _fbb.CreateVectorOfSortedTables<fb::InstrumentQualityRow>(InstrumentQualitys) : 0;
  return fb::CreateInstrumentQuality(
      _fbb,
      InstrumentQualitys__);
}

::flatbuffers::Offset<InstrumentQuality> CreateInstrumentQuality(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentQualityT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct InstrumentQualityRowT : public ::flatbuffers::NativeTable {
  typedef InstrumentQualityRow TableType;
  uint32_t Id = 0;
  uint32_t Quality = 0;
  uint32_t Rank = 0;
  uint32_t TotalExp = 0;
  uint32_t NeedCoin = 0;
  std::unique_ptr<fb::tuple_uint32_uint32T> NeedItem{};
  InstrumentQualityRowT() = default;
  InstrumentQualityRowT(const InstrumentQualityRowT &o);
  InstrumentQualityRowT(InstrumentQualityRowT&&) FLATBUFFERS_NOEXCEPT = default;
  InstrumentQualityRowT &operator=(InstrumentQualityRowT o) FLATBUFFERS_NOEXCEPT;
};

struct InstrumentQualityRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InstrumentQualityRowT NativeTableType;
  typedef InstrumentQualityRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_QUALITY = 6,
    VT_RANK = 8,
    VT_TOTALEXP = 10,
    VT_NEEDCOIN = 12,
    VT_NEEDITEM = 14
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const InstrumentQualityRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  uint32_t Quality() const {
    return GetField<uint32_t>(VT_QUALITY, 0);
  }
  uint32_t Rank() const {
    return GetField<uint32_t>(VT_RANK, 0);
  }
  uint32_t TotalExp() const {
    return GetField<uint32_t>(VT_TOTALEXP, 0);
  }
  uint32_t NeedCoin() const {
    return GetField<uint32_t>(VT_NEEDCOIN, 0);
  }
  const fb::tuple_uint32_uint32 *NeedItem() const {
    return GetPointer<const fb::tuple_uint32_uint32 *>(VT_NEEDITEM);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_QUALITY, 4) &&
           VerifyField<uint32_t>(verifier, VT_RANK, 4) &&
           VerifyField<uint32_t>(verifier, VT_TOTALEXP, 4) &&
           VerifyField<uint32_t>(verifier, VT_NEEDCOIN, 4) &&
           VerifyOffset(verifier, VT_NEEDITEM) &&
           verifier.VerifyTable(NeedItem()) &&
           verifier.EndTable();
  }
  InstrumentQualityRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(InstrumentQualityRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<InstrumentQualityRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentQualityRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct InstrumentQualityRowBuilder {
  typedef InstrumentQualityRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(InstrumentQualityRow::VT_ID, Id, 0);
  }
  void add_Quality(uint32_t Quality) {
    fbb_.AddElement<uint32_t>(InstrumentQualityRow::VT_QUALITY, Quality, 0);
  }
  void add_Rank(uint32_t Rank) {
    fbb_.AddElement<uint32_t>(InstrumentQualityRow::VT_RANK, Rank, 0);
  }
  void add_TotalExp(uint32_t TotalExp) {
    fbb_.AddElement<uint32_t>(InstrumentQualityRow::VT_TOTALEXP, TotalExp, 0);
  }
  void add_NeedCoin(uint32_t NeedCoin) {
    fbb_.AddElement<uint32_t>(InstrumentQualityRow::VT_NEEDCOIN, NeedCoin, 0);
  }
  void add_NeedItem(::flatbuffers::Offset<fb::tuple_uint32_uint32> NeedItem) {
    fbb_.AddOffset(InstrumentQualityRow::VT_NEEDITEM, NeedItem);
  }
  explicit InstrumentQualityRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InstrumentQualityRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InstrumentQualityRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InstrumentQualityRow> CreateInstrumentQualityRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t Quality = 0,
    uint32_t Rank = 0,
    uint32_t TotalExp = 0,
    uint32_t NeedCoin = 0,
    ::flatbuffers::Offset<fb::tuple_uint32_uint32> NeedItem = 0) {
  InstrumentQualityRowBuilder builder_(_fbb);
  builder_.add_NeedItem(NeedItem);
  builder_.add_NeedCoin(NeedCoin);
  builder_.add_TotalExp(TotalExp);
  builder_.add_Rank(Rank);
  builder_.add_Quality(Quality);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<InstrumentQualityRow> CreateInstrumentQualityRow(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentQualityRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline InstrumentQualityT::InstrumentQualityT(const InstrumentQualityT &o) {
  InstrumentQualitys.reserve(o.InstrumentQualitys.size());
  for (const auto &InstrumentQualitys_ : o.InstrumentQualitys) { InstrumentQualitys.emplace_back((InstrumentQualitys_) ? new fb::InstrumentQualityRowT(*InstrumentQualitys_) : nullptr); }
}

inline InstrumentQualityT &InstrumentQualityT::operator=(InstrumentQualityT o) FLATBUFFERS_NOEXCEPT {
  std::swap(InstrumentQualitys, o.InstrumentQualitys);
  return *this;
}

inline InstrumentQualityT *InstrumentQuality::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<InstrumentQualityT>(new InstrumentQualityT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void InstrumentQuality::UnPackTo(InstrumentQualityT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = InstrumentQualitys(); if (_e) { _o->InstrumentQualitys.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->InstrumentQualitys[_i]) { _e->Get(_i)->UnPackTo(_o->InstrumentQualitys[_i].get(), _resolver); } else { _o->InstrumentQualitys[_i] = std::unique_ptr<fb::InstrumentQualityRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->InstrumentQualitys.resize(0); } }
}

inline ::flatbuffers::Offset<InstrumentQuality> InstrumentQuality::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentQualityT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInstrumentQuality(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<InstrumentQuality> CreateInstrumentQuality(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentQualityT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const InstrumentQualityT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _InstrumentQualitys = _o->InstrumentQualitys.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::InstrumentQualityRow>> (_o->InstrumentQualitys.size(), [](size_t i, _VectorArgs *__va) { return CreateInstrumentQualityRow(*__va->__fbb, __va->__o->InstrumentQualitys[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateInstrumentQuality(
      _fbb,
      _InstrumentQualitys);
}

inline InstrumentQualityRowT::InstrumentQualityRowT(const InstrumentQualityRowT &o)
      : Id(o.Id),
        Quality(o.Quality),
        Rank(o.Rank),
        TotalExp(o.TotalExp),
        NeedCoin(o.NeedCoin),
        NeedItem((o.NeedItem) ? new fb::tuple_uint32_uint32T(*o.NeedItem) : nullptr) {
}

inline InstrumentQualityRowT &InstrumentQualityRowT::operator=(InstrumentQualityRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(Quality, o.Quality);
  std::swap(Rank, o.Rank);
  std::swap(TotalExp, o.TotalExp);
  std::swap(NeedCoin, o.NeedCoin);
  std::swap(NeedItem, o.NeedItem);
  return *this;
}

inline InstrumentQualityRowT *InstrumentQualityRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<InstrumentQualityRowT>(new InstrumentQualityRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void InstrumentQualityRow::UnPackTo(InstrumentQualityRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Quality(); _o->Quality = _e; }
  { auto _e = Rank(); _o->Rank = _e; }
  { auto _e = TotalExp(); _o->TotalExp = _e; }
  { auto _e = NeedCoin(); _o->NeedCoin = _e; }
  { auto _e = NeedItem(); if (_e) { if(_o->NeedItem) { _e->UnPackTo(_o->NeedItem.get(), _resolver); } else { _o->NeedItem = std::unique_ptr<fb::tuple_uint32_uint32T>(_e->UnPack(_resolver)); } } else if (_o->NeedItem) { _o->NeedItem.reset(); } }
}

inline ::flatbuffers::Offset<InstrumentQualityRow> InstrumentQualityRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentQualityRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInstrumentQualityRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<InstrumentQualityRow> CreateInstrumentQualityRow(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentQualityRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const InstrumentQualityRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Quality = _o->Quality;
  auto _Rank = _o->Rank;
  auto _TotalExp = _o->TotalExp;
  auto _NeedCoin = _o->NeedCoin;
  auto _NeedItem = _o->NeedItem ? Createtuple_uint32_uint32(_fbb, _o->NeedItem.get(), _rehasher) : 0;
  return fb::CreateInstrumentQualityRow(
      _fbb,
      _Id,
      _Quality,
      _Rank,
      _TotalExp,
      _NeedCoin,
      _NeedItem);
}

inline const fb::InstrumentQuality *GetInstrumentQuality(const void *buf) {
  return ::flatbuffers::GetRoot<fb::InstrumentQuality>(buf);
}

inline const fb::InstrumentQuality *GetSizePrefixedInstrumentQuality(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::InstrumentQuality>(buf);
}

inline bool VerifyInstrumentQualityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::InstrumentQuality>(nullptr);
}

inline bool VerifySizePrefixedInstrumentQualityBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::InstrumentQuality>(nullptr);
}

inline void FinishInstrumentQualityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::InstrumentQuality> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInstrumentQualityBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::InstrumentQuality> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::InstrumentQualityT> UnPackInstrumentQuality(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::InstrumentQualityT>(GetInstrumentQuality(buf)->UnPack(res));
}

inline std::unique_ptr<fb::InstrumentQualityT> UnPackSizePrefixedInstrumentQuality(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::InstrumentQualityT>(GetSizePrefixedInstrumentQuality(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_INSTRUMENTQUALITY_FB_H_
