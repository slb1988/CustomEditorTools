// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COLLECTION_FB_H_
#define FLATBUFFERS_GENERATED_COLLECTION_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Collection;
struct CollectionBuilder;
struct CollectionT;

struct CollectionRow;
struct CollectionRowBuilder;
struct CollectionRowT;

struct CollectionT : public ::flatbuffers::NativeTable {
  typedef Collection TableType;
  std::vector<std::unique_ptr<fb::CollectionRowT>> Collections{};
  CollectionT() = default;
  CollectionT(const CollectionT &o);
  CollectionT(CollectionT&&) FLATBUFFERS_NOEXCEPT = default;
  CollectionT &operator=(CollectionT o) FLATBUFFERS_NOEXCEPT;
};

struct Collection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CollectionT NativeTableType;
  typedef CollectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COLLECTIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectionRow>> *Collections() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectionRow>> *>(VT_COLLECTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COLLECTIONS) &&
           verifier.VerifyVector(Collections()) &&
           verifier.VerifyVectorOfTables(Collections()) &&
           verifier.EndTable();
  }
  CollectionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CollectionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Collection> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CollectionBuilder {
  typedef Collection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Collections(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectionRow>>> Collections) {
    fbb_.AddOffset(Collection::VT_COLLECTIONS, Collections);
  }
  explicit CollectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Collection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Collection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Collection> CreateCollection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectionRow>>> Collections = 0) {
  CollectionBuilder builder_(_fbb);
  builder_.add_Collections(Collections);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Collection> CreateCollectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::CollectionRow>> *Collections = nullptr) {
  auto Collections__ = Collections ? _fbb.CreateVectorOfSortedTables<fb::CollectionRow>(Collections) : 0;
  return fb::CreateCollection(
      _fbb,
      Collections__);
}

::flatbuffers::Offset<Collection> CreateCollection(::flatbuffers::FlatBufferBuilder &_fbb, const CollectionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CollectionRowT : public ::flatbuffers::NativeTable {
  typedef CollectionRow TableType;
  uint32_t Id = 0;
  int32_t Name = 0;
  uint32_t CollectTimes = 0;
  uint32_t CostEnergy = 0;
  uint32_t GainExp = 0;
  uint32_t ResReleaseVer = 0;
};

struct CollectionRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CollectionRowT NativeTableType;
  typedef CollectionRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_COLLECTTIMES = 8,
    VT_COSTENERGY = 10,
    VT_GAINEXP = 12,
    VT_RESRELEASEVER = 14
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const CollectionRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  int32_t Name() const {
    return GetField<int32_t>(VT_NAME, 0);
  }
  uint32_t CollectTimes() const {
    return GetField<uint32_t>(VT_COLLECTTIMES, 0);
  }
  uint32_t CostEnergy() const {
    return GetField<uint32_t>(VT_COSTENERGY, 0);
  }
  uint32_t GainExp() const {
    return GetField<uint32_t>(VT_GAINEXP, 0);
  }
  uint32_t ResReleaseVer() const {
    return GetField<uint32_t>(VT_RESRELEASEVER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_NAME, 4) &&
           VerifyField<uint32_t>(verifier, VT_COLLECTTIMES, 4) &&
           VerifyField<uint32_t>(verifier, VT_COSTENERGY, 4) &&
           VerifyField<uint32_t>(verifier, VT_GAINEXP, 4) &&
           VerifyField<uint32_t>(verifier, VT_RESRELEASEVER, 4) &&
           verifier.EndTable();
  }
  CollectionRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CollectionRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CollectionRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectionRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CollectionRowBuilder {
  typedef CollectionRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(CollectionRow::VT_ID, Id, 0);
  }
  void add_Name(int32_t Name) {
    fbb_.AddElement<int32_t>(CollectionRow::VT_NAME, Name, 0);
  }
  void add_CollectTimes(uint32_t CollectTimes) {
    fbb_.AddElement<uint32_t>(CollectionRow::VT_COLLECTTIMES, CollectTimes, 0);
  }
  void add_CostEnergy(uint32_t CostEnergy) {
    fbb_.AddElement<uint32_t>(CollectionRow::VT_COSTENERGY, CostEnergy, 0);
  }
  void add_GainExp(uint32_t GainExp) {
    fbb_.AddElement<uint32_t>(CollectionRow::VT_GAINEXP, GainExp, 0);
  }
  void add_ResReleaseVer(uint32_t ResReleaseVer) {
    fbb_.AddElement<uint32_t>(CollectionRow::VT_RESRELEASEVER, ResReleaseVer, 0);
  }
  explicit CollectionRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CollectionRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CollectionRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CollectionRow> CreateCollectionRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    int32_t Name = 0,
    uint32_t CollectTimes = 0,
    uint32_t CostEnergy = 0,
    uint32_t GainExp = 0,
    uint32_t ResReleaseVer = 0) {
  CollectionRowBuilder builder_(_fbb);
  builder_.add_ResReleaseVer(ResReleaseVer);
  builder_.add_GainExp(GainExp);
  builder_.add_CostEnergy(CostEnergy);
  builder_.add_CollectTimes(CollectTimes);
  builder_.add_Name(Name);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<CollectionRow> CreateCollectionRow(::flatbuffers::FlatBufferBuilder &_fbb, const CollectionRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CollectionT::CollectionT(const CollectionT &o) {
  Collections.reserve(o.Collections.size());
  for (const auto &Collections_ : o.Collections) { Collections.emplace_back((Collections_) ? new fb::CollectionRowT(*Collections_) : nullptr); }
}

inline CollectionT &CollectionT::operator=(CollectionT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Collections, o.Collections);
  return *this;
}

inline CollectionT *Collection::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CollectionT>(new CollectionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Collection::UnPackTo(CollectionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Collections(); if (_e) { _o->Collections.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Collections[_i]) { _e->Get(_i)->UnPackTo(_o->Collections[_i].get(), _resolver); } else { _o->Collections[_i] = std::unique_ptr<fb::CollectionRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Collections.resize(0); } }
}

inline ::flatbuffers::Offset<Collection> Collection::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCollection(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Collection> CreateCollection(::flatbuffers::FlatBufferBuilder &_fbb, const CollectionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CollectionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Collections = _o->Collections.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::CollectionRow>> (_o->Collections.size(), [](size_t i, _VectorArgs *__va) { return CreateCollectionRow(*__va->__fbb, __va->__o->Collections[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateCollection(
      _fbb,
      _Collections);
}

inline CollectionRowT *CollectionRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CollectionRowT>(new CollectionRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CollectionRow::UnPackTo(CollectionRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Name(); _o->Name = _e; }
  { auto _e = CollectTimes(); _o->CollectTimes = _e; }
  { auto _e = CostEnergy(); _o->CostEnergy = _e; }
  { auto _e = GainExp(); _o->GainExp = _e; }
  { auto _e = ResReleaseVer(); _o->ResReleaseVer = _e; }
}

inline ::flatbuffers::Offset<CollectionRow> CollectionRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectionRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCollectionRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CollectionRow> CreateCollectionRow(::flatbuffers::FlatBufferBuilder &_fbb, const CollectionRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CollectionRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Name = _o->Name;
  auto _CollectTimes = _o->CollectTimes;
  auto _CostEnergy = _o->CostEnergy;
  auto _GainExp = _o->GainExp;
  auto _ResReleaseVer = _o->ResReleaseVer;
  return fb::CreateCollectionRow(
      _fbb,
      _Id,
      _Name,
      _CollectTimes,
      _CostEnergy,
      _GainExp,
      _ResReleaseVer);
}

inline const fb::Collection *GetCollection(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Collection>(buf);
}

inline const fb::Collection *GetSizePrefixedCollection(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Collection>(buf);
}

inline bool VerifyCollectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Collection>(nullptr);
}

inline bool VerifySizePrefixedCollectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Collection>(nullptr);
}

inline void FinishCollectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Collection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCollectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Collection> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::CollectionT> UnPackCollection(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::CollectionT>(GetCollection(buf)->UnPack(res));
}

inline std::unique_ptr<fb::CollectionT> UnPackSizePrefixedCollection(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::CollectionT>(GetSizePrefixedCollection(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_COLLECTION_FB_H_
