// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEITEM2_FB_H_
#define FLATBUFFERS_GENERATED_GAMEITEM2_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct GameItem2;
struct GameItem2Builder;
struct GameItem2T;

struct GameItem2Row;
struct GameItem2RowBuilder;
struct GameItem2RowT;

struct GameItem2T : public ::flatbuffers::NativeTable {
  typedef GameItem2 TableType;
  std::vector<std::unique_ptr<fb::GameItem2RowT>> GameItem2s{};
  GameItem2T() = default;
  GameItem2T(const GameItem2T &o);
  GameItem2T(GameItem2T&&) FLATBUFFERS_NOEXCEPT = default;
  GameItem2T &operator=(GameItem2T o) FLATBUFFERS_NOEXCEPT;
};

struct GameItem2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameItem2T NativeTableType;
  typedef GameItem2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAMEITEM2S = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::GameItem2Row>> *GameItem2s() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::GameItem2Row>> *>(VT_GAMEITEM2S);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GAMEITEM2S) &&
           verifier.VerifyVector(GameItem2s()) &&
           verifier.VerifyVectorOfTables(GameItem2s()) &&
           verifier.EndTable();
  }
  GameItem2T *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GameItem2T *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<GameItem2> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GameItem2T* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GameItem2Builder {
  typedef GameItem2 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_GameItem2s(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::GameItem2Row>>> GameItem2s) {
    fbb_.AddOffset(GameItem2::VT_GAMEITEM2S, GameItem2s);
  }
  explicit GameItem2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameItem2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameItem2>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameItem2> CreateGameItem2(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::GameItem2Row>>> GameItem2s = 0) {
  GameItem2Builder builder_(_fbb);
  builder_.add_GameItem2s(GameItem2s);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameItem2> CreateGameItem2Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::GameItem2Row>> *GameItem2s = nullptr) {
  auto GameItem2s__ = GameItem2s ? _fbb.CreateVectorOfSortedTables<fb::GameItem2Row>(GameItem2s) : 0;
  return fb::CreateGameItem2(
      _fbb,
      GameItem2s__);
}

::flatbuffers::Offset<GameItem2> CreateGameItem2(::flatbuffers::FlatBufferBuilder &_fbb, const GameItem2T *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct GameItem2RowT : public ::flatbuffers::NativeTable {
  typedef GameItem2Row TableType;
  uint32_t Id = 0;
  std::string ItemName{};
  fb::ItemType ItemType = fb::ItemType_NONE;
  std::vector<uint32_t> ItemClass{};
  std::unique_ptr<fb::tuple_int32_string_list_uint32T> TupleTest{};
  std::unique_ptr<fb::map_int32_int64T> MapTest{};
  std::vector<std::unique_ptr<fb::tuple_int32_stringT>> ComplexTest{};
  int64_t StartTime = 0;
  float Float32Test = 0.0f;
  std::unique_ptr<fb::tuple_int32_tuple_uint32_stringT> TupleInTuple{};
  std::vector<fb::ItemType> EnumInList{};
  GameItem2RowT() = default;
  GameItem2RowT(const GameItem2RowT &o);
  GameItem2RowT(GameItem2RowT&&) FLATBUFFERS_NOEXCEPT = default;
  GameItem2RowT &operator=(GameItem2RowT o) FLATBUFFERS_NOEXCEPT;
};

struct GameItem2Row FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameItem2RowT NativeTableType;
  typedef GameItem2RowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ITEMNAME = 6,
    VT_ITEMTYPE = 8,
    VT_ITEMCLASS = 10,
    VT_TUPLETEST = 12,
    VT_MAPTEST = 14,
    VT_COMPLEXTEST = 16,
    VT_STARTTIME = 18,
    VT_FLOAT32TEST = 20,
    VT_TUPLEINTUPLE = 22,
    VT_ENUMINLIST = 24
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const GameItem2Row * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  const ::flatbuffers::String *ItemName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ITEMNAME);
  }
  fb::ItemType ItemType() const {
    return static_cast<fb::ItemType>(GetField<int32_t>(VT_ITEMTYPE, 0));
  }
  const ::flatbuffers::Vector<uint32_t> *ItemClass() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_ITEMCLASS);
  }
  const fb::tuple_int32_string_list_uint32 *TupleTest() const {
    return GetPointer<const fb::tuple_int32_string_list_uint32 *>(VT_TUPLETEST);
  }
  const fb::map_int32_int64 *MapTest() const {
    return GetPointer<const fb::map_int32_int64 *>(VT_MAPTEST);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_string>> *ComplexTest() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_string>> *>(VT_COMPLEXTEST);
  }
  int64_t StartTime() const {
    return GetField<int64_t>(VT_STARTTIME, 0);
  }
  float Float32Test() const {
    return GetField<float>(VT_FLOAT32TEST, 0.0f);
  }
  const fb::tuple_int32_tuple_uint32_string *TupleInTuple() const {
    return GetPointer<const fb::tuple_int32_tuple_uint32_string *>(VT_TUPLEINTUPLE);
  }
  const ::flatbuffers::Vector<int32_t> *EnumInList() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_ENUMINLIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_ITEMNAME) &&
           verifier.VerifyString(ItemName()) &&
           VerifyField<int32_t>(verifier, VT_ITEMTYPE, 4) &&
           VerifyOffset(verifier, VT_ITEMCLASS) &&
           verifier.VerifyVector(ItemClass()) &&
           VerifyOffset(verifier, VT_TUPLETEST) &&
           verifier.VerifyTable(TupleTest()) &&
           VerifyOffset(verifier, VT_MAPTEST) &&
           verifier.VerifyTable(MapTest()) &&
           VerifyOffset(verifier, VT_COMPLEXTEST) &&
           verifier.VerifyVector(ComplexTest()) &&
           verifier.VerifyVectorOfTables(ComplexTest()) &&
           VerifyField<int64_t>(verifier, VT_STARTTIME, 8) &&
           VerifyField<float>(verifier, VT_FLOAT32TEST, 4) &&
           VerifyOffset(verifier, VT_TUPLEINTUPLE) &&
           verifier.VerifyTable(TupleInTuple()) &&
           VerifyOffset(verifier, VT_ENUMINLIST) &&
           verifier.VerifyVector(EnumInList()) &&
           verifier.EndTable();
  }
  GameItem2RowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GameItem2RowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<GameItem2Row> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GameItem2RowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GameItem2RowBuilder {
  typedef GameItem2Row Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(GameItem2Row::VT_ID, Id, 0);
  }
  void add_ItemName(::flatbuffers::Offset<::flatbuffers::String> ItemName) {
    fbb_.AddOffset(GameItem2Row::VT_ITEMNAME, ItemName);
  }
  void add_ItemType(fb::ItemType ItemType) {
    fbb_.AddElement<int32_t>(GameItem2Row::VT_ITEMTYPE, static_cast<int32_t>(ItemType), 0);
  }
  void add_ItemClass(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> ItemClass) {
    fbb_.AddOffset(GameItem2Row::VT_ITEMCLASS, ItemClass);
  }
  void add_TupleTest(::flatbuffers::Offset<fb::tuple_int32_string_list_uint32> TupleTest) {
    fbb_.AddOffset(GameItem2Row::VT_TUPLETEST, TupleTest);
  }
  void add_MapTest(::flatbuffers::Offset<fb::map_int32_int64> MapTest) {
    fbb_.AddOffset(GameItem2Row::VT_MAPTEST, MapTest);
  }
  void add_ComplexTest(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_string>>> ComplexTest) {
    fbb_.AddOffset(GameItem2Row::VT_COMPLEXTEST, ComplexTest);
  }
  void add_StartTime(int64_t StartTime) {
    fbb_.AddElement<int64_t>(GameItem2Row::VT_STARTTIME, StartTime, 0);
  }
  void add_Float32Test(float Float32Test) {
    fbb_.AddElement<float>(GameItem2Row::VT_FLOAT32TEST, Float32Test, 0.0f);
  }
  void add_TupleInTuple(::flatbuffers::Offset<fb::tuple_int32_tuple_uint32_string> TupleInTuple) {
    fbb_.AddOffset(GameItem2Row::VT_TUPLEINTUPLE, TupleInTuple);
  }
  void add_EnumInList(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> EnumInList) {
    fbb_.AddOffset(GameItem2Row::VT_ENUMINLIST, EnumInList);
  }
  explicit GameItem2RowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameItem2Row> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameItem2Row>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameItem2Row> CreateGameItem2Row(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ItemName = 0,
    fb::ItemType ItemType = fb::ItemType_NONE,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> ItemClass = 0,
    ::flatbuffers::Offset<fb::tuple_int32_string_list_uint32> TupleTest = 0,
    ::flatbuffers::Offset<fb::map_int32_int64> MapTest = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_string>>> ComplexTest = 0,
    int64_t StartTime = 0,
    float Float32Test = 0.0f,
    ::flatbuffers::Offset<fb::tuple_int32_tuple_uint32_string> TupleInTuple = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> EnumInList = 0) {
  GameItem2RowBuilder builder_(_fbb);
  builder_.add_StartTime(StartTime);
  builder_.add_EnumInList(EnumInList);
  builder_.add_TupleInTuple(TupleInTuple);
  builder_.add_Float32Test(Float32Test);
  builder_.add_ComplexTest(ComplexTest);
  builder_.add_MapTest(MapTest);
  builder_.add_TupleTest(TupleTest);
  builder_.add_ItemClass(ItemClass);
  builder_.add_ItemType(ItemType);
  builder_.add_ItemName(ItemName);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameItem2Row> CreateGameItem2RowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *ItemName = nullptr,
    fb::ItemType ItemType = fb::ItemType_NONE,
    const std::vector<uint32_t> *ItemClass = nullptr,
    ::flatbuffers::Offset<fb::tuple_int32_string_list_uint32> TupleTest = 0,
    ::flatbuffers::Offset<fb::map_int32_int64> MapTest = 0,
    const std::vector<::flatbuffers::Offset<fb::tuple_int32_string>> *ComplexTest = nullptr,
    int64_t StartTime = 0,
    float Float32Test = 0.0f,
    ::flatbuffers::Offset<fb::tuple_int32_tuple_uint32_string> TupleInTuple = 0,
    const std::vector<int32_t> *EnumInList = nullptr) {
  auto ItemName__ = ItemName ? _fbb.CreateString(ItemName) : 0;
  auto ItemClass__ = ItemClass ? _fbb.CreateVector<uint32_t>(*ItemClass) : 0;
  auto ComplexTest__ = ComplexTest ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_string>>(*ComplexTest) : 0;
  auto EnumInList__ = EnumInList ? _fbb.CreateVector<int32_t>(*EnumInList) : 0;
  return fb::CreateGameItem2Row(
      _fbb,
      Id,
      ItemName__,
      ItemType,
      ItemClass__,
      TupleTest,
      MapTest,
      ComplexTest__,
      StartTime,
      Float32Test,
      TupleInTuple,
      EnumInList__);
}

::flatbuffers::Offset<GameItem2Row> CreateGameItem2Row(::flatbuffers::FlatBufferBuilder &_fbb, const GameItem2RowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GameItem2T::GameItem2T(const GameItem2T &o) {
  GameItem2s.reserve(o.GameItem2s.size());
  for (const auto &GameItem2s_ : o.GameItem2s) { GameItem2s.emplace_back((GameItem2s_) ? new fb::GameItem2RowT(*GameItem2s_) : nullptr); }
}

inline GameItem2T &GameItem2T::operator=(GameItem2T o) FLATBUFFERS_NOEXCEPT {
  std::swap(GameItem2s, o.GameItem2s);
  return *this;
}

inline GameItem2T *GameItem2::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GameItem2T>(new GameItem2T());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GameItem2::UnPackTo(GameItem2T *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = GameItem2s(); if (_e) { _o->GameItem2s.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->GameItem2s[_i]) { _e->Get(_i)->UnPackTo(_o->GameItem2s[_i].get(), _resolver); } else { _o->GameItem2s[_i] = std::unique_ptr<fb::GameItem2RowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->GameItem2s.resize(0); } }
}

inline ::flatbuffers::Offset<GameItem2> GameItem2::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GameItem2T* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGameItem2(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<GameItem2> CreateGameItem2(::flatbuffers::FlatBufferBuilder &_fbb, const GameItem2T *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const GameItem2T* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _GameItem2s = _o->GameItem2s.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::GameItem2Row>> (_o->GameItem2s.size(), [](size_t i, _VectorArgs *__va) { return CreateGameItem2Row(*__va->__fbb, __va->__o->GameItem2s[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateGameItem2(
      _fbb,
      _GameItem2s);
}

inline GameItem2RowT::GameItem2RowT(const GameItem2RowT &o)
      : Id(o.Id),
        ItemName(o.ItemName),
        ItemType(o.ItemType),
        ItemClass(o.ItemClass),
        TupleTest((o.TupleTest) ? new fb::tuple_int32_string_list_uint32T(*o.TupleTest) : nullptr),
        MapTest((o.MapTest) ? new fb::map_int32_int64T(*o.MapTest) : nullptr),
        StartTime(o.StartTime),
        Float32Test(o.Float32Test),
        TupleInTuple((o.TupleInTuple) ? new fb::tuple_int32_tuple_uint32_stringT(*o.TupleInTuple) : nullptr),
        EnumInList(o.EnumInList) {
  ComplexTest.reserve(o.ComplexTest.size());
  for (const auto &ComplexTest_ : o.ComplexTest) { ComplexTest.emplace_back((ComplexTest_) ? new fb::tuple_int32_stringT(*ComplexTest_) : nullptr); }
}

inline GameItem2RowT &GameItem2RowT::operator=(GameItem2RowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(ItemName, o.ItemName);
  std::swap(ItemType, o.ItemType);
  std::swap(ItemClass, o.ItemClass);
  std::swap(TupleTest, o.TupleTest);
  std::swap(MapTest, o.MapTest);
  std::swap(ComplexTest, o.ComplexTest);
  std::swap(StartTime, o.StartTime);
  std::swap(Float32Test, o.Float32Test);
  std::swap(TupleInTuple, o.TupleInTuple);
  std::swap(EnumInList, o.EnumInList);
  return *this;
}

inline GameItem2RowT *GameItem2Row::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GameItem2RowT>(new GameItem2RowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GameItem2Row::UnPackTo(GameItem2RowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = ItemName(); if (_e) _o->ItemName = _e->str(); }
  { auto _e = ItemType(); _o->ItemType = _e; }
  { auto _e = ItemClass(); if (_e) { _o->ItemClass.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->ItemClass[_i] = _e->Get(_i); } } else { _o->ItemClass.resize(0); } }
  { auto _e = TupleTest(); if (_e) { if(_o->TupleTest) { _e->UnPackTo(_o->TupleTest.get(), _resolver); } else { _o->TupleTest = std::unique_ptr<fb::tuple_int32_string_list_uint32T>(_e->UnPack(_resolver)); } } else if (_o->TupleTest) { _o->TupleTest.reset(); } }
  { auto _e = MapTest(); if (_e) { if(_o->MapTest) { _e->UnPackTo(_o->MapTest.get(), _resolver); } else { _o->MapTest = std::unique_ptr<fb::map_int32_int64T>(_e->UnPack(_resolver)); } } else if (_o->MapTest) { _o->MapTest.reset(); } }
  { auto _e = ComplexTest(); if (_e) { _o->ComplexTest.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->ComplexTest[_i]) { _e->Get(_i)->UnPackTo(_o->ComplexTest[_i].get(), _resolver); } else { _o->ComplexTest[_i] = std::unique_ptr<fb::tuple_int32_stringT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->ComplexTest.resize(0); } }
  { auto _e = StartTime(); _o->StartTime = _e; }
  { auto _e = Float32Test(); _o->Float32Test = _e; }
  { auto _e = TupleInTuple(); if (_e) { if(_o->TupleInTuple) { _e->UnPackTo(_o->TupleInTuple.get(), _resolver); } else { _o->TupleInTuple = std::unique_ptr<fb::tuple_int32_tuple_uint32_stringT>(_e->UnPack(_resolver)); } } else if (_o->TupleInTuple) { _o->TupleInTuple.reset(); } }
  { auto _e = EnumInList(); if (_e) { _o->EnumInList.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->EnumInList[_i] = static_cast<fb::ItemType>(_e->Get(_i)); } } else { _o->EnumInList.resize(0); } }
}

inline ::flatbuffers::Offset<GameItem2Row> GameItem2Row::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GameItem2RowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGameItem2Row(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<GameItem2Row> CreateGameItem2Row(::flatbuffers::FlatBufferBuilder &_fbb, const GameItem2RowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const GameItem2RowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _ItemName = _o->ItemName.empty() ? 0 : _fbb.CreateString(_o->ItemName);
  auto _ItemType = _o->ItemType;
  auto _ItemClass = _o->ItemClass.size() ? _fbb.CreateVector(_o->ItemClass) : 0;
  auto _TupleTest = _o->TupleTest ? Createtuple_int32_string_list_uint32(_fbb, _o->TupleTest.get(), _rehasher) : 0;
  auto _MapTest = _o->MapTest ? Createmap_int32_int64(_fbb, _o->MapTest.get(), _rehasher) : 0;
  auto _ComplexTest = _o->ComplexTest.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_string>> (_o->ComplexTest.size(), [](size_t i, _VectorArgs *__va) { return Createtuple_int32_string(*__va->__fbb, __va->__o->ComplexTest[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _StartTime = _o->StartTime;
  auto _Float32Test = _o->Float32Test;
  auto _TupleInTuple = _o->TupleInTuple ? Createtuple_int32_tuple_uint32_string(_fbb, _o->TupleInTuple.get(), _rehasher) : 0;
  auto _EnumInList = _o->EnumInList.size() ? _fbb.CreateVectorScalarCast<int32_t>(::flatbuffers::data(_o->EnumInList), _o->EnumInList.size()) : 0;
  return fb::CreateGameItem2Row(
      _fbb,
      _Id,
      _ItemName,
      _ItemType,
      _ItemClass,
      _TupleTest,
      _MapTest,
      _ComplexTest,
      _StartTime,
      _Float32Test,
      _TupleInTuple,
      _EnumInList);
}

inline const fb::GameItem2 *GetGameItem2(const void *buf) {
  return ::flatbuffers::GetRoot<fb::GameItem2>(buf);
}

inline const fb::GameItem2 *GetSizePrefixedGameItem2(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::GameItem2>(buf);
}

inline bool VerifyGameItem2Buffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::GameItem2>(nullptr);
}

inline bool VerifySizePrefixedGameItem2Buffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::GameItem2>(nullptr);
}

inline void FinishGameItem2Buffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::GameItem2> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameItem2Buffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::GameItem2> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::GameItem2T> UnPackGameItem2(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::GameItem2T>(GetGameItem2(buf)->UnPack(res));
}

inline std::unique_ptr<fb::GameItem2T> UnPackSizePrefixedGameItem2(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::GameItem2T>(GetSizePrefixedGameItem2(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_GAMEITEM2_FB_H_
