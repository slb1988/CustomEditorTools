// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AVATARSLOTTYPE_FB_H_
#define FLATBUFFERS_GENERATED_AVATARSLOTTYPE_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct AvatarSlotType;
struct AvatarSlotTypeBuilder;
struct AvatarSlotTypeT;

struct AvatarSlotTypeRow;
struct AvatarSlotTypeRowBuilder;
struct AvatarSlotTypeRowT;

struct AvatarSlotTypeT : public ::flatbuffers::NativeTable {
  typedef AvatarSlotType TableType;
  std::vector<std::unique_ptr<fb::AvatarSlotTypeRowT>> AvatarSlotTypes{};
  AvatarSlotTypeT() = default;
  AvatarSlotTypeT(const AvatarSlotTypeT &o);
  AvatarSlotTypeT(AvatarSlotTypeT&&) FLATBUFFERS_NOEXCEPT = default;
  AvatarSlotTypeT &operator=(AvatarSlotTypeT o) FLATBUFFERS_NOEXCEPT;
};

struct AvatarSlotType FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AvatarSlotTypeT NativeTableType;
  typedef AvatarSlotTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AVATARSLOTTYPES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSlotTypeRow>> *AvatarSlotTypes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSlotTypeRow>> *>(VT_AVATARSLOTTYPES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AVATARSLOTTYPES) &&
           verifier.VerifyVector(AvatarSlotTypes()) &&
           verifier.VerifyVectorOfTables(AvatarSlotTypes()) &&
           verifier.EndTable();
  }
  AvatarSlotTypeT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AvatarSlotTypeT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AvatarSlotType> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotTypeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AvatarSlotTypeBuilder {
  typedef AvatarSlotType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_AvatarSlotTypes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSlotTypeRow>>> AvatarSlotTypes) {
    fbb_.AddOffset(AvatarSlotType::VT_AVATARSLOTTYPES, AvatarSlotTypes);
  }
  explicit AvatarSlotTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AvatarSlotType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AvatarSlotType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AvatarSlotType> CreateAvatarSlotType(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSlotTypeRow>>> AvatarSlotTypes = 0) {
  AvatarSlotTypeBuilder builder_(_fbb);
  builder_.add_AvatarSlotTypes(AvatarSlotTypes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AvatarSlotType> CreateAvatarSlotTypeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::AvatarSlotTypeRow>> *AvatarSlotTypes = nullptr) {
  auto AvatarSlotTypes__ = AvatarSlotTypes ? _fbb.CreateVectorOfSortedTables<fb::AvatarSlotTypeRow>(AvatarSlotTypes) : 0;
  return fb::CreateAvatarSlotType(
      _fbb,
      AvatarSlotTypes__);
}

::flatbuffers::Offset<AvatarSlotType> CreateAvatarSlotType(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotTypeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AvatarSlotTypeRowT : public ::flatbuffers::NativeTable {
  typedef AvatarSlotTypeRow TableType;
  uint32_t Id = 0;
  std::string Desc{};
  std::vector<uint32_t> SlotId{};
};

struct AvatarSlotTypeRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AvatarSlotTypeRowT NativeTableType;
  typedef AvatarSlotTypeRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_DESC = 6,
    VT_SLOTID = 8
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const AvatarSlotTypeRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  const ::flatbuffers::String *Desc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESC);
  }
  const ::flatbuffers::Vector<uint32_t> *SlotId() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_SLOTID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(Desc()) &&
           VerifyOffset(verifier, VT_SLOTID) &&
           verifier.VerifyVector(SlotId()) &&
           verifier.EndTable();
  }
  AvatarSlotTypeRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AvatarSlotTypeRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AvatarSlotTypeRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotTypeRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AvatarSlotTypeRowBuilder {
  typedef AvatarSlotTypeRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(AvatarSlotTypeRow::VT_ID, Id, 0);
  }
  void add_Desc(::flatbuffers::Offset<::flatbuffers::String> Desc) {
    fbb_.AddOffset(AvatarSlotTypeRow::VT_DESC, Desc);
  }
  void add_SlotId(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> SlotId) {
    fbb_.AddOffset(AvatarSlotTypeRow::VT_SLOTID, SlotId);
  }
  explicit AvatarSlotTypeRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AvatarSlotTypeRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AvatarSlotTypeRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AvatarSlotTypeRow> CreateAvatarSlotTypeRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Desc = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> SlotId = 0) {
  AvatarSlotTypeRowBuilder builder_(_fbb);
  builder_.add_SlotId(SlotId);
  builder_.add_Desc(Desc);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AvatarSlotTypeRow> CreateAvatarSlotTypeRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *Desc = nullptr,
    const std::vector<uint32_t> *SlotId = nullptr) {
  auto Desc__ = Desc ? _fbb.CreateString(Desc) : 0;
  auto SlotId__ = SlotId ? _fbb.CreateVector<uint32_t>(*SlotId) : 0;
  return fb::CreateAvatarSlotTypeRow(
      _fbb,
      Id,
      Desc__,
      SlotId__);
}

::flatbuffers::Offset<AvatarSlotTypeRow> CreateAvatarSlotTypeRow(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotTypeRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AvatarSlotTypeT::AvatarSlotTypeT(const AvatarSlotTypeT &o) {
  AvatarSlotTypes.reserve(o.AvatarSlotTypes.size());
  for (const auto &AvatarSlotTypes_ : o.AvatarSlotTypes) { AvatarSlotTypes.emplace_back((AvatarSlotTypes_) ? new fb::AvatarSlotTypeRowT(*AvatarSlotTypes_) : nullptr); }
}

inline AvatarSlotTypeT &AvatarSlotTypeT::operator=(AvatarSlotTypeT o) FLATBUFFERS_NOEXCEPT {
  std::swap(AvatarSlotTypes, o.AvatarSlotTypes);
  return *this;
}

inline AvatarSlotTypeT *AvatarSlotType::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AvatarSlotTypeT>(new AvatarSlotTypeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AvatarSlotType::UnPackTo(AvatarSlotTypeT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = AvatarSlotTypes(); if (_e) { _o->AvatarSlotTypes.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->AvatarSlotTypes[_i]) { _e->Get(_i)->UnPackTo(_o->AvatarSlotTypes[_i].get(), _resolver); } else { _o->AvatarSlotTypes[_i] = std::unique_ptr<fb::AvatarSlotTypeRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->AvatarSlotTypes.resize(0); } }
}

inline ::flatbuffers::Offset<AvatarSlotType> AvatarSlotType::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotTypeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAvatarSlotType(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AvatarSlotType> CreateAvatarSlotType(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotTypeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AvatarSlotTypeT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _AvatarSlotTypes = _o->AvatarSlotTypes.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::AvatarSlotTypeRow>> (_o->AvatarSlotTypes.size(), [](size_t i, _VectorArgs *__va) { return CreateAvatarSlotTypeRow(*__va->__fbb, __va->__o->AvatarSlotTypes[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAvatarSlotType(
      _fbb,
      _AvatarSlotTypes);
}

inline AvatarSlotTypeRowT *AvatarSlotTypeRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AvatarSlotTypeRowT>(new AvatarSlotTypeRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AvatarSlotTypeRow::UnPackTo(AvatarSlotTypeRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Desc(); if (_e) _o->Desc = _e->str(); }
  { auto _e = SlotId(); if (_e) { _o->SlotId.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->SlotId[_i] = _e->Get(_i); } } else { _o->SlotId.resize(0); } }
}

inline ::flatbuffers::Offset<AvatarSlotTypeRow> AvatarSlotTypeRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotTypeRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAvatarSlotTypeRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AvatarSlotTypeRow> CreateAvatarSlotTypeRow(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotTypeRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AvatarSlotTypeRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Desc = _o->Desc.empty() ? 0 : _fbb.CreateString(_o->Desc);
  auto _SlotId = _o->SlotId.size() ? _fbb.CreateVector(_o->SlotId) : 0;
  return fb::CreateAvatarSlotTypeRow(
      _fbb,
      _Id,
      _Desc,
      _SlotId);
}

inline const fb::AvatarSlotType *GetAvatarSlotType(const void *buf) {
  return ::flatbuffers::GetRoot<fb::AvatarSlotType>(buf);
}

inline const fb::AvatarSlotType *GetSizePrefixedAvatarSlotType(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::AvatarSlotType>(buf);
}

inline bool VerifyAvatarSlotTypeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::AvatarSlotType>(nullptr);
}

inline bool VerifySizePrefixedAvatarSlotTypeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::AvatarSlotType>(nullptr);
}

inline void FinishAvatarSlotTypeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AvatarSlotType> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAvatarSlotTypeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AvatarSlotType> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::AvatarSlotTypeT> UnPackAvatarSlotType(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AvatarSlotTypeT>(GetAvatarSlotType(buf)->UnPack(res));
}

inline std::unique_ptr<fb::AvatarSlotTypeT> UnPackSizePrefixedAvatarSlotType(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AvatarSlotTypeT>(GetSizePrefixedAvatarSlotType(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_AVATARSLOTTYPE_FB_H_
