// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NAMECHARRANGE_FB_H_
#define FLATBUFFERS_GENERATED_NAMECHARRANGE_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct NameCharRange;
struct NameCharRangeBuilder;
struct NameCharRangeT;

struct NameCharRangeRow;
struct NameCharRangeRowBuilder;
struct NameCharRangeRowT;

struct NameCharRangeT : public ::flatbuffers::NativeTable {
  typedef NameCharRange TableType;
  std::vector<std::unique_ptr<fb::NameCharRangeRowT>> NameCharRanges{};
  NameCharRangeT() = default;
  NameCharRangeT(const NameCharRangeT &o);
  NameCharRangeT(NameCharRangeT&&) FLATBUFFERS_NOEXCEPT = default;
  NameCharRangeT &operator=(NameCharRangeT o) FLATBUFFERS_NOEXCEPT;
};

struct NameCharRange FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NameCharRangeT NativeTableType;
  typedef NameCharRangeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAMECHARRANGES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::NameCharRangeRow>> *NameCharRanges() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::NameCharRangeRow>> *>(VT_NAMECHARRANGES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAMECHARRANGES) &&
           verifier.VerifyVector(NameCharRanges()) &&
           verifier.VerifyVectorOfTables(NameCharRanges()) &&
           verifier.EndTable();
  }
  NameCharRangeT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NameCharRangeT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<NameCharRange> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const NameCharRangeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NameCharRangeBuilder {
  typedef NameCharRange Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_NameCharRanges(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::NameCharRangeRow>>> NameCharRanges) {
    fbb_.AddOffset(NameCharRange::VT_NAMECHARRANGES, NameCharRanges);
  }
  explicit NameCharRangeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NameCharRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NameCharRange>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NameCharRange> CreateNameCharRange(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::NameCharRangeRow>>> NameCharRanges = 0) {
  NameCharRangeBuilder builder_(_fbb);
  builder_.add_NameCharRanges(NameCharRanges);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NameCharRange> CreateNameCharRangeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::NameCharRangeRow>> *NameCharRanges = nullptr) {
  auto NameCharRanges__ = NameCharRanges ? _fbb.CreateVector<::flatbuffers::Offset<fb::NameCharRangeRow>>(*NameCharRanges) : 0;
  return fb::CreateNameCharRange(
      _fbb,
      NameCharRanges__);
}

::flatbuffers::Offset<NameCharRange> CreateNameCharRange(::flatbuffers::FlatBufferBuilder &_fbb, const NameCharRangeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct NameCharRangeRowT : public ::flatbuffers::NativeTable {
  typedef NameCharRangeRow TableType;
  uint32_t Id = 0;
  int32_t Start = 0;
  int32_t End = 0;
};

struct NameCharRangeRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NameCharRangeRowT NativeTableType;
  typedef NameCharRangeRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_START = 6,
    VT_END = 8
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  int32_t Start() const {
    return GetField<int32_t>(VT_START, 0);
  }
  int32_t End() const {
    return GetField<int32_t>(VT_END, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_START, 4) &&
           VerifyField<int32_t>(verifier, VT_END, 4) &&
           verifier.EndTable();
  }
  NameCharRangeRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NameCharRangeRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<NameCharRangeRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const NameCharRangeRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NameCharRangeRowBuilder {
  typedef NameCharRangeRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(NameCharRangeRow::VT_ID, Id, 0);
  }
  void add_Start(int32_t Start) {
    fbb_.AddElement<int32_t>(NameCharRangeRow::VT_START, Start, 0);
  }
  void add_End(int32_t End) {
    fbb_.AddElement<int32_t>(NameCharRangeRow::VT_END, End, 0);
  }
  explicit NameCharRangeRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NameCharRangeRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NameCharRangeRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NameCharRangeRow> CreateNameCharRangeRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    int32_t Start = 0,
    int32_t End = 0) {
  NameCharRangeRowBuilder builder_(_fbb);
  builder_.add_End(End);
  builder_.add_Start(Start);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<NameCharRangeRow> CreateNameCharRangeRow(::flatbuffers::FlatBufferBuilder &_fbb, const NameCharRangeRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline NameCharRangeT::NameCharRangeT(const NameCharRangeT &o) {
  NameCharRanges.reserve(o.NameCharRanges.size());
  for (const auto &NameCharRanges_ : o.NameCharRanges) { NameCharRanges.emplace_back((NameCharRanges_) ? new fb::NameCharRangeRowT(*NameCharRanges_) : nullptr); }
}

inline NameCharRangeT &NameCharRangeT::operator=(NameCharRangeT o) FLATBUFFERS_NOEXCEPT {
  std::swap(NameCharRanges, o.NameCharRanges);
  return *this;
}

inline NameCharRangeT *NameCharRange::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<NameCharRangeT>(new NameCharRangeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void NameCharRange::UnPackTo(NameCharRangeT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = NameCharRanges(); if (_e) { _o->NameCharRanges.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->NameCharRanges[_i]) { _e->Get(_i)->UnPackTo(_o->NameCharRanges[_i].get(), _resolver); } else { _o->NameCharRanges[_i] = std::unique_ptr<fb::NameCharRangeRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->NameCharRanges.resize(0); } }
}

inline ::flatbuffers::Offset<NameCharRange> NameCharRange::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const NameCharRangeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNameCharRange(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<NameCharRange> CreateNameCharRange(::flatbuffers::FlatBufferBuilder &_fbb, const NameCharRangeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const NameCharRangeT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _NameCharRanges = _o->NameCharRanges.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::NameCharRangeRow>> (_o->NameCharRanges.size(), [](size_t i, _VectorArgs *__va) { return CreateNameCharRangeRow(*__va->__fbb, __va->__o->NameCharRanges[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateNameCharRange(
      _fbb,
      _NameCharRanges);
}

inline NameCharRangeRowT *NameCharRangeRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<NameCharRangeRowT>(new NameCharRangeRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void NameCharRangeRow::UnPackTo(NameCharRangeRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Start(); _o->Start = _e; }
  { auto _e = End(); _o->End = _e; }
}

inline ::flatbuffers::Offset<NameCharRangeRow> NameCharRangeRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const NameCharRangeRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNameCharRangeRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<NameCharRangeRow> CreateNameCharRangeRow(::flatbuffers::FlatBufferBuilder &_fbb, const NameCharRangeRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const NameCharRangeRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Start = _o->Start;
  auto _End = _o->End;
  return fb::CreateNameCharRangeRow(
      _fbb,
      _Id,
      _Start,
      _End);
}

inline const fb::NameCharRange *GetNameCharRange(const void *buf) {
  return ::flatbuffers::GetRoot<fb::NameCharRange>(buf);
}

inline const fb::NameCharRange *GetSizePrefixedNameCharRange(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::NameCharRange>(buf);
}

inline bool VerifyNameCharRangeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::NameCharRange>(nullptr);
}

inline bool VerifySizePrefixedNameCharRangeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::NameCharRange>(nullptr);
}

inline void FinishNameCharRangeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::NameCharRange> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNameCharRangeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::NameCharRange> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::NameCharRangeT> UnPackNameCharRange(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::NameCharRangeT>(GetNameCharRange(buf)->UnPack(res));
}

inline std::unique_ptr<fb::NameCharRangeT> UnPackSizePrefixedNameCharRange(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::NameCharRangeT>(GetSizePrefixedNameCharRange(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_NAMECHARRANGE_FB_H_
