// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SILVER_FB_H_
#define FLATBUFFERS_GENERATED_SILVER_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Silver;
struct SilverBuilder;
struct SilverT;

struct SilverRow;
struct SilverRowBuilder;
struct SilverRowT;

struct SilverT : public ::flatbuffers::NativeTable {
  typedef Silver TableType;
  std::vector<std::unique_ptr<fb::SilverRowT>> Silvers{};
  SilverT() = default;
  SilverT(const SilverT &o);
  SilverT(SilverT&&) FLATBUFFERS_NOEXCEPT = default;
  SilverT &operator=(SilverT o) FLATBUFFERS_NOEXCEPT;
};

struct Silver FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SilverT NativeTableType;
  typedef SilverBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SILVERS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::SilverRow>> *Silvers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::SilverRow>> *>(VT_SILVERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SILVERS) &&
           verifier.VerifyVector(Silvers()) &&
           verifier.VerifyVectorOfTables(Silvers()) &&
           verifier.EndTable();
  }
  SilverT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SilverT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Silver> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SilverT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SilverBuilder {
  typedef Silver Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Silvers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::SilverRow>>> Silvers) {
    fbb_.AddOffset(Silver::VT_SILVERS, Silvers);
  }
  explicit SilverBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Silver> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Silver>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Silver> CreateSilver(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::SilverRow>>> Silvers = 0) {
  SilverBuilder builder_(_fbb);
  builder_.add_Silvers(Silvers);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Silver> CreateSilverDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::SilverRow>> *Silvers = nullptr) {
  auto Silvers__ = Silvers ? _fbb.CreateVectorOfSortedTables<fb::SilverRow>(Silvers) : 0;
  return fb::CreateSilver(
      _fbb,
      Silvers__);
}

::flatbuffers::Offset<Silver> CreateSilver(::flatbuffers::FlatBufferBuilder &_fbb, const SilverT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct SilverRowT : public ::flatbuffers::NativeTable {
  typedef SilverRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  uint32_t InteractEffect = 0;
  bool InitCreate = false;
  std::unique_ptr<fb::tuple_float32_float32_float32T> CenterPosition{};
  std::unique_ptr<fb::tuple_float32_float32_float32_float32T> Rotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> Scale{};
  std::string PrefabPath{};
  SilverRowT() = default;
  SilverRowT(const SilverRowT &o);
  SilverRowT(SilverRowT&&) FLATBUFFERS_NOEXCEPT = default;
  SilverRowT &operator=(SilverRowT o) FLATBUFFERS_NOEXCEPT;
};

struct SilverRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SilverRowT NativeTableType;
  typedef SilverRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_INTERACTEFFECT = 8,
    VT_INITCREATE = 10,
    VT_CENTERPOSITION = 12,
    VT_ROTATION = 14,
    VT_SCALE = 16,
    VT_PREFABPATH = 18
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const SilverRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  uint32_t InteractEffect() const {
    return GetField<uint32_t>(VT_INTERACTEFFECT, 0);
  }
  bool InitCreate() const {
    return GetField<uint8_t>(VT_INITCREATE, 0) != 0;
  }
  const fb::tuple_float32_float32_float32 *CenterPosition() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_CENTERPOSITION);
  }
  const fb::tuple_float32_float32_float32_float32 *Rotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32_float32 *>(VT_ROTATION);
  }
  const fb::tuple_float32_float32_float32 *Scale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_SCALE);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyField<uint32_t>(verifier, VT_INTERACTEFFECT, 4) &&
           VerifyField<uint8_t>(verifier, VT_INITCREATE, 1) &&
           VerifyOffset(verifier, VT_CENTERPOSITION) &&
           verifier.VerifyTable(CenterPosition()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(Rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(Scale()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           verifier.EndTable();
  }
  SilverRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SilverRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<SilverRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SilverRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SilverRowBuilder {
  typedef SilverRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(SilverRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(SilverRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_InteractEffect(uint32_t InteractEffect) {
    fbb_.AddElement<uint32_t>(SilverRow::VT_INTERACTEFFECT, InteractEffect, 0);
  }
  void add_InitCreate(bool InitCreate) {
    fbb_.AddElement<uint8_t>(SilverRow::VT_INITCREATE, static_cast<uint8_t>(InitCreate), 0);
  }
  void add_CenterPosition(::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition) {
    fbb_.AddOffset(SilverRow::VT_CENTERPOSITION, CenterPosition);
  }
  void add_Rotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation) {
    fbb_.AddOffset(SilverRow::VT_ROTATION, Rotation);
  }
  void add_Scale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale) {
    fbb_.AddOffset(SilverRow::VT_SCALE, Scale);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(SilverRow::VT_PREFABPATH, PrefabPath);
  }
  explicit SilverRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SilverRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SilverRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SilverRow> CreateSilverRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    uint32_t InteractEffect = 0,
    bool InitCreate = false,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0) {
  SilverRowBuilder builder_(_fbb);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_Scale(Scale);
  builder_.add_Rotation(Rotation);
  builder_.add_CenterPosition(CenterPosition);
  builder_.add_InteractEffect(InteractEffect);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  builder_.add_InitCreate(InitCreate);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SilverRow> CreateSilverRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    uint32_t InteractEffect = 0,
    bool InitCreate = false,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    const char *PrefabPath = nullptr) {
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateSilverRow(
      _fbb,
      Id,
      WorldTypeId,
      InteractEffect,
      InitCreate,
      CenterPosition,
      Rotation,
      Scale,
      PrefabPath__);
}

::flatbuffers::Offset<SilverRow> CreateSilverRow(::flatbuffers::FlatBufferBuilder &_fbb, const SilverRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SilverT::SilverT(const SilverT &o) {
  Silvers.reserve(o.Silvers.size());
  for (const auto &Silvers_ : o.Silvers) { Silvers.emplace_back((Silvers_) ? new fb::SilverRowT(*Silvers_) : nullptr); }
}

inline SilverT &SilverT::operator=(SilverT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Silvers, o.Silvers);
  return *this;
}

inline SilverT *Silver::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SilverT>(new SilverT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Silver::UnPackTo(SilverT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Silvers(); if (_e) { _o->Silvers.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Silvers[_i]) { _e->Get(_i)->UnPackTo(_o->Silvers[_i].get(), _resolver); } else { _o->Silvers[_i] = std::unique_ptr<fb::SilverRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Silvers.resize(0); } }
}

inline ::flatbuffers::Offset<Silver> Silver::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SilverT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSilver(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Silver> CreateSilver(::flatbuffers::FlatBufferBuilder &_fbb, const SilverT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const SilverT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Silvers = _o->Silvers.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::SilverRow>> (_o->Silvers.size(), [](size_t i, _VectorArgs *__va) { return CreateSilverRow(*__va->__fbb, __va->__o->Silvers[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateSilver(
      _fbb,
      _Silvers);
}

inline SilverRowT::SilverRowT(const SilverRowT &o)
      : Id(o.Id),
        WorldTypeId(o.WorldTypeId),
        InteractEffect(o.InteractEffect),
        InitCreate(o.InitCreate),
        CenterPosition((o.CenterPosition) ? new fb::tuple_float32_float32_float32T(*o.CenterPosition) : nullptr),
        Rotation((o.Rotation) ? new fb::tuple_float32_float32_float32_float32T(*o.Rotation) : nullptr),
        Scale((o.Scale) ? new fb::tuple_float32_float32_float32T(*o.Scale) : nullptr),
        PrefabPath(o.PrefabPath) {
}

inline SilverRowT &SilverRowT::operator=(SilverRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldTypeId, o.WorldTypeId);
  std::swap(InteractEffect, o.InteractEffect);
  std::swap(InitCreate, o.InitCreate);
  std::swap(CenterPosition, o.CenterPosition);
  std::swap(Rotation, o.Rotation);
  std::swap(Scale, o.Scale);
  std::swap(PrefabPath, o.PrefabPath);
  return *this;
}

inline SilverRowT *SilverRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<SilverRowT>(new SilverRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SilverRow::UnPackTo(SilverRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = InteractEffect(); _o->InteractEffect = _e; }
  { auto _e = InitCreate(); _o->InitCreate = _e; }
  { auto _e = CenterPosition(); if (_e) { if(_o->CenterPosition) { _e->UnPackTo(_o->CenterPosition.get(), _resolver); } else { _o->CenterPosition = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->CenterPosition) { _o->CenterPosition.reset(); } }
  { auto _e = Rotation(); if (_e) { if(_o->Rotation) { _e->UnPackTo(_o->Rotation.get(), _resolver); } else { _o->Rotation = std::unique_ptr<fb::tuple_float32_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Rotation) { _o->Rotation.reset(); } }
  { auto _e = Scale(); if (_e) { if(_o->Scale) { _e->UnPackTo(_o->Scale.get(), _resolver); } else { _o->Scale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Scale) { _o->Scale.reset(); } }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
}

inline ::flatbuffers::Offset<SilverRow> SilverRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const SilverRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSilverRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<SilverRow> CreateSilverRow(::flatbuffers::FlatBufferBuilder &_fbb, const SilverRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const SilverRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _InteractEffect = _o->InteractEffect;
  auto _InitCreate = _o->InitCreate;
  auto _CenterPosition = _o->CenterPosition ? Createtuple_float32_float32_float32(_fbb, _o->CenterPosition.get(), _rehasher) : 0;
  auto _Rotation = _o->Rotation ? Createtuple_float32_float32_float32_float32(_fbb, _o->Rotation.get(), _rehasher) : 0;
  auto _Scale = _o->Scale ? Createtuple_float32_float32_float32(_fbb, _o->Scale.get(), _rehasher) : 0;
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  return fb::CreateSilverRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _InteractEffect,
      _InitCreate,
      _CenterPosition,
      _Rotation,
      _Scale,
      _PrefabPath);
}

inline const fb::Silver *GetSilver(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Silver>(buf);
}

inline const fb::Silver *GetSizePrefixedSilver(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Silver>(buf);
}

inline bool VerifySilverBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Silver>(nullptr);
}

inline bool VerifySizePrefixedSilverBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Silver>(nullptr);
}

inline void FinishSilverBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Silver> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSilverBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Silver> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::SilverT> UnPackSilver(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::SilverT>(GetSilver(buf)->UnPack(res));
}

inline std::unique_ptr<fb::SilverT> UnPackSizePrefixedSilver(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::SilverT>(GetSizePrefixedSilver(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_SILVER_FB_H_
