// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PARTYBOXCONFIG_FB_H_
#define FLATBUFFERS_GENERATED_PARTYBOXCONFIG_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct PartyBoxConfig;
struct PartyBoxConfigBuilder;
struct PartyBoxConfigT;

struct PartyBoxConfigRow;
struct PartyBoxConfigRowBuilder;
struct PartyBoxConfigRowT;

struct PartyBoxConfigT : public ::flatbuffers::NativeTable {
  typedef PartyBoxConfig TableType;
  std::vector<std::unique_ptr<fb::PartyBoxConfigRowT>> PartyBoxConfigs{};
  PartyBoxConfigT() = default;
  PartyBoxConfigT(const PartyBoxConfigT &o);
  PartyBoxConfigT(PartyBoxConfigT&&) FLATBUFFERS_NOEXCEPT = default;
  PartyBoxConfigT &operator=(PartyBoxConfigT o) FLATBUFFERS_NOEXCEPT;
};

struct PartyBoxConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PartyBoxConfigT NativeTableType;
  typedef PartyBoxConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PARTYBOXCONFIGS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::PartyBoxConfigRow>> *PartyBoxConfigs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::PartyBoxConfigRow>> *>(VT_PARTYBOXCONFIGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PARTYBOXCONFIGS) &&
           verifier.VerifyVector(PartyBoxConfigs()) &&
           verifier.VerifyVectorOfTables(PartyBoxConfigs()) &&
           verifier.EndTable();
  }
  PartyBoxConfigT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PartyBoxConfigT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<PartyBoxConfig> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PartyBoxConfigT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PartyBoxConfigBuilder {
  typedef PartyBoxConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_PartyBoxConfigs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::PartyBoxConfigRow>>> PartyBoxConfigs) {
    fbb_.AddOffset(PartyBoxConfig::VT_PARTYBOXCONFIGS, PartyBoxConfigs);
  }
  explicit PartyBoxConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PartyBoxConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PartyBoxConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PartyBoxConfig> CreatePartyBoxConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::PartyBoxConfigRow>>> PartyBoxConfigs = 0) {
  PartyBoxConfigBuilder builder_(_fbb);
  builder_.add_PartyBoxConfigs(PartyBoxConfigs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PartyBoxConfig> CreatePartyBoxConfigDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::PartyBoxConfigRow>> *PartyBoxConfigs = nullptr) {
  auto PartyBoxConfigs__ = PartyBoxConfigs ? _fbb.CreateVector<::flatbuffers::Offset<fb::PartyBoxConfigRow>>(*PartyBoxConfigs) : 0;
  return fb::CreatePartyBoxConfig(
      _fbb,
      PartyBoxConfigs__);
}

::flatbuffers::Offset<PartyBoxConfig> CreatePartyBoxConfig(::flatbuffers::FlatBufferBuilder &_fbb, const PartyBoxConfigT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PartyBoxConfigRowT : public ::flatbuffers::NativeTable {
  typedef PartyBoxConfigRow TableType;
  int32_t Id = 0;
  std::vector<fb::PlaceableTag> RandomTagList{};
  std::vector<std::unique_ptr<fb::tuple_int32_int32T>> StarWeights{};
  std::vector<int32_t> AdditionPlaceableList{};
  PartyBoxConfigRowT() = default;
  PartyBoxConfigRowT(const PartyBoxConfigRowT &o);
  PartyBoxConfigRowT(PartyBoxConfigRowT&&) FLATBUFFERS_NOEXCEPT = default;
  PartyBoxConfigRowT &operator=(PartyBoxConfigRowT o) FLATBUFFERS_NOEXCEPT;
};

struct PartyBoxConfigRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PartyBoxConfigRowT NativeTableType;
  typedef PartyBoxConfigRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_RANDOMTAGLIST = 6,
    VT_STARWEIGHTS = 8,
    VT_ADDITIONPLACEABLELIST = 10
  };
  int32_t Id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::Vector<int32_t> *RandomTagList() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_RANDOMTAGLIST);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32>> *StarWeights() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32>> *>(VT_STARWEIGHTS);
  }
  const ::flatbuffers::Vector<int32_t> *AdditionPlaceableList() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_ADDITIONPLACEABLELIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_RANDOMTAGLIST) &&
           verifier.VerifyVector(RandomTagList()) &&
           VerifyOffset(verifier, VT_STARWEIGHTS) &&
           verifier.VerifyVector(StarWeights()) &&
           verifier.VerifyVectorOfTables(StarWeights()) &&
           VerifyOffset(verifier, VT_ADDITIONPLACEABLELIST) &&
           verifier.VerifyVector(AdditionPlaceableList()) &&
           verifier.EndTable();
  }
  PartyBoxConfigRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PartyBoxConfigRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<PartyBoxConfigRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PartyBoxConfigRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PartyBoxConfigRowBuilder {
  typedef PartyBoxConfigRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(int32_t Id) {
    fbb_.AddElement<int32_t>(PartyBoxConfigRow::VT_ID, Id, 0);
  }
  void add_RandomTagList(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> RandomTagList) {
    fbb_.AddOffset(PartyBoxConfigRow::VT_RANDOMTAGLIST, RandomTagList);
  }
  void add_StarWeights(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32>>> StarWeights) {
    fbb_.AddOffset(PartyBoxConfigRow::VT_STARWEIGHTS, StarWeights);
  }
  void add_AdditionPlaceableList(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> AdditionPlaceableList) {
    fbb_.AddOffset(PartyBoxConfigRow::VT_ADDITIONPLACEABLELIST, AdditionPlaceableList);
  }
  explicit PartyBoxConfigRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PartyBoxConfigRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PartyBoxConfigRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PartyBoxConfigRow> CreatePartyBoxConfigRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> RandomTagList = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32>>> StarWeights = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> AdditionPlaceableList = 0) {
  PartyBoxConfigRowBuilder builder_(_fbb);
  builder_.add_AdditionPlaceableList(AdditionPlaceableList);
  builder_.add_StarWeights(StarWeights);
  builder_.add_RandomTagList(RandomTagList);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PartyBoxConfigRow> CreatePartyBoxConfigRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Id = 0,
    const std::vector<int32_t> *RandomTagList = nullptr,
    const std::vector<::flatbuffers::Offset<fb::tuple_int32_int32>> *StarWeights = nullptr,
    const std::vector<int32_t> *AdditionPlaceableList = nullptr) {
  auto RandomTagList__ = RandomTagList ? _fbb.CreateVector<int32_t>(*RandomTagList) : 0;
  auto StarWeights__ = StarWeights ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_int32>>(*StarWeights) : 0;
  auto AdditionPlaceableList__ = AdditionPlaceableList ? _fbb.CreateVector<int32_t>(*AdditionPlaceableList) : 0;
  return fb::CreatePartyBoxConfigRow(
      _fbb,
      Id,
      RandomTagList__,
      StarWeights__,
      AdditionPlaceableList__);
}

::flatbuffers::Offset<PartyBoxConfigRow> CreatePartyBoxConfigRow(::flatbuffers::FlatBufferBuilder &_fbb, const PartyBoxConfigRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline PartyBoxConfigT::PartyBoxConfigT(const PartyBoxConfigT &o) {
  PartyBoxConfigs.reserve(o.PartyBoxConfigs.size());
  for (const auto &PartyBoxConfigs_ : o.PartyBoxConfigs) { PartyBoxConfigs.emplace_back((PartyBoxConfigs_) ? new fb::PartyBoxConfigRowT(*PartyBoxConfigs_) : nullptr); }
}

inline PartyBoxConfigT &PartyBoxConfigT::operator=(PartyBoxConfigT o) FLATBUFFERS_NOEXCEPT {
  std::swap(PartyBoxConfigs, o.PartyBoxConfigs);
  return *this;
}

inline PartyBoxConfigT *PartyBoxConfig::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PartyBoxConfigT>(new PartyBoxConfigT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PartyBoxConfig::UnPackTo(PartyBoxConfigT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = PartyBoxConfigs(); if (_e) { _o->PartyBoxConfigs.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->PartyBoxConfigs[_i]) { _e->Get(_i)->UnPackTo(_o->PartyBoxConfigs[_i].get(), _resolver); } else { _o->PartyBoxConfigs[_i] = std::unique_ptr<fb::PartyBoxConfigRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->PartyBoxConfigs.resize(0); } }
}

inline ::flatbuffers::Offset<PartyBoxConfig> PartyBoxConfig::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PartyBoxConfigT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePartyBoxConfig(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<PartyBoxConfig> CreatePartyBoxConfig(::flatbuffers::FlatBufferBuilder &_fbb, const PartyBoxConfigT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PartyBoxConfigT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _PartyBoxConfigs = _o->PartyBoxConfigs.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::PartyBoxConfigRow>> (_o->PartyBoxConfigs.size(), [](size_t i, _VectorArgs *__va) { return CreatePartyBoxConfigRow(*__va->__fbb, __va->__o->PartyBoxConfigs[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreatePartyBoxConfig(
      _fbb,
      _PartyBoxConfigs);
}

inline PartyBoxConfigRowT::PartyBoxConfigRowT(const PartyBoxConfigRowT &o)
      : Id(o.Id),
        RandomTagList(o.RandomTagList),
        AdditionPlaceableList(o.AdditionPlaceableList) {
  StarWeights.reserve(o.StarWeights.size());
  for (const auto &StarWeights_ : o.StarWeights) { StarWeights.emplace_back((StarWeights_) ? new fb::tuple_int32_int32T(*StarWeights_) : nullptr); }
}

inline PartyBoxConfigRowT &PartyBoxConfigRowT::operator=(PartyBoxConfigRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(RandomTagList, o.RandomTagList);
  std::swap(StarWeights, o.StarWeights);
  std::swap(AdditionPlaceableList, o.AdditionPlaceableList);
  return *this;
}

inline PartyBoxConfigRowT *PartyBoxConfigRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PartyBoxConfigRowT>(new PartyBoxConfigRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void PartyBoxConfigRow::UnPackTo(PartyBoxConfigRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = RandomTagList(); if (_e) { _o->RandomTagList.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->RandomTagList[_i] = static_cast<fb::PlaceableTag>(_e->Get(_i)); } } else { _o->RandomTagList.resize(0); } }
  { auto _e = StarWeights(); if (_e) { _o->StarWeights.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->StarWeights[_i]) { _e->Get(_i)->UnPackTo(_o->StarWeights[_i].get(), _resolver); } else { _o->StarWeights[_i] = std::unique_ptr<fb::tuple_int32_int32T>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->StarWeights.resize(0); } }
  { auto _e = AdditionPlaceableList(); if (_e) { _o->AdditionPlaceableList.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->AdditionPlaceableList[_i] = _e->Get(_i); } } else { _o->AdditionPlaceableList.resize(0); } }
}

inline ::flatbuffers::Offset<PartyBoxConfigRow> PartyBoxConfigRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PartyBoxConfigRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePartyBoxConfigRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<PartyBoxConfigRow> CreatePartyBoxConfigRow(::flatbuffers::FlatBufferBuilder &_fbb, const PartyBoxConfigRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PartyBoxConfigRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _RandomTagList = _o->RandomTagList.size() ? _fbb.CreateVectorScalarCast<int32_t>(::flatbuffers::data(_o->RandomTagList), _o->RandomTagList.size()) : 0;
  auto _StarWeights = _o->StarWeights.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_int32>> (_o->StarWeights.size(), [](size_t i, _VectorArgs *__va) { return Createtuple_int32_int32(*__va->__fbb, __va->__o->StarWeights[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _AdditionPlaceableList = _o->AdditionPlaceableList.size() ? _fbb.CreateVector(_o->AdditionPlaceableList) : 0;
  return fb::CreatePartyBoxConfigRow(
      _fbb,
      _Id,
      _RandomTagList,
      _StarWeights,
      _AdditionPlaceableList);
}

inline const fb::PartyBoxConfig *GetPartyBoxConfig(const void *buf) {
  return ::flatbuffers::GetRoot<fb::PartyBoxConfig>(buf);
}

inline const fb::PartyBoxConfig *GetSizePrefixedPartyBoxConfig(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::PartyBoxConfig>(buf);
}

inline bool VerifyPartyBoxConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::PartyBoxConfig>(nullptr);
}

inline bool VerifySizePrefixedPartyBoxConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::PartyBoxConfig>(nullptr);
}

inline void FinishPartyBoxConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::PartyBoxConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPartyBoxConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::PartyBoxConfig> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::PartyBoxConfigT> UnPackPartyBoxConfig(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::PartyBoxConfigT>(GetPartyBoxConfig(buf)->UnPack(res));
}

inline std::unique_ptr<fb::PartyBoxConfigT> UnPackSizePrefixedPartyBoxConfig(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::PartyBoxConfigT>(GetSizePrefixedPartyBoxConfig(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_PARTYBOXCONFIG_FB_H_
