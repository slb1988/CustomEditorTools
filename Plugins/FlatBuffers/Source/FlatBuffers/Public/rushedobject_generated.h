// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RUSHEDOBJECT_FB_H_
#define FLATBUFFERS_GENERATED_RUSHEDOBJECT_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct RushedObject;
struct RushedObjectBuilder;
struct RushedObjectT;

struct RushedObjectRow;
struct RushedObjectRowBuilder;
struct RushedObjectRowT;

struct RushedObjectT : public ::flatbuffers::NativeTable {
  typedef RushedObject TableType;
  std::vector<std::unique_ptr<fb::RushedObjectRowT>> RushedObjects{};
  RushedObjectT() = default;
  RushedObjectT(const RushedObjectT &o);
  RushedObjectT(RushedObjectT&&) FLATBUFFERS_NOEXCEPT = default;
  RushedObjectT &operator=(RushedObjectT o) FLATBUFFERS_NOEXCEPT;
};

struct RushedObject FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RushedObjectT NativeTableType;
  typedef RushedObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RUSHEDOBJECTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::RushedObjectRow>> *RushedObjects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::RushedObjectRow>> *>(VT_RUSHEDOBJECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RUSHEDOBJECTS) &&
           verifier.VerifyVector(RushedObjects()) &&
           verifier.VerifyVectorOfTables(RushedObjects()) &&
           verifier.EndTable();
  }
  RushedObjectT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RushedObjectT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<RushedObject> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RushedObjectT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RushedObjectBuilder {
  typedef RushedObject Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_RushedObjects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::RushedObjectRow>>> RushedObjects) {
    fbb_.AddOffset(RushedObject::VT_RUSHEDOBJECTS, RushedObjects);
  }
  explicit RushedObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RushedObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RushedObject>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RushedObject> CreateRushedObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::RushedObjectRow>>> RushedObjects = 0) {
  RushedObjectBuilder builder_(_fbb);
  builder_.add_RushedObjects(RushedObjects);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RushedObject> CreateRushedObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::RushedObjectRow>> *RushedObjects = nullptr) {
  auto RushedObjects__ = RushedObjects ? _fbb.CreateVector<::flatbuffers::Offset<fb::RushedObjectRow>>(*RushedObjects) : 0;
  return fb::CreateRushedObject(
      _fbb,
      RushedObjects__);
}

::flatbuffers::Offset<RushedObject> CreateRushedObject(::flatbuffers::FlatBufferBuilder &_fbb, const RushedObjectT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RushedObjectRowT : public ::flatbuffers::NativeTable {
  typedef RushedObjectRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  bool InitCreate = false;
  bool BelongToWorld = false;
  uint32_t TotalHP = 0;
  std::unique_ptr<fb::tuple_float32_float32_float32T> CenterPosition{};
  std::unique_ptr<fb::tuple_float32_float32_float32_float32T> Rotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> Scale{};
  std::string PrefabPath{};
  uint32_t RewardNpcId = 0;
  uint32_t RewardNpcDropRadius = 0;
  RushedObjectRowT() = default;
  RushedObjectRowT(const RushedObjectRowT &o);
  RushedObjectRowT(RushedObjectRowT&&) FLATBUFFERS_NOEXCEPT = default;
  RushedObjectRowT &operator=(RushedObjectRowT o) FLATBUFFERS_NOEXCEPT;
};

struct RushedObjectRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RushedObjectRowT NativeTableType;
  typedef RushedObjectRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_INITCREATE = 8,
    VT_BELONGTOWORLD = 10,
    VT_TOTALHP = 12,
    VT_CENTERPOSITION = 14,
    VT_ROTATION = 16,
    VT_SCALE = 18,
    VT_PREFABPATH = 20,
    VT_REWARDNPCID = 22,
    VT_REWARDNPCDROPRADIUS = 24
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  bool InitCreate() const {
    return GetField<uint8_t>(VT_INITCREATE, 0) != 0;
  }
  bool BelongToWorld() const {
    return GetField<uint8_t>(VT_BELONGTOWORLD, 0) != 0;
  }
  uint32_t TotalHP() const {
    return GetField<uint32_t>(VT_TOTALHP, 0);
  }
  const fb::tuple_float32_float32_float32 *CenterPosition() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_CENTERPOSITION);
  }
  const fb::tuple_float32_float32_float32_float32 *Rotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32_float32 *>(VT_ROTATION);
  }
  const fb::tuple_float32_float32_float32 *Scale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_SCALE);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  uint32_t RewardNpcId() const {
    return GetField<uint32_t>(VT_REWARDNPCID, 0);
  }
  uint32_t RewardNpcDropRadius() const {
    return GetField<uint32_t>(VT_REWARDNPCDROPRADIUS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyField<uint8_t>(verifier, VT_INITCREATE, 1) &&
           VerifyField<uint8_t>(verifier, VT_BELONGTOWORLD, 1) &&
           VerifyField<uint32_t>(verifier, VT_TOTALHP, 4) &&
           VerifyOffset(verifier, VT_CENTERPOSITION) &&
           verifier.VerifyTable(CenterPosition()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(Rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(Scale()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           VerifyField<uint32_t>(verifier, VT_REWARDNPCID, 4) &&
           VerifyField<uint32_t>(verifier, VT_REWARDNPCDROPRADIUS, 4) &&
           verifier.EndTable();
  }
  RushedObjectRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RushedObjectRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<RushedObjectRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RushedObjectRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RushedObjectRowBuilder {
  typedef RushedObjectRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(RushedObjectRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(RushedObjectRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_InitCreate(bool InitCreate) {
    fbb_.AddElement<uint8_t>(RushedObjectRow::VT_INITCREATE, static_cast<uint8_t>(InitCreate), 0);
  }
  void add_BelongToWorld(bool BelongToWorld) {
    fbb_.AddElement<uint8_t>(RushedObjectRow::VT_BELONGTOWORLD, static_cast<uint8_t>(BelongToWorld), 0);
  }
  void add_TotalHP(uint32_t TotalHP) {
    fbb_.AddElement<uint32_t>(RushedObjectRow::VT_TOTALHP, TotalHP, 0);
  }
  void add_CenterPosition(::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition) {
    fbb_.AddOffset(RushedObjectRow::VT_CENTERPOSITION, CenterPosition);
  }
  void add_Rotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation) {
    fbb_.AddOffset(RushedObjectRow::VT_ROTATION, Rotation);
  }
  void add_Scale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale) {
    fbb_.AddOffset(RushedObjectRow::VT_SCALE, Scale);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(RushedObjectRow::VT_PREFABPATH, PrefabPath);
  }
  void add_RewardNpcId(uint32_t RewardNpcId) {
    fbb_.AddElement<uint32_t>(RushedObjectRow::VT_REWARDNPCID, RewardNpcId, 0);
  }
  void add_RewardNpcDropRadius(uint32_t RewardNpcDropRadius) {
    fbb_.AddElement<uint32_t>(RushedObjectRow::VT_REWARDNPCDROPRADIUS, RewardNpcDropRadius, 0);
  }
  explicit RushedObjectRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RushedObjectRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RushedObjectRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RushedObjectRow> CreateRushedObjectRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    bool InitCreate = false,
    bool BelongToWorld = false,
    uint32_t TotalHP = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0,
    uint32_t RewardNpcId = 0,
    uint32_t RewardNpcDropRadius = 0) {
  RushedObjectRowBuilder builder_(_fbb);
  builder_.add_RewardNpcDropRadius(RewardNpcDropRadius);
  builder_.add_RewardNpcId(RewardNpcId);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_Scale(Scale);
  builder_.add_Rotation(Rotation);
  builder_.add_CenterPosition(CenterPosition);
  builder_.add_TotalHP(TotalHP);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  builder_.add_BelongToWorld(BelongToWorld);
  builder_.add_InitCreate(InitCreate);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RushedObjectRow> CreateRushedObjectRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    bool InitCreate = false,
    bool BelongToWorld = false,
    uint32_t TotalHP = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    const char *PrefabPath = nullptr,
    uint32_t RewardNpcId = 0,
    uint32_t RewardNpcDropRadius = 0) {
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateRushedObjectRow(
      _fbb,
      Id,
      WorldTypeId,
      InitCreate,
      BelongToWorld,
      TotalHP,
      CenterPosition,
      Rotation,
      Scale,
      PrefabPath__,
      RewardNpcId,
      RewardNpcDropRadius);
}

::flatbuffers::Offset<RushedObjectRow> CreateRushedObjectRow(::flatbuffers::FlatBufferBuilder &_fbb, const RushedObjectRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline RushedObjectT::RushedObjectT(const RushedObjectT &o) {
  RushedObjects.reserve(o.RushedObjects.size());
  for (const auto &RushedObjects_ : o.RushedObjects) { RushedObjects.emplace_back((RushedObjects_) ? new fb::RushedObjectRowT(*RushedObjects_) : nullptr); }
}

inline RushedObjectT &RushedObjectT::operator=(RushedObjectT o) FLATBUFFERS_NOEXCEPT {
  std::swap(RushedObjects, o.RushedObjects);
  return *this;
}

inline RushedObjectT *RushedObject::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RushedObjectT>(new RushedObjectT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RushedObject::UnPackTo(RushedObjectT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = RushedObjects(); if (_e) { _o->RushedObjects.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->RushedObjects[_i]) { _e->Get(_i)->UnPackTo(_o->RushedObjects[_i].get(), _resolver); } else { _o->RushedObjects[_i] = std::unique_ptr<fb::RushedObjectRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->RushedObjects.resize(0); } }
}

inline ::flatbuffers::Offset<RushedObject> RushedObject::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RushedObjectT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRushedObject(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<RushedObject> CreateRushedObject(::flatbuffers::FlatBufferBuilder &_fbb, const RushedObjectT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RushedObjectT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _RushedObjects = _o->RushedObjects.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::RushedObjectRow>> (_o->RushedObjects.size(), [](size_t i, _VectorArgs *__va) { return CreateRushedObjectRow(*__va->__fbb, __va->__o->RushedObjects[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateRushedObject(
      _fbb,
      _RushedObjects);
}

inline RushedObjectRowT::RushedObjectRowT(const RushedObjectRowT &o)
      : Id(o.Id),
        WorldTypeId(o.WorldTypeId),
        InitCreate(o.InitCreate),
        BelongToWorld(o.BelongToWorld),
        TotalHP(o.TotalHP),
        CenterPosition((o.CenterPosition) ? new fb::tuple_float32_float32_float32T(*o.CenterPosition) : nullptr),
        Rotation((o.Rotation) ? new fb::tuple_float32_float32_float32_float32T(*o.Rotation) : nullptr),
        Scale((o.Scale) ? new fb::tuple_float32_float32_float32T(*o.Scale) : nullptr),
        PrefabPath(o.PrefabPath),
        RewardNpcId(o.RewardNpcId),
        RewardNpcDropRadius(o.RewardNpcDropRadius) {
}

inline RushedObjectRowT &RushedObjectRowT::operator=(RushedObjectRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldTypeId, o.WorldTypeId);
  std::swap(InitCreate, o.InitCreate);
  std::swap(BelongToWorld, o.BelongToWorld);
  std::swap(TotalHP, o.TotalHP);
  std::swap(CenterPosition, o.CenterPosition);
  std::swap(Rotation, o.Rotation);
  std::swap(Scale, o.Scale);
  std::swap(PrefabPath, o.PrefabPath);
  std::swap(RewardNpcId, o.RewardNpcId);
  std::swap(RewardNpcDropRadius, o.RewardNpcDropRadius);
  return *this;
}

inline RushedObjectRowT *RushedObjectRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RushedObjectRowT>(new RushedObjectRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RushedObjectRow::UnPackTo(RushedObjectRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = InitCreate(); _o->InitCreate = _e; }
  { auto _e = BelongToWorld(); _o->BelongToWorld = _e; }
  { auto _e = TotalHP(); _o->TotalHP = _e; }
  { auto _e = CenterPosition(); if (_e) { if(_o->CenterPosition) { _e->UnPackTo(_o->CenterPosition.get(), _resolver); } else { _o->CenterPosition = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->CenterPosition) { _o->CenterPosition.reset(); } }
  { auto _e = Rotation(); if (_e) { if(_o->Rotation) { _e->UnPackTo(_o->Rotation.get(), _resolver); } else { _o->Rotation = std::unique_ptr<fb::tuple_float32_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Rotation) { _o->Rotation.reset(); } }
  { auto _e = Scale(); if (_e) { if(_o->Scale) { _e->UnPackTo(_o->Scale.get(), _resolver); } else { _o->Scale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Scale) { _o->Scale.reset(); } }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
  { auto _e = RewardNpcId(); _o->RewardNpcId = _e; }
  { auto _e = RewardNpcDropRadius(); _o->RewardNpcDropRadius = _e; }
}

inline ::flatbuffers::Offset<RushedObjectRow> RushedObjectRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RushedObjectRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRushedObjectRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<RushedObjectRow> CreateRushedObjectRow(::flatbuffers::FlatBufferBuilder &_fbb, const RushedObjectRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RushedObjectRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _InitCreate = _o->InitCreate;
  auto _BelongToWorld = _o->BelongToWorld;
  auto _TotalHP = _o->TotalHP;
  auto _CenterPosition = _o->CenterPosition ? Createtuple_float32_float32_float32(_fbb, _o->CenterPosition.get(), _rehasher) : 0;
  auto _Rotation = _o->Rotation ? Createtuple_float32_float32_float32_float32(_fbb, _o->Rotation.get(), _rehasher) : 0;
  auto _Scale = _o->Scale ? Createtuple_float32_float32_float32(_fbb, _o->Scale.get(), _rehasher) : 0;
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  auto _RewardNpcId = _o->RewardNpcId;
  auto _RewardNpcDropRadius = _o->RewardNpcDropRadius;
  return fb::CreateRushedObjectRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _InitCreate,
      _BelongToWorld,
      _TotalHP,
      _CenterPosition,
      _Rotation,
      _Scale,
      _PrefabPath,
      _RewardNpcId,
      _RewardNpcDropRadius);
}

inline const fb::RushedObject *GetRushedObject(const void *buf) {
  return ::flatbuffers::GetRoot<fb::RushedObject>(buf);
}

inline const fb::RushedObject *GetSizePrefixedRushedObject(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::RushedObject>(buf);
}

inline bool VerifyRushedObjectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::RushedObject>(nullptr);
}

inline bool VerifySizePrefixedRushedObjectBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::RushedObject>(nullptr);
}

inline void FinishRushedObjectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::RushedObject> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRushedObjectBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::RushedObject> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::RushedObjectT> UnPackRushedObject(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::RushedObjectT>(GetRushedObject(buf)->UnPack(res));
}

inline std::unique_ptr<fb::RushedObjectT> UnPackSizePrefixedRushedObject(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::RushedObjectT>(GetSizePrefixedRushedObject(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_RUSHEDOBJECT_FB_H_
