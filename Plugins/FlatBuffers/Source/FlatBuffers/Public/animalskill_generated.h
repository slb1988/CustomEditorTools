// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ANIMALSKILL_FB_H_
#define FLATBUFFERS_GENERATED_ANIMALSKILL_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct AnimalSkill;
struct AnimalSkillBuilder;
struct AnimalSkillT;

struct AnimalSkillRow;
struct AnimalSkillRowBuilder;
struct AnimalSkillRowT;

struct AnimalSkillT : public ::flatbuffers::NativeTable {
  typedef AnimalSkill TableType;
  std::vector<std::unique_ptr<fb::AnimalSkillRowT>> AnimalSkills{};
  AnimalSkillT() = default;
  AnimalSkillT(const AnimalSkillT &o);
  AnimalSkillT(AnimalSkillT&&) FLATBUFFERS_NOEXCEPT = default;
  AnimalSkillT &operator=(AnimalSkillT o) FLATBUFFERS_NOEXCEPT;
};

struct AnimalSkill FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AnimalSkillT NativeTableType;
  typedef AnimalSkillBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANIMALSKILLS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AnimalSkillRow>> *AnimalSkills() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AnimalSkillRow>> *>(VT_ANIMALSKILLS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ANIMALSKILLS) &&
           verifier.VerifyVector(AnimalSkills()) &&
           verifier.VerifyVectorOfTables(AnimalSkills()) &&
           verifier.EndTable();
  }
  AnimalSkillT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AnimalSkillT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AnimalSkill> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalSkillT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AnimalSkillBuilder {
  typedef AnimalSkill Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_AnimalSkills(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AnimalSkillRow>>> AnimalSkills) {
    fbb_.AddOffset(AnimalSkill::VT_ANIMALSKILLS, AnimalSkills);
  }
  explicit AnimalSkillBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AnimalSkill> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AnimalSkill>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AnimalSkill> CreateAnimalSkill(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AnimalSkillRow>>> AnimalSkills = 0) {
  AnimalSkillBuilder builder_(_fbb);
  builder_.add_AnimalSkills(AnimalSkills);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AnimalSkill> CreateAnimalSkillDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::AnimalSkillRow>> *AnimalSkills = nullptr) {
  auto AnimalSkills__ = AnimalSkills ? _fbb.CreateVector<::flatbuffers::Offset<fb::AnimalSkillRow>>(*AnimalSkills) : 0;
  return fb::CreateAnimalSkill(
      _fbb,
      AnimalSkills__);
}

::flatbuffers::Offset<AnimalSkill> CreateAnimalSkill(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalSkillT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AnimalSkillRowT : public ::flatbuffers::NativeTable {
  typedef AnimalSkillRow TableType;
  uint32_t Id = 0;
  float ChaseRange = 0.0f;
  float AttackRange = 0.0f;
  std::vector<std::string> SkillEffects{};
};

struct AnimalSkillRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AnimalSkillRowT NativeTableType;
  typedef AnimalSkillRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CHASERANGE = 6,
    VT_ATTACKRANGE = 8,
    VT_SKILLEFFECTS = 10
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  float ChaseRange() const {
    return GetField<float>(VT_CHASERANGE, 0.0f);
  }
  float AttackRange() const {
    return GetField<float>(VT_ATTACKRANGE, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *SkillEffects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SKILLEFFECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<float>(verifier, VT_CHASERANGE, 4) &&
           VerifyField<float>(verifier, VT_ATTACKRANGE, 4) &&
           VerifyOffset(verifier, VT_SKILLEFFECTS) &&
           verifier.VerifyVector(SkillEffects()) &&
           verifier.VerifyVectorOfStrings(SkillEffects()) &&
           verifier.EndTable();
  }
  AnimalSkillRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AnimalSkillRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AnimalSkillRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalSkillRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AnimalSkillRowBuilder {
  typedef AnimalSkillRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(AnimalSkillRow::VT_ID, Id, 0);
  }
  void add_ChaseRange(float ChaseRange) {
    fbb_.AddElement<float>(AnimalSkillRow::VT_CHASERANGE, ChaseRange, 0.0f);
  }
  void add_AttackRange(float AttackRange) {
    fbb_.AddElement<float>(AnimalSkillRow::VT_ATTACKRANGE, AttackRange, 0.0f);
  }
  void add_SkillEffects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> SkillEffects) {
    fbb_.AddOffset(AnimalSkillRow::VT_SKILLEFFECTS, SkillEffects);
  }
  explicit AnimalSkillRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AnimalSkillRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AnimalSkillRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AnimalSkillRow> CreateAnimalSkillRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    float ChaseRange = 0.0f,
    float AttackRange = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> SkillEffects = 0) {
  AnimalSkillRowBuilder builder_(_fbb);
  builder_.add_SkillEffects(SkillEffects);
  builder_.add_AttackRange(AttackRange);
  builder_.add_ChaseRange(ChaseRange);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AnimalSkillRow> CreateAnimalSkillRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    float ChaseRange = 0.0f,
    float AttackRange = 0.0f,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *SkillEffects = nullptr) {
  auto SkillEffects__ = SkillEffects ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*SkillEffects) : 0;
  return fb::CreateAnimalSkillRow(
      _fbb,
      Id,
      ChaseRange,
      AttackRange,
      SkillEffects__);
}

::flatbuffers::Offset<AnimalSkillRow> CreateAnimalSkillRow(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalSkillRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AnimalSkillT::AnimalSkillT(const AnimalSkillT &o) {
  AnimalSkills.reserve(o.AnimalSkills.size());
  for (const auto &AnimalSkills_ : o.AnimalSkills) { AnimalSkills.emplace_back((AnimalSkills_) ? new fb::AnimalSkillRowT(*AnimalSkills_) : nullptr); }
}

inline AnimalSkillT &AnimalSkillT::operator=(AnimalSkillT o) FLATBUFFERS_NOEXCEPT {
  std::swap(AnimalSkills, o.AnimalSkills);
  return *this;
}

inline AnimalSkillT *AnimalSkill::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AnimalSkillT>(new AnimalSkillT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AnimalSkill::UnPackTo(AnimalSkillT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = AnimalSkills(); if (_e) { _o->AnimalSkills.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->AnimalSkills[_i]) { _e->Get(_i)->UnPackTo(_o->AnimalSkills[_i].get(), _resolver); } else { _o->AnimalSkills[_i] = std::unique_ptr<fb::AnimalSkillRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->AnimalSkills.resize(0); } }
}

inline ::flatbuffers::Offset<AnimalSkill> AnimalSkill::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalSkillT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAnimalSkill(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AnimalSkill> CreateAnimalSkill(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalSkillT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AnimalSkillT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _AnimalSkills = _o->AnimalSkills.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::AnimalSkillRow>> (_o->AnimalSkills.size(), [](size_t i, _VectorArgs *__va) { return CreateAnimalSkillRow(*__va->__fbb, __va->__o->AnimalSkills[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAnimalSkill(
      _fbb,
      _AnimalSkills);
}

inline AnimalSkillRowT *AnimalSkillRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AnimalSkillRowT>(new AnimalSkillRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AnimalSkillRow::UnPackTo(AnimalSkillRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = ChaseRange(); _o->ChaseRange = _e; }
  { auto _e = AttackRange(); _o->AttackRange = _e; }
  { auto _e = SkillEffects(); if (_e) { _o->SkillEffects.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->SkillEffects[_i] = _e->Get(_i)->str(); } } else { _o->SkillEffects.resize(0); } }
}

inline ::flatbuffers::Offset<AnimalSkillRow> AnimalSkillRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalSkillRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAnimalSkillRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AnimalSkillRow> CreateAnimalSkillRow(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalSkillRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AnimalSkillRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _ChaseRange = _o->ChaseRange;
  auto _AttackRange = _o->AttackRange;
  auto _SkillEffects = _o->SkillEffects.size() ? _fbb.CreateVectorOfStrings(_o->SkillEffects) : 0;
  return fb::CreateAnimalSkillRow(
      _fbb,
      _Id,
      _ChaseRange,
      _AttackRange,
      _SkillEffects);
}

inline const fb::AnimalSkill *GetAnimalSkill(const void *buf) {
  return ::flatbuffers::GetRoot<fb::AnimalSkill>(buf);
}

inline const fb::AnimalSkill *GetSizePrefixedAnimalSkill(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::AnimalSkill>(buf);
}

inline bool VerifyAnimalSkillBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::AnimalSkill>(nullptr);
}

inline bool VerifySizePrefixedAnimalSkillBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::AnimalSkill>(nullptr);
}

inline void FinishAnimalSkillBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AnimalSkill> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAnimalSkillBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AnimalSkill> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::AnimalSkillT> UnPackAnimalSkill(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AnimalSkillT>(GetAnimalSkill(buf)->UnPack(res));
}

inline std::unique_ptr<fb::AnimalSkillT> UnPackSizePrefixedAnimalSkill(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AnimalSkillT>(GetSizePrefixedAnimalSkill(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_ANIMALSKILL_FB_H_
