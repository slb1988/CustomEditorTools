// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TASKCONDITIONGROUP_FB_H_
#define FLATBUFFERS_GENERATED_TASKCONDITIONGROUP_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct TaskConditionGroup;
struct TaskConditionGroupBuilder;
struct TaskConditionGroupT;

struct TaskConditionGroupRow;
struct TaskConditionGroupRowBuilder;
struct TaskConditionGroupRowT;

struct TaskConditionGroupT : public ::flatbuffers::NativeTable {
  typedef TaskConditionGroup TableType;
  std::vector<std::unique_ptr<fb::TaskConditionGroupRowT>> TaskConditionGroups{};
  TaskConditionGroupT() = default;
  TaskConditionGroupT(const TaskConditionGroupT &o);
  TaskConditionGroupT(TaskConditionGroupT&&) FLATBUFFERS_NOEXCEPT = default;
  TaskConditionGroupT &operator=(TaskConditionGroupT o) FLATBUFFERS_NOEXCEPT;
};

struct TaskConditionGroup FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TaskConditionGroupT NativeTableType;
  typedef TaskConditionGroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TASKCONDITIONGROUPS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::TaskConditionGroupRow>> *TaskConditionGroups() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::TaskConditionGroupRow>> *>(VT_TASKCONDITIONGROUPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TASKCONDITIONGROUPS) &&
           verifier.VerifyVector(TaskConditionGroups()) &&
           verifier.VerifyVectorOfTables(TaskConditionGroups()) &&
           verifier.EndTable();
  }
  TaskConditionGroupT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TaskConditionGroupT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<TaskConditionGroup> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TaskConditionGroupT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TaskConditionGroupBuilder {
  typedef TaskConditionGroup Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_TaskConditionGroups(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::TaskConditionGroupRow>>> TaskConditionGroups) {
    fbb_.AddOffset(TaskConditionGroup::VT_TASKCONDITIONGROUPS, TaskConditionGroups);
  }
  explicit TaskConditionGroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TaskConditionGroup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TaskConditionGroup>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TaskConditionGroup> CreateTaskConditionGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::TaskConditionGroupRow>>> TaskConditionGroups = 0) {
  TaskConditionGroupBuilder builder_(_fbb);
  builder_.add_TaskConditionGroups(TaskConditionGroups);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TaskConditionGroup> CreateTaskConditionGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::TaskConditionGroupRow>> *TaskConditionGroups = nullptr) {
  auto TaskConditionGroups__ = TaskConditionGroups ? _fbb.CreateVectorOfSortedTables<fb::TaskConditionGroupRow>(TaskConditionGroups) : 0;
  return fb::CreateTaskConditionGroup(
      _fbb,
      TaskConditionGroups__);
}

::flatbuffers::Offset<TaskConditionGroup> CreateTaskConditionGroup(::flatbuffers::FlatBufferBuilder &_fbb, const TaskConditionGroupT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TaskConditionGroupRowT : public ::flatbuffers::NativeTable {
  typedef TaskConditionGroupRow TableType;
  uint32_t Id = 0;
  fb::ConditionGroupType Type = fb::ConditionGroupType_NONE;
  std::vector<uint32_t> Conditions{};
};

struct TaskConditionGroupRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TaskConditionGroupRowT NativeTableType;
  typedef TaskConditionGroupRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_CONDITIONS = 8
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const TaskConditionGroupRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  fb::ConditionGroupType Type() const {
    return static_cast<fb::ConditionGroupType>(GetField<int32_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::Vector<uint32_t> *Conditions() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_CONDITIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_TYPE, 4) &&
           VerifyOffset(verifier, VT_CONDITIONS) &&
           verifier.VerifyVector(Conditions()) &&
           verifier.EndTable();
  }
  TaskConditionGroupRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TaskConditionGroupRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<TaskConditionGroupRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TaskConditionGroupRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TaskConditionGroupRowBuilder {
  typedef TaskConditionGroupRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(TaskConditionGroupRow::VT_ID, Id, 0);
  }
  void add_Type(fb::ConditionGroupType Type) {
    fbb_.AddElement<int32_t>(TaskConditionGroupRow::VT_TYPE, static_cast<int32_t>(Type), 0);
  }
  void add_Conditions(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> Conditions) {
    fbb_.AddOffset(TaskConditionGroupRow::VT_CONDITIONS, Conditions);
  }
  explicit TaskConditionGroupRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TaskConditionGroupRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TaskConditionGroupRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TaskConditionGroupRow> CreateTaskConditionGroupRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    fb::ConditionGroupType Type = fb::ConditionGroupType_NONE,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> Conditions = 0) {
  TaskConditionGroupRowBuilder builder_(_fbb);
  builder_.add_Conditions(Conditions);
  builder_.add_Type(Type);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TaskConditionGroupRow> CreateTaskConditionGroupRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    fb::ConditionGroupType Type = fb::ConditionGroupType_NONE,
    const std::vector<uint32_t> *Conditions = nullptr) {
  auto Conditions__ = Conditions ? _fbb.CreateVector<uint32_t>(*Conditions) : 0;
  return fb::CreateTaskConditionGroupRow(
      _fbb,
      Id,
      Type,
      Conditions__);
}

::flatbuffers::Offset<TaskConditionGroupRow> CreateTaskConditionGroupRow(::flatbuffers::FlatBufferBuilder &_fbb, const TaskConditionGroupRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TaskConditionGroupT::TaskConditionGroupT(const TaskConditionGroupT &o) {
  TaskConditionGroups.reserve(o.TaskConditionGroups.size());
  for (const auto &TaskConditionGroups_ : o.TaskConditionGroups) { TaskConditionGroups.emplace_back((TaskConditionGroups_) ? new fb::TaskConditionGroupRowT(*TaskConditionGroups_) : nullptr); }
}

inline TaskConditionGroupT &TaskConditionGroupT::operator=(TaskConditionGroupT o) FLATBUFFERS_NOEXCEPT {
  std::swap(TaskConditionGroups, o.TaskConditionGroups);
  return *this;
}

inline TaskConditionGroupT *TaskConditionGroup::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TaskConditionGroupT>(new TaskConditionGroupT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TaskConditionGroup::UnPackTo(TaskConditionGroupT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = TaskConditionGroups(); if (_e) { _o->TaskConditionGroups.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->TaskConditionGroups[_i]) { _e->Get(_i)->UnPackTo(_o->TaskConditionGroups[_i].get(), _resolver); } else { _o->TaskConditionGroups[_i] = std::unique_ptr<fb::TaskConditionGroupRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->TaskConditionGroups.resize(0); } }
}

inline ::flatbuffers::Offset<TaskConditionGroup> TaskConditionGroup::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TaskConditionGroupT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTaskConditionGroup(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<TaskConditionGroup> CreateTaskConditionGroup(::flatbuffers::FlatBufferBuilder &_fbb, const TaskConditionGroupT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TaskConditionGroupT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _TaskConditionGroups = _o->TaskConditionGroups.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::TaskConditionGroupRow>> (_o->TaskConditionGroups.size(), [](size_t i, _VectorArgs *__va) { return CreateTaskConditionGroupRow(*__va->__fbb, __va->__o->TaskConditionGroups[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateTaskConditionGroup(
      _fbb,
      _TaskConditionGroups);
}

inline TaskConditionGroupRowT *TaskConditionGroupRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TaskConditionGroupRowT>(new TaskConditionGroupRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TaskConditionGroupRow::UnPackTo(TaskConditionGroupRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Type(); _o->Type = _e; }
  { auto _e = Conditions(); if (_e) { _o->Conditions.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->Conditions[_i] = _e->Get(_i); } } else { _o->Conditions.resize(0); } }
}

inline ::flatbuffers::Offset<TaskConditionGroupRow> TaskConditionGroupRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TaskConditionGroupRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTaskConditionGroupRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<TaskConditionGroupRow> CreateTaskConditionGroupRow(::flatbuffers::FlatBufferBuilder &_fbb, const TaskConditionGroupRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TaskConditionGroupRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Type = _o->Type;
  auto _Conditions = _o->Conditions.size() ? _fbb.CreateVector(_o->Conditions) : 0;
  return fb::CreateTaskConditionGroupRow(
      _fbb,
      _Id,
      _Type,
      _Conditions);
}

inline const fb::TaskConditionGroup *GetTaskConditionGroup(const void *buf) {
  return ::flatbuffers::GetRoot<fb::TaskConditionGroup>(buf);
}

inline const fb::TaskConditionGroup *GetSizePrefixedTaskConditionGroup(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::TaskConditionGroup>(buf);
}

inline bool VerifyTaskConditionGroupBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::TaskConditionGroup>(nullptr);
}

inline bool VerifySizePrefixedTaskConditionGroupBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::TaskConditionGroup>(nullptr);
}

inline void FinishTaskConditionGroupBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::TaskConditionGroup> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTaskConditionGroupBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::TaskConditionGroup> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::TaskConditionGroupT> UnPackTaskConditionGroup(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::TaskConditionGroupT>(GetTaskConditionGroup(buf)->UnPack(res));
}

inline std::unique_ptr<fb::TaskConditionGroupT> UnPackSizePrefixedTaskConditionGroup(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::TaskConditionGroupT>(GetSizePrefixedTaskConditionGroup(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_TASKCONDITIONGROUP_FB_H_
