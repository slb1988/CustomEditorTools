// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AVATARSET_FB_H_
#define FLATBUFFERS_GENERATED_AVATARSET_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct AvatarSet;
struct AvatarSetBuilder;
struct AvatarSetT;

struct AvatarSetRow;
struct AvatarSetRowBuilder;
struct AvatarSetRowT;

struct AvatarSetT : public ::flatbuffers::NativeTable {
  typedef AvatarSet TableType;
  std::vector<std::unique_ptr<fb::AvatarSetRowT>> AvatarSets{};
  AvatarSetT() = default;
  AvatarSetT(const AvatarSetT &o);
  AvatarSetT(AvatarSetT&&) FLATBUFFERS_NOEXCEPT = default;
  AvatarSetT &operator=(AvatarSetT o) FLATBUFFERS_NOEXCEPT;
};

struct AvatarSet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AvatarSetT NativeTableType;
  typedef AvatarSetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AVATARSETS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSetRow>> *AvatarSets() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSetRow>> *>(VT_AVATARSETS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AVATARSETS) &&
           verifier.VerifyVector(AvatarSets()) &&
           verifier.VerifyVectorOfTables(AvatarSets()) &&
           verifier.EndTable();
  }
  AvatarSetT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AvatarSetT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AvatarSet> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSetT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AvatarSetBuilder {
  typedef AvatarSet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_AvatarSets(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSetRow>>> AvatarSets) {
    fbb_.AddOffset(AvatarSet::VT_AVATARSETS, AvatarSets);
  }
  explicit AvatarSetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AvatarSet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AvatarSet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AvatarSet> CreateAvatarSet(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSetRow>>> AvatarSets = 0) {
  AvatarSetBuilder builder_(_fbb);
  builder_.add_AvatarSets(AvatarSets);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AvatarSet> CreateAvatarSetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::AvatarSetRow>> *AvatarSets = nullptr) {
  auto AvatarSets__ = AvatarSets ? _fbb.CreateVectorOfSortedTables<fb::AvatarSetRow>(AvatarSets) : 0;
  return fb::CreateAvatarSet(
      _fbb,
      AvatarSets__);
}

::flatbuffers::Offset<AvatarSet> CreateAvatarSet(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSetT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AvatarSetRowT : public ::flatbuffers::NativeTable {
  typedef AvatarSetRow TableType;
  uint32_t Id = 0;
  fb::AvatarSkeletonType SkeletonType = fb::AvatarSkeletonType_GENERAL;
  std::string Desc{};
  std::string ModelPath{};
};

struct AvatarSetRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AvatarSetRowT NativeTableType;
  typedef AvatarSetRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_SKELETONTYPE = 6,
    VT_DESC = 8,
    VT_MODELPATH = 10
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const AvatarSetRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  fb::AvatarSkeletonType SkeletonType() const {
    return static_cast<fb::AvatarSkeletonType>(GetField<int32_t>(VT_SKELETONTYPE, 0));
  }
  const ::flatbuffers::String *Desc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESC);
  }
  const ::flatbuffers::String *ModelPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODELPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_SKELETONTYPE, 4) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(Desc()) &&
           VerifyOffset(verifier, VT_MODELPATH) &&
           verifier.VerifyString(ModelPath()) &&
           verifier.EndTable();
  }
  AvatarSetRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AvatarSetRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AvatarSetRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSetRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AvatarSetRowBuilder {
  typedef AvatarSetRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(AvatarSetRow::VT_ID, Id, 0);
  }
  void add_SkeletonType(fb::AvatarSkeletonType SkeletonType) {
    fbb_.AddElement<int32_t>(AvatarSetRow::VT_SKELETONTYPE, static_cast<int32_t>(SkeletonType), 0);
  }
  void add_Desc(::flatbuffers::Offset<::flatbuffers::String> Desc) {
    fbb_.AddOffset(AvatarSetRow::VT_DESC, Desc);
  }
  void add_ModelPath(::flatbuffers::Offset<::flatbuffers::String> ModelPath) {
    fbb_.AddOffset(AvatarSetRow::VT_MODELPATH, ModelPath);
  }
  explicit AvatarSetRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AvatarSetRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AvatarSetRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AvatarSetRow> CreateAvatarSetRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    fb::AvatarSkeletonType SkeletonType = fb::AvatarSkeletonType_GENERAL,
    ::flatbuffers::Offset<::flatbuffers::String> Desc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ModelPath = 0) {
  AvatarSetRowBuilder builder_(_fbb);
  builder_.add_ModelPath(ModelPath);
  builder_.add_Desc(Desc);
  builder_.add_SkeletonType(SkeletonType);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AvatarSetRow> CreateAvatarSetRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    fb::AvatarSkeletonType SkeletonType = fb::AvatarSkeletonType_GENERAL,
    const char *Desc = nullptr,
    const char *ModelPath = nullptr) {
  auto Desc__ = Desc ? _fbb.CreateString(Desc) : 0;
  auto ModelPath__ = ModelPath ? _fbb.CreateString(ModelPath) : 0;
  return fb::CreateAvatarSetRow(
      _fbb,
      Id,
      SkeletonType,
      Desc__,
      ModelPath__);
}

::flatbuffers::Offset<AvatarSetRow> CreateAvatarSetRow(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSetRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AvatarSetT::AvatarSetT(const AvatarSetT &o) {
  AvatarSets.reserve(o.AvatarSets.size());
  for (const auto &AvatarSets_ : o.AvatarSets) { AvatarSets.emplace_back((AvatarSets_) ? new fb::AvatarSetRowT(*AvatarSets_) : nullptr); }
}

inline AvatarSetT &AvatarSetT::operator=(AvatarSetT o) FLATBUFFERS_NOEXCEPT {
  std::swap(AvatarSets, o.AvatarSets);
  return *this;
}

inline AvatarSetT *AvatarSet::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AvatarSetT>(new AvatarSetT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AvatarSet::UnPackTo(AvatarSetT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = AvatarSets(); if (_e) { _o->AvatarSets.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->AvatarSets[_i]) { _e->Get(_i)->UnPackTo(_o->AvatarSets[_i].get(), _resolver); } else { _o->AvatarSets[_i] = std::unique_ptr<fb::AvatarSetRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->AvatarSets.resize(0); } }
}

inline ::flatbuffers::Offset<AvatarSet> AvatarSet::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSetT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAvatarSet(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AvatarSet> CreateAvatarSet(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSetT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AvatarSetT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _AvatarSets = _o->AvatarSets.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::AvatarSetRow>> (_o->AvatarSets.size(), [](size_t i, _VectorArgs *__va) { return CreateAvatarSetRow(*__va->__fbb, __va->__o->AvatarSets[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAvatarSet(
      _fbb,
      _AvatarSets);
}

inline AvatarSetRowT *AvatarSetRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AvatarSetRowT>(new AvatarSetRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AvatarSetRow::UnPackTo(AvatarSetRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = SkeletonType(); _o->SkeletonType = _e; }
  { auto _e = Desc(); if (_e) _o->Desc = _e->str(); }
  { auto _e = ModelPath(); if (_e) _o->ModelPath = _e->str(); }
}

inline ::flatbuffers::Offset<AvatarSetRow> AvatarSetRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSetRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAvatarSetRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AvatarSetRow> CreateAvatarSetRow(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSetRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AvatarSetRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _SkeletonType = _o->SkeletonType;
  auto _Desc = _o->Desc.empty() ? 0 : _fbb.CreateString(_o->Desc);
  auto _ModelPath = _o->ModelPath.empty() ? 0 : _fbb.CreateString(_o->ModelPath);
  return fb::CreateAvatarSetRow(
      _fbb,
      _Id,
      _SkeletonType,
      _Desc,
      _ModelPath);
}

inline const fb::AvatarSet *GetAvatarSet(const void *buf) {
  return ::flatbuffers::GetRoot<fb::AvatarSet>(buf);
}

inline const fb::AvatarSet *GetSizePrefixedAvatarSet(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::AvatarSet>(buf);
}

inline bool VerifyAvatarSetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::AvatarSet>(nullptr);
}

inline bool VerifySizePrefixedAvatarSetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::AvatarSet>(nullptr);
}

inline void FinishAvatarSetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AvatarSet> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAvatarSetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AvatarSet> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::AvatarSetT> UnPackAvatarSet(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AvatarSetT>(GetAvatarSet(buf)->UnPack(res));
}

inline std::unique_ptr<fb::AvatarSetT> UnPackSizePrefixedAvatarSet(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AvatarSetT>(GetSizePrefixedAvatarSet(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_AVATARSET_FB_H_
