// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ATTRACTPOINTDATA_FB_H_
#define FLATBUFFERS_GENERATED_ATTRACTPOINTDATA_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct AttractPointData;
struct AttractPointDataBuilder;
struct AttractPointDataT;

struct AttractPointDataRow;
struct AttractPointDataRowBuilder;
struct AttractPointDataRowT;

struct AttractPointDataT : public ::flatbuffers::NativeTable {
  typedef AttractPointData TableType;
  std::vector<std::unique_ptr<fb::AttractPointDataRowT>> AttractPointDatas{};
  AttractPointDataT() = default;
  AttractPointDataT(const AttractPointDataT &o);
  AttractPointDataT(AttractPointDataT&&) FLATBUFFERS_NOEXCEPT = default;
  AttractPointDataT &operator=(AttractPointDataT o) FLATBUFFERS_NOEXCEPT;
};

struct AttractPointData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AttractPointDataT NativeTableType;
  typedef AttractPointDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTRACTPOINTDATAS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AttractPointDataRow>> *AttractPointDatas() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AttractPointDataRow>> *>(VT_ATTRACTPOINTDATAS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ATTRACTPOINTDATAS) &&
           verifier.VerifyVector(AttractPointDatas()) &&
           verifier.VerifyVectorOfTables(AttractPointDatas()) &&
           verifier.EndTable();
  }
  AttractPointDataT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AttractPointDataT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AttractPointData> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AttractPointDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AttractPointDataBuilder {
  typedef AttractPointData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_AttractPointDatas(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AttractPointDataRow>>> AttractPointDatas) {
    fbb_.AddOffset(AttractPointData::VT_ATTRACTPOINTDATAS, AttractPointDatas);
  }
  explicit AttractPointDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AttractPointData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AttractPointData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AttractPointData> CreateAttractPointData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AttractPointDataRow>>> AttractPointDatas = 0) {
  AttractPointDataBuilder builder_(_fbb);
  builder_.add_AttractPointDatas(AttractPointDatas);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AttractPointData> CreateAttractPointDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::AttractPointDataRow>> *AttractPointDatas = nullptr) {
  auto AttractPointDatas__ = AttractPointDatas ? _fbb.CreateVector<::flatbuffers::Offset<fb::AttractPointDataRow>>(*AttractPointDatas) : 0;
  return fb::CreateAttractPointData(
      _fbb,
      AttractPointDatas__);
}

::flatbuffers::Offset<AttractPointData> CreateAttractPointData(::flatbuffers::FlatBufferBuilder &_fbb, const AttractPointDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AttractPointDataRowT : public ::flatbuffers::NativeTable {
  typedef AttractPointDataRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  std::string Splines{};
  std::string Colliders{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> CenterPosition{};
  std::unique_ptr<fb::tuple_float32_float32_float32_float32T> Rotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> Scale{};
  std::string PrefabPath{};
  AttractPointDataRowT() = default;
  AttractPointDataRowT(const AttractPointDataRowT &o);
  AttractPointDataRowT(AttractPointDataRowT&&) FLATBUFFERS_NOEXCEPT = default;
  AttractPointDataRowT &operator=(AttractPointDataRowT o) FLATBUFFERS_NOEXCEPT;
};

struct AttractPointDataRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AttractPointDataRowT NativeTableType;
  typedef AttractPointDataRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_SPLINES = 8,
    VT_COLLIDERS = 10,
    VT_CENTERPOSITION = 12,
    VT_ROTATION = 14,
    VT_SCALE = 16,
    VT_PREFABPATH = 18
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  const ::flatbuffers::String *Splines() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPLINES);
  }
  const ::flatbuffers::String *Colliders() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLLIDERS);
  }
  const fb::tuple_float32_float32_float32 *CenterPosition() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_CENTERPOSITION);
  }
  const fb::tuple_float32_float32_float32_float32 *Rotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32_float32 *>(VT_ROTATION);
  }
  const fb::tuple_float32_float32_float32 *Scale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_SCALE);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyOffset(verifier, VT_SPLINES) &&
           verifier.VerifyString(Splines()) &&
           VerifyOffset(verifier, VT_COLLIDERS) &&
           verifier.VerifyString(Colliders()) &&
           VerifyOffset(verifier, VT_CENTERPOSITION) &&
           verifier.VerifyTable(CenterPosition()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(Rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(Scale()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           verifier.EndTable();
  }
  AttractPointDataRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AttractPointDataRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AttractPointDataRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AttractPointDataRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AttractPointDataRowBuilder {
  typedef AttractPointDataRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(AttractPointDataRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(AttractPointDataRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_Splines(::flatbuffers::Offset<::flatbuffers::String> Splines) {
    fbb_.AddOffset(AttractPointDataRow::VT_SPLINES, Splines);
  }
  void add_Colliders(::flatbuffers::Offset<::flatbuffers::String> Colliders) {
    fbb_.AddOffset(AttractPointDataRow::VT_COLLIDERS, Colliders);
  }
  void add_CenterPosition(::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition) {
    fbb_.AddOffset(AttractPointDataRow::VT_CENTERPOSITION, CenterPosition);
  }
  void add_Rotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation) {
    fbb_.AddOffset(AttractPointDataRow::VT_ROTATION, Rotation);
  }
  void add_Scale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale) {
    fbb_.AddOffset(AttractPointDataRow::VT_SCALE, Scale);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(AttractPointDataRow::VT_PREFABPATH, PrefabPath);
  }
  explicit AttractPointDataRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AttractPointDataRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AttractPointDataRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AttractPointDataRow> CreateAttractPointDataRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Splines = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Colliders = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0) {
  AttractPointDataRowBuilder builder_(_fbb);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_Scale(Scale);
  builder_.add_Rotation(Rotation);
  builder_.add_CenterPosition(CenterPosition);
  builder_.add_Colliders(Colliders);
  builder_.add_Splines(Splines);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AttractPointDataRow> CreateAttractPointDataRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    const char *Splines = nullptr,
    const char *Colliders = nullptr,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    const char *PrefabPath = nullptr) {
  auto Splines__ = Splines ? _fbb.CreateString(Splines) : 0;
  auto Colliders__ = Colliders ? _fbb.CreateString(Colliders) : 0;
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateAttractPointDataRow(
      _fbb,
      Id,
      WorldTypeId,
      Splines__,
      Colliders__,
      CenterPosition,
      Rotation,
      Scale,
      PrefabPath__);
}

::flatbuffers::Offset<AttractPointDataRow> CreateAttractPointDataRow(::flatbuffers::FlatBufferBuilder &_fbb, const AttractPointDataRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AttractPointDataT::AttractPointDataT(const AttractPointDataT &o) {
  AttractPointDatas.reserve(o.AttractPointDatas.size());
  for (const auto &AttractPointDatas_ : o.AttractPointDatas) { AttractPointDatas.emplace_back((AttractPointDatas_) ? new fb::AttractPointDataRowT(*AttractPointDatas_) : nullptr); }
}

inline AttractPointDataT &AttractPointDataT::operator=(AttractPointDataT o) FLATBUFFERS_NOEXCEPT {
  std::swap(AttractPointDatas, o.AttractPointDatas);
  return *this;
}

inline AttractPointDataT *AttractPointData::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AttractPointDataT>(new AttractPointDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AttractPointData::UnPackTo(AttractPointDataT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = AttractPointDatas(); if (_e) { _o->AttractPointDatas.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->AttractPointDatas[_i]) { _e->Get(_i)->UnPackTo(_o->AttractPointDatas[_i].get(), _resolver); } else { _o->AttractPointDatas[_i] = std::unique_ptr<fb::AttractPointDataRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->AttractPointDatas.resize(0); } }
}

inline ::flatbuffers::Offset<AttractPointData> AttractPointData::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AttractPointDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAttractPointData(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AttractPointData> CreateAttractPointData(::flatbuffers::FlatBufferBuilder &_fbb, const AttractPointDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AttractPointDataT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _AttractPointDatas = _o->AttractPointDatas.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::AttractPointDataRow>> (_o->AttractPointDatas.size(), [](size_t i, _VectorArgs *__va) { return CreateAttractPointDataRow(*__va->__fbb, __va->__o->AttractPointDatas[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAttractPointData(
      _fbb,
      _AttractPointDatas);
}

inline AttractPointDataRowT::AttractPointDataRowT(const AttractPointDataRowT &o)
      : Id(o.Id),
        WorldTypeId(o.WorldTypeId),
        Splines(o.Splines),
        Colliders(o.Colliders),
        CenterPosition((o.CenterPosition) ? new fb::tuple_float32_float32_float32T(*o.CenterPosition) : nullptr),
        Rotation((o.Rotation) ? new fb::tuple_float32_float32_float32_float32T(*o.Rotation) : nullptr),
        Scale((o.Scale) ? new fb::tuple_float32_float32_float32T(*o.Scale) : nullptr),
        PrefabPath(o.PrefabPath) {
}

inline AttractPointDataRowT &AttractPointDataRowT::operator=(AttractPointDataRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldTypeId, o.WorldTypeId);
  std::swap(Splines, o.Splines);
  std::swap(Colliders, o.Colliders);
  std::swap(CenterPosition, o.CenterPosition);
  std::swap(Rotation, o.Rotation);
  std::swap(Scale, o.Scale);
  std::swap(PrefabPath, o.PrefabPath);
  return *this;
}

inline AttractPointDataRowT *AttractPointDataRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AttractPointDataRowT>(new AttractPointDataRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AttractPointDataRow::UnPackTo(AttractPointDataRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = Splines(); if (_e) _o->Splines = _e->str(); }
  { auto _e = Colliders(); if (_e) _o->Colliders = _e->str(); }
  { auto _e = CenterPosition(); if (_e) { if(_o->CenterPosition) { _e->UnPackTo(_o->CenterPosition.get(), _resolver); } else { _o->CenterPosition = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->CenterPosition) { _o->CenterPosition.reset(); } }
  { auto _e = Rotation(); if (_e) { if(_o->Rotation) { _e->UnPackTo(_o->Rotation.get(), _resolver); } else { _o->Rotation = std::unique_ptr<fb::tuple_float32_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Rotation) { _o->Rotation.reset(); } }
  { auto _e = Scale(); if (_e) { if(_o->Scale) { _e->UnPackTo(_o->Scale.get(), _resolver); } else { _o->Scale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Scale) { _o->Scale.reset(); } }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
}

inline ::flatbuffers::Offset<AttractPointDataRow> AttractPointDataRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AttractPointDataRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAttractPointDataRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AttractPointDataRow> CreateAttractPointDataRow(::flatbuffers::FlatBufferBuilder &_fbb, const AttractPointDataRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AttractPointDataRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _Splines = _o->Splines.empty() ? 0 : _fbb.CreateString(_o->Splines);
  auto _Colliders = _o->Colliders.empty() ? 0 : _fbb.CreateString(_o->Colliders);
  auto _CenterPosition = _o->CenterPosition ? Createtuple_float32_float32_float32(_fbb, _o->CenterPosition.get(), _rehasher) : 0;
  auto _Rotation = _o->Rotation ? Createtuple_float32_float32_float32_float32(_fbb, _o->Rotation.get(), _rehasher) : 0;
  auto _Scale = _o->Scale ? Createtuple_float32_float32_float32(_fbb, _o->Scale.get(), _rehasher) : 0;
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  return fb::CreateAttractPointDataRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _Splines,
      _Colliders,
      _CenterPosition,
      _Rotation,
      _Scale,
      _PrefabPath);
}

inline const fb::AttractPointData *GetAttractPointData(const void *buf) {
  return ::flatbuffers::GetRoot<fb::AttractPointData>(buf);
}

inline const fb::AttractPointData *GetSizePrefixedAttractPointData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::AttractPointData>(buf);
}

inline bool VerifyAttractPointDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::AttractPointData>(nullptr);
}

inline bool VerifySizePrefixedAttractPointDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::AttractPointData>(nullptr);
}

inline void FinishAttractPointDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AttractPointData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAttractPointDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AttractPointData> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::AttractPointDataT> UnPackAttractPointData(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AttractPointDataT>(GetAttractPointData(buf)->UnPack(res));
}

inline std::unique_ptr<fb::AttractPointDataT> UnPackSizePrefixedAttractPointData(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AttractPointDataT>(GetSizePrefixedAttractPointData(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_ATTRACTPOINTDATA_FB_H_
