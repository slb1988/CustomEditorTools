// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AVATAR_FB_H_
#define FLATBUFFERS_GENERATED_AVATAR_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Avatar;
struct AvatarBuilder;
struct AvatarT;

struct AvatarRow;
struct AvatarRowBuilder;
struct AvatarRowT;

struct AvatarT : public ::flatbuffers::NativeTable {
  typedef Avatar TableType;
  std::vector<std::unique_ptr<fb::AvatarRowT>> Avatars{};
  AvatarT() = default;
  AvatarT(const AvatarT &o);
  AvatarT(AvatarT&&) FLATBUFFERS_NOEXCEPT = default;
  AvatarT &operator=(AvatarT o) FLATBUFFERS_NOEXCEPT;
};

struct Avatar FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AvatarT NativeTableType;
  typedef AvatarBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AVATARS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarRow>> *Avatars() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarRow>> *>(VT_AVATARS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AVATARS) &&
           verifier.VerifyVector(Avatars()) &&
           verifier.VerifyVectorOfTables(Avatars()) &&
           verifier.EndTable();
  }
  AvatarT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AvatarT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Avatar> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AvatarBuilder {
  typedef Avatar Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Avatars(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarRow>>> Avatars) {
    fbb_.AddOffset(Avatar::VT_AVATARS, Avatars);
  }
  explicit AvatarBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Avatar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Avatar>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Avatar> CreateAvatar(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarRow>>> Avatars = 0) {
  AvatarBuilder builder_(_fbb);
  builder_.add_Avatars(Avatars);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Avatar> CreateAvatarDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::AvatarRow>> *Avatars = nullptr) {
  auto Avatars__ = Avatars ? _fbb.CreateVectorOfSortedTables<fb::AvatarRow>(Avatars) : 0;
  return fb::CreateAvatar(
      _fbb,
      Avatars__);
}

::flatbuffers::Offset<Avatar> CreateAvatar(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AvatarRowT : public ::flatbuffers::NativeTable {
  typedef AvatarRow TableType;
  uint32_t Id = 0;
  std::vector<uint32_t> SetId{};
  std::vector<uint32_t> SlotId{};
  std::string Name{};
  std::string Desc{};
  std::string Icon{};
  std::string PrefabPath{};
};

struct AvatarRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AvatarRowT NativeTableType;
  typedef AvatarRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_SETID = 6,
    VT_SLOTID = 8,
    VT_NAME = 10,
    VT_DESC = 12,
    VT_ICON = 14,
    VT_PREFABPATH = 16
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const AvatarRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  const ::flatbuffers::Vector<uint32_t> *SetId() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_SETID);
  }
  const ::flatbuffers::Vector<uint32_t> *SlotId() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_SLOTID);
  }
  const ::flatbuffers::String *Name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *Desc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESC);
  }
  const ::flatbuffers::String *Icon() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ICON);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_SETID) &&
           verifier.VerifyVector(SetId()) &&
           VerifyOffset(verifier, VT_SLOTID) &&
           verifier.VerifyVector(SlotId()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(Name()) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(Desc()) &&
           VerifyOffset(verifier, VT_ICON) &&
           verifier.VerifyString(Icon()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           verifier.EndTable();
  }
  AvatarRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AvatarRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AvatarRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AvatarRowBuilder {
  typedef AvatarRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(AvatarRow::VT_ID, Id, 0);
  }
  void add_SetId(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> SetId) {
    fbb_.AddOffset(AvatarRow::VT_SETID, SetId);
  }
  void add_SlotId(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> SlotId) {
    fbb_.AddOffset(AvatarRow::VT_SLOTID, SlotId);
  }
  void add_Name(::flatbuffers::Offset<::flatbuffers::String> Name) {
    fbb_.AddOffset(AvatarRow::VT_NAME, Name);
  }
  void add_Desc(::flatbuffers::Offset<::flatbuffers::String> Desc) {
    fbb_.AddOffset(AvatarRow::VT_DESC, Desc);
  }
  void add_Icon(::flatbuffers::Offset<::flatbuffers::String> Icon) {
    fbb_.AddOffset(AvatarRow::VT_ICON, Icon);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(AvatarRow::VT_PREFABPATH, PrefabPath);
  }
  explicit AvatarRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AvatarRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AvatarRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AvatarRow> CreateAvatarRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> SetId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> SlotId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Desc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Icon = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0) {
  AvatarRowBuilder builder_(_fbb);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_Icon(Icon);
  builder_.add_Desc(Desc);
  builder_.add_Name(Name);
  builder_.add_SlotId(SlotId);
  builder_.add_SetId(SetId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AvatarRow> CreateAvatarRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const std::vector<uint32_t> *SetId = nullptr,
    const std::vector<uint32_t> *SlotId = nullptr,
    const char *Name = nullptr,
    const char *Desc = nullptr,
    const char *Icon = nullptr,
    const char *PrefabPath = nullptr) {
  auto SetId__ = SetId ? _fbb.CreateVector<uint32_t>(*SetId) : 0;
  auto SlotId__ = SlotId ? _fbb.CreateVector<uint32_t>(*SlotId) : 0;
  auto Name__ = Name ? _fbb.CreateString(Name) : 0;
  auto Desc__ = Desc ? _fbb.CreateString(Desc) : 0;
  auto Icon__ = Icon ? _fbb.CreateString(Icon) : 0;
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateAvatarRow(
      _fbb,
      Id,
      SetId__,
      SlotId__,
      Name__,
      Desc__,
      Icon__,
      PrefabPath__);
}

::flatbuffers::Offset<AvatarRow> CreateAvatarRow(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AvatarT::AvatarT(const AvatarT &o) {
  Avatars.reserve(o.Avatars.size());
  for (const auto &Avatars_ : o.Avatars) { Avatars.emplace_back((Avatars_) ? new fb::AvatarRowT(*Avatars_) : nullptr); }
}

inline AvatarT &AvatarT::operator=(AvatarT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Avatars, o.Avatars);
  return *this;
}

inline AvatarT *Avatar::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AvatarT>(new AvatarT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Avatar::UnPackTo(AvatarT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Avatars(); if (_e) { _o->Avatars.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Avatars[_i]) { _e->Get(_i)->UnPackTo(_o->Avatars[_i].get(), _resolver); } else { _o->Avatars[_i] = std::unique_ptr<fb::AvatarRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Avatars.resize(0); } }
}

inline ::flatbuffers::Offset<Avatar> Avatar::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAvatar(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Avatar> CreateAvatar(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AvatarT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Avatars = _o->Avatars.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::AvatarRow>> (_o->Avatars.size(), [](size_t i, _VectorArgs *__va) { return CreateAvatarRow(*__va->__fbb, __va->__o->Avatars[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAvatar(
      _fbb,
      _Avatars);
}

inline AvatarRowT *AvatarRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AvatarRowT>(new AvatarRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AvatarRow::UnPackTo(AvatarRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = SetId(); if (_e) { _o->SetId.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->SetId[_i] = _e->Get(_i); } } else { _o->SetId.resize(0); } }
  { auto _e = SlotId(); if (_e) { _o->SlotId.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->SlotId[_i] = _e->Get(_i); } } else { _o->SlotId.resize(0); } }
  { auto _e = Name(); if (_e) _o->Name = _e->str(); }
  { auto _e = Desc(); if (_e) _o->Desc = _e->str(); }
  { auto _e = Icon(); if (_e) _o->Icon = _e->str(); }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
}

inline ::flatbuffers::Offset<AvatarRow> AvatarRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAvatarRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AvatarRow> CreateAvatarRow(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AvatarRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _SetId = _o->SetId.size() ? _fbb.CreateVector(_o->SetId) : 0;
  auto _SlotId = _o->SlotId.size() ? _fbb.CreateVector(_o->SlotId) : 0;
  auto _Name = _o->Name.empty() ? 0 : _fbb.CreateString(_o->Name);
  auto _Desc = _o->Desc.empty() ? 0 : _fbb.CreateString(_o->Desc);
  auto _Icon = _o->Icon.empty() ? 0 : _fbb.CreateString(_o->Icon);
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  return fb::CreateAvatarRow(
      _fbb,
      _Id,
      _SetId,
      _SlotId,
      _Name,
      _Desc,
      _Icon,
      _PrefabPath);
}

inline const fb::Avatar *GetAvatar(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Avatar>(buf);
}

inline const fb::Avatar *GetSizePrefixedAvatar(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Avatar>(buf);
}

inline bool VerifyAvatarBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Avatar>(nullptr);
}

inline bool VerifySizePrefixedAvatarBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Avatar>(nullptr);
}

inline void FinishAvatarBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Avatar> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAvatarBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Avatar> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::AvatarT> UnPackAvatar(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AvatarT>(GetAvatar(buf)->UnPack(res));
}

inline std::unique_ptr<fb::AvatarT> UnPackSizePrefixedAvatar(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AvatarT>(GetSizePrefixedAvatar(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_AVATAR_FB_H_
