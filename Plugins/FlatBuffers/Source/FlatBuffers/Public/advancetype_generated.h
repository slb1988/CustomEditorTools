// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ADVANCETYPE_FB_H_
#define FLATBUFFERS_GENERATED_ADVANCETYPE_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct AdvanceType;
struct AdvanceTypeBuilder;
struct AdvanceTypeT;

struct AdvanceTypeRow;
struct AdvanceTypeRowBuilder;
struct AdvanceTypeRowT;

struct AdvanceTypeT : public ::flatbuffers::NativeTable {
  typedef AdvanceType TableType;
  std::vector<std::unique_ptr<fb::AdvanceTypeRowT>> AdvanceTypes{};
  AdvanceTypeT() = default;
  AdvanceTypeT(const AdvanceTypeT &o);
  AdvanceTypeT(AdvanceTypeT&&) FLATBUFFERS_NOEXCEPT = default;
  AdvanceTypeT &operator=(AdvanceTypeT o) FLATBUFFERS_NOEXCEPT;
};

struct AdvanceType FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AdvanceTypeT NativeTableType;
  typedef AdvanceTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADVANCETYPES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AdvanceTypeRow>> *AdvanceTypes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AdvanceTypeRow>> *>(VT_ADVANCETYPES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ADVANCETYPES) &&
           verifier.VerifyVector(AdvanceTypes()) &&
           verifier.VerifyVectorOfTables(AdvanceTypes()) &&
           verifier.EndTable();
  }
  AdvanceTypeT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AdvanceTypeT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AdvanceType> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AdvanceTypeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AdvanceTypeBuilder {
  typedef AdvanceType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_AdvanceTypes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AdvanceTypeRow>>> AdvanceTypes) {
    fbb_.AddOffset(AdvanceType::VT_ADVANCETYPES, AdvanceTypes);
  }
  explicit AdvanceTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AdvanceType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AdvanceType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AdvanceType> CreateAdvanceType(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AdvanceTypeRow>>> AdvanceTypes = 0) {
  AdvanceTypeBuilder builder_(_fbb);
  builder_.add_AdvanceTypes(AdvanceTypes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AdvanceType> CreateAdvanceTypeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::AdvanceTypeRow>> *AdvanceTypes = nullptr) {
  auto AdvanceTypes__ = AdvanceTypes ? _fbb.CreateVector<::flatbuffers::Offset<fb::AdvanceTypeRow>>(*AdvanceTypes) : 0;
  return fb::CreateAdvanceType(
      _fbb,
      AdvanceTypes__);
}

::flatbuffers::Offset<AdvanceType> CreateAdvanceType(::flatbuffers::FlatBufferBuilder &_fbb, const AdvanceTypeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AdvanceTypeRowT : public ::flatbuffers::NativeTable {
  typedef AdvanceTypeRow TableType;
  int32_t Id = 0;
  std::vector<int32_t> VList1{};
  std::vector<int32_t> VList2{};
  std::unique_ptr<fb::map_int32_int32T> VMap1{};
  std::unique_ptr<fb::map_int32_int32T> VMap2{};
  fb::Test VEnum = fb::Test_e1;
  std::unique_ptr<fb::tuple_int32_int32_int32T> VTuple1{};
  std::unique_ptr<fb::tuple_int32_int32_int32T> VTuple2{};
  std::vector<std::unique_ptr<fb::tuple_int32_int32_int32T>> VListTuple{};
  AdvanceTypeRowT() = default;
  AdvanceTypeRowT(const AdvanceTypeRowT &o);
  AdvanceTypeRowT(AdvanceTypeRowT&&) FLATBUFFERS_NOEXCEPT = default;
  AdvanceTypeRowT &operator=(AdvanceTypeRowT o) FLATBUFFERS_NOEXCEPT;
};

struct AdvanceTypeRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AdvanceTypeRowT NativeTableType;
  typedef AdvanceTypeRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_VLIST1 = 6,
    VT_VLIST2 = 8,
    VT_VMAP1 = 10,
    VT_VMAP2 = 12,
    VT_VENUM = 14,
    VT_VTUPLE1 = 16,
    VT_VTUPLE2 = 18,
    VT_VLISTTUPLE = 20
  };
  int32_t Id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const ::flatbuffers::Vector<int32_t> *VList1() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VLIST1);
  }
  const ::flatbuffers::Vector<int32_t> *VList2() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VLIST2);
  }
  const fb::map_int32_int32 *VMap1() const {
    return GetPointer<const fb::map_int32_int32 *>(VT_VMAP1);
  }
  const fb::map_int32_int32 *VMap2() const {
    return GetPointer<const fb::map_int32_int32 *>(VT_VMAP2);
  }
  fb::Test VEnum() const {
    return static_cast<fb::Test>(GetField<int32_t>(VT_VENUM, 0));
  }
  const fb::tuple_int32_int32_int32 *VTuple1() const {
    return GetPointer<const fb::tuple_int32_int32_int32 *>(VT_VTUPLE1);
  }
  const fb::tuple_int32_int32_int32 *VTuple2() const {
    return GetPointer<const fb::tuple_int32_int32_int32 *>(VT_VTUPLE2);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32_int32>> *VListTuple() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32_int32>> *>(VT_VLISTTUPLE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_VLIST1) &&
           verifier.VerifyVector(VList1()) &&
           VerifyOffset(verifier, VT_VLIST2) &&
           verifier.VerifyVector(VList2()) &&
           VerifyOffset(verifier, VT_VMAP1) &&
           verifier.VerifyTable(VMap1()) &&
           VerifyOffset(verifier, VT_VMAP2) &&
           verifier.VerifyTable(VMap2()) &&
           VerifyField<int32_t>(verifier, VT_VENUM, 4) &&
           VerifyOffset(verifier, VT_VTUPLE1) &&
           verifier.VerifyTable(VTuple1()) &&
           VerifyOffset(verifier, VT_VTUPLE2) &&
           verifier.VerifyTable(VTuple2()) &&
           VerifyOffset(verifier, VT_VLISTTUPLE) &&
           verifier.VerifyVector(VListTuple()) &&
           verifier.VerifyVectorOfTables(VListTuple()) &&
           verifier.EndTable();
  }
  AdvanceTypeRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AdvanceTypeRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AdvanceTypeRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AdvanceTypeRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AdvanceTypeRowBuilder {
  typedef AdvanceTypeRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(int32_t Id) {
    fbb_.AddElement<int32_t>(AdvanceTypeRow::VT_ID, Id, 0);
  }
  void add_VList1(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> VList1) {
    fbb_.AddOffset(AdvanceTypeRow::VT_VLIST1, VList1);
  }
  void add_VList2(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> VList2) {
    fbb_.AddOffset(AdvanceTypeRow::VT_VLIST2, VList2);
  }
  void add_VMap1(::flatbuffers::Offset<fb::map_int32_int32> VMap1) {
    fbb_.AddOffset(AdvanceTypeRow::VT_VMAP1, VMap1);
  }
  void add_VMap2(::flatbuffers::Offset<fb::map_int32_int32> VMap2) {
    fbb_.AddOffset(AdvanceTypeRow::VT_VMAP2, VMap2);
  }
  void add_VEnum(fb::Test VEnum) {
    fbb_.AddElement<int32_t>(AdvanceTypeRow::VT_VENUM, static_cast<int32_t>(VEnum), 0);
  }
  void add_VTuple1(::flatbuffers::Offset<fb::tuple_int32_int32_int32> VTuple1) {
    fbb_.AddOffset(AdvanceTypeRow::VT_VTUPLE1, VTuple1);
  }
  void add_VTuple2(::flatbuffers::Offset<fb::tuple_int32_int32_int32> VTuple2) {
    fbb_.AddOffset(AdvanceTypeRow::VT_VTUPLE2, VTuple2);
  }
  void add_VListTuple(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32_int32>>> VListTuple) {
    fbb_.AddOffset(AdvanceTypeRow::VT_VLISTTUPLE, VListTuple);
  }
  explicit AdvanceTypeRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AdvanceTypeRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AdvanceTypeRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AdvanceTypeRow> CreateAdvanceTypeRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> VList1 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> VList2 = 0,
    ::flatbuffers::Offset<fb::map_int32_int32> VMap1 = 0,
    ::flatbuffers::Offset<fb::map_int32_int32> VMap2 = 0,
    fb::Test VEnum = fb::Test_e1,
    ::flatbuffers::Offset<fb::tuple_int32_int32_int32> VTuple1 = 0,
    ::flatbuffers::Offset<fb::tuple_int32_int32_int32> VTuple2 = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32_int32>>> VListTuple = 0) {
  AdvanceTypeRowBuilder builder_(_fbb);
  builder_.add_VListTuple(VListTuple);
  builder_.add_VTuple2(VTuple2);
  builder_.add_VTuple1(VTuple1);
  builder_.add_VEnum(VEnum);
  builder_.add_VMap2(VMap2);
  builder_.add_VMap1(VMap1);
  builder_.add_VList2(VList2);
  builder_.add_VList1(VList1);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AdvanceTypeRow> CreateAdvanceTypeRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Id = 0,
    const std::vector<int32_t> *VList1 = nullptr,
    const std::vector<int32_t> *VList2 = nullptr,
    ::flatbuffers::Offset<fb::map_int32_int32> VMap1 = 0,
    ::flatbuffers::Offset<fb::map_int32_int32> VMap2 = 0,
    fb::Test VEnum = fb::Test_e1,
    ::flatbuffers::Offset<fb::tuple_int32_int32_int32> VTuple1 = 0,
    ::flatbuffers::Offset<fb::tuple_int32_int32_int32> VTuple2 = 0,
    const std::vector<::flatbuffers::Offset<fb::tuple_int32_int32_int32>> *VListTuple = nullptr) {
  auto VList1__ = VList1 ? _fbb.CreateVector<int32_t>(*VList1) : 0;
  auto VList2__ = VList2 ? _fbb.CreateVector<int32_t>(*VList2) : 0;
  auto VListTuple__ = VListTuple ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_int32_int32>>(*VListTuple) : 0;
  return fb::CreateAdvanceTypeRow(
      _fbb,
      Id,
      VList1__,
      VList2__,
      VMap1,
      VMap2,
      VEnum,
      VTuple1,
      VTuple2,
      VListTuple__);
}

::flatbuffers::Offset<AdvanceTypeRow> CreateAdvanceTypeRow(::flatbuffers::FlatBufferBuilder &_fbb, const AdvanceTypeRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AdvanceTypeT::AdvanceTypeT(const AdvanceTypeT &o) {
  AdvanceTypes.reserve(o.AdvanceTypes.size());
  for (const auto &AdvanceTypes_ : o.AdvanceTypes) { AdvanceTypes.emplace_back((AdvanceTypes_) ? new fb::AdvanceTypeRowT(*AdvanceTypes_) : nullptr); }
}

inline AdvanceTypeT &AdvanceTypeT::operator=(AdvanceTypeT o) FLATBUFFERS_NOEXCEPT {
  std::swap(AdvanceTypes, o.AdvanceTypes);
  return *this;
}

inline AdvanceTypeT *AdvanceType::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AdvanceTypeT>(new AdvanceTypeT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AdvanceType::UnPackTo(AdvanceTypeT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = AdvanceTypes(); if (_e) { _o->AdvanceTypes.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->AdvanceTypes[_i]) { _e->Get(_i)->UnPackTo(_o->AdvanceTypes[_i].get(), _resolver); } else { _o->AdvanceTypes[_i] = std::unique_ptr<fb::AdvanceTypeRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->AdvanceTypes.resize(0); } }
}

inline ::flatbuffers::Offset<AdvanceType> AdvanceType::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AdvanceTypeT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAdvanceType(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AdvanceType> CreateAdvanceType(::flatbuffers::FlatBufferBuilder &_fbb, const AdvanceTypeT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AdvanceTypeT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _AdvanceTypes = _o->AdvanceTypes.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::AdvanceTypeRow>> (_o->AdvanceTypes.size(), [](size_t i, _VectorArgs *__va) { return CreateAdvanceTypeRow(*__va->__fbb, __va->__o->AdvanceTypes[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAdvanceType(
      _fbb,
      _AdvanceTypes);
}

inline AdvanceTypeRowT::AdvanceTypeRowT(const AdvanceTypeRowT &o)
      : Id(o.Id),
        VList1(o.VList1),
        VList2(o.VList2),
        VMap1((o.VMap1) ? new fb::map_int32_int32T(*o.VMap1) : nullptr),
        VMap2((o.VMap2) ? new fb::map_int32_int32T(*o.VMap2) : nullptr),
        VEnum(o.VEnum),
        VTuple1((o.VTuple1) ? new fb::tuple_int32_int32_int32T(*o.VTuple1) : nullptr),
        VTuple2((o.VTuple2) ? new fb::tuple_int32_int32_int32T(*o.VTuple2) : nullptr) {
  VListTuple.reserve(o.VListTuple.size());
  for (const auto &VListTuple_ : o.VListTuple) { VListTuple.emplace_back((VListTuple_) ? new fb::tuple_int32_int32_int32T(*VListTuple_) : nullptr); }
}

inline AdvanceTypeRowT &AdvanceTypeRowT::operator=(AdvanceTypeRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(VList1, o.VList1);
  std::swap(VList2, o.VList2);
  std::swap(VMap1, o.VMap1);
  std::swap(VMap2, o.VMap2);
  std::swap(VEnum, o.VEnum);
  std::swap(VTuple1, o.VTuple1);
  std::swap(VTuple2, o.VTuple2);
  std::swap(VListTuple, o.VListTuple);
  return *this;
}

inline AdvanceTypeRowT *AdvanceTypeRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AdvanceTypeRowT>(new AdvanceTypeRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AdvanceTypeRow::UnPackTo(AdvanceTypeRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = VList1(); if (_e) { _o->VList1.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->VList1[_i] = _e->Get(_i); } } else { _o->VList1.resize(0); } }
  { auto _e = VList2(); if (_e) { _o->VList2.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->VList2[_i] = _e->Get(_i); } } else { _o->VList2.resize(0); } }
  { auto _e = VMap1(); if (_e) { if(_o->VMap1) { _e->UnPackTo(_o->VMap1.get(), _resolver); } else { _o->VMap1 = std::unique_ptr<fb::map_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->VMap1) { _o->VMap1.reset(); } }
  { auto _e = VMap2(); if (_e) { if(_o->VMap2) { _e->UnPackTo(_o->VMap2.get(), _resolver); } else { _o->VMap2 = std::unique_ptr<fb::map_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->VMap2) { _o->VMap2.reset(); } }
  { auto _e = VEnum(); _o->VEnum = _e; }
  { auto _e = VTuple1(); if (_e) { if(_o->VTuple1) { _e->UnPackTo(_o->VTuple1.get(), _resolver); } else { _o->VTuple1 = std::unique_ptr<fb::tuple_int32_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->VTuple1) { _o->VTuple1.reset(); } }
  { auto _e = VTuple2(); if (_e) { if(_o->VTuple2) { _e->UnPackTo(_o->VTuple2.get(), _resolver); } else { _o->VTuple2 = std::unique_ptr<fb::tuple_int32_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->VTuple2) { _o->VTuple2.reset(); } }
  { auto _e = VListTuple(); if (_e) { _o->VListTuple.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->VListTuple[_i]) { _e->Get(_i)->UnPackTo(_o->VListTuple[_i].get(), _resolver); } else { _o->VListTuple[_i] = std::unique_ptr<fb::tuple_int32_int32_int32T>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->VListTuple.resize(0); } }
}

inline ::flatbuffers::Offset<AdvanceTypeRow> AdvanceTypeRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AdvanceTypeRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAdvanceTypeRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AdvanceTypeRow> CreateAdvanceTypeRow(::flatbuffers::FlatBufferBuilder &_fbb, const AdvanceTypeRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AdvanceTypeRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _VList1 = _o->VList1.size() ? _fbb.CreateVector(_o->VList1) : 0;
  auto _VList2 = _o->VList2.size() ? _fbb.CreateVector(_o->VList2) : 0;
  auto _VMap1 = _o->VMap1 ? Createmap_int32_int32(_fbb, _o->VMap1.get(), _rehasher) : 0;
  auto _VMap2 = _o->VMap2 ? Createmap_int32_int32(_fbb, _o->VMap2.get(), _rehasher) : 0;
  auto _VEnum = _o->VEnum;
  auto _VTuple1 = _o->VTuple1 ? Createtuple_int32_int32_int32(_fbb, _o->VTuple1.get(), _rehasher) : 0;
  auto _VTuple2 = _o->VTuple2 ? Createtuple_int32_int32_int32(_fbb, _o->VTuple2.get(), _rehasher) : 0;
  auto _VListTuple = _o->VListTuple.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_int32_int32>> (_o->VListTuple.size(), [](size_t i, _VectorArgs *__va) { return Createtuple_int32_int32_int32(*__va->__fbb, __va->__o->VListTuple[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAdvanceTypeRow(
      _fbb,
      _Id,
      _VList1,
      _VList2,
      _VMap1,
      _VMap2,
      _VEnum,
      _VTuple1,
      _VTuple2,
      _VListTuple);
}

inline const fb::AdvanceType *GetAdvanceType(const void *buf) {
  return ::flatbuffers::GetRoot<fb::AdvanceType>(buf);
}

inline const fb::AdvanceType *GetSizePrefixedAdvanceType(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::AdvanceType>(buf);
}

inline bool VerifyAdvanceTypeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::AdvanceType>(nullptr);
}

inline bool VerifySizePrefixedAdvanceTypeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::AdvanceType>(nullptr);
}

inline void FinishAdvanceTypeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AdvanceType> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAdvanceTypeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AdvanceType> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::AdvanceTypeT> UnPackAdvanceType(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AdvanceTypeT>(GetAdvanceType(buf)->UnPack(res));
}

inline std::unique_ptr<fb::AdvanceTypeT> UnPackSizePrefixedAdvanceType(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AdvanceTypeT>(GetSizePrefixedAdvanceType(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_ADVANCETYPE_FB_H_
