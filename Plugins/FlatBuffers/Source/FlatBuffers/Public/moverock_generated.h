// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MOVEROCK_FB_H_
#define FLATBUFFERS_GENERATED_MOVEROCK_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct MoveRock;
struct MoveRockBuilder;
struct MoveRockT;

struct MoveRockRow;
struct MoveRockRowBuilder;
struct MoveRockRowT;

struct MoveRockT : public ::flatbuffers::NativeTable {
  typedef MoveRock TableType;
  std::vector<std::unique_ptr<fb::MoveRockRowT>> MoveRocks{};
  MoveRockT() = default;
  MoveRockT(const MoveRockT &o);
  MoveRockT(MoveRockT&&) FLATBUFFERS_NOEXCEPT = default;
  MoveRockT &operator=(MoveRockT o) FLATBUFFERS_NOEXCEPT;
};

struct MoveRock FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MoveRockT NativeTableType;
  typedef MoveRockBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MOVEROCKS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::MoveRockRow>> *MoveRocks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::MoveRockRow>> *>(VT_MOVEROCKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MOVEROCKS) &&
           verifier.VerifyVector(MoveRocks()) &&
           verifier.VerifyVectorOfTables(MoveRocks()) &&
           verifier.EndTable();
  }
  MoveRockT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MoveRockT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<MoveRock> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MoveRockT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MoveRockBuilder {
  typedef MoveRock Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_MoveRocks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::MoveRockRow>>> MoveRocks) {
    fbb_.AddOffset(MoveRock::VT_MOVEROCKS, MoveRocks);
  }
  explicit MoveRockBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MoveRock> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MoveRock>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MoveRock> CreateMoveRock(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::MoveRockRow>>> MoveRocks = 0) {
  MoveRockBuilder builder_(_fbb);
  builder_.add_MoveRocks(MoveRocks);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MoveRock> CreateMoveRockDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::MoveRockRow>> *MoveRocks = nullptr) {
  auto MoveRocks__ = MoveRocks ? _fbb.CreateVector<::flatbuffers::Offset<fb::MoveRockRow>>(*MoveRocks) : 0;
  return fb::CreateMoveRock(
      _fbb,
      MoveRocks__);
}

::flatbuffers::Offset<MoveRock> CreateMoveRock(::flatbuffers::FlatBufferBuilder &_fbb, const MoveRockT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MoveRockRowT : public ::flatbuffers::NativeTable {
  typedef MoveRockRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  fb::NpcMoveType MoveType = fb::NpcMoveType_NONE;
  float Speed = 0.0f;
  float ColliderRadius = 0.0f;
  std::unique_ptr<fb::tuple_float32_float32_float32T> ModelScale{};
  std::string Splines{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> CenterPosition{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> InitModelRotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32_float32T> Rotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> Scale{};
  std::string PrefabPath{};
  MoveRockRowT() = default;
  MoveRockRowT(const MoveRockRowT &o);
  MoveRockRowT(MoveRockRowT&&) FLATBUFFERS_NOEXCEPT = default;
  MoveRockRowT &operator=(MoveRockRowT o) FLATBUFFERS_NOEXCEPT;
};

struct MoveRockRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MoveRockRowT NativeTableType;
  typedef MoveRockRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_MOVETYPE = 8,
    VT_SPEED = 10,
    VT_COLLIDERRADIUS = 12,
    VT_MODELSCALE = 14,
    VT_SPLINES = 16,
    VT_CENTERPOSITION = 18,
    VT_INITMODELROTATION = 20,
    VT_ROTATION = 22,
    VT_SCALE = 24,
    VT_PREFABPATH = 26
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  fb::NpcMoveType MoveType() const {
    return static_cast<fb::NpcMoveType>(GetField<int32_t>(VT_MOVETYPE, 0));
  }
  float Speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  float ColliderRadius() const {
    return GetField<float>(VT_COLLIDERRADIUS, 0.0f);
  }
  const fb::tuple_float32_float32_float32 *ModelScale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_MODELSCALE);
  }
  const ::flatbuffers::String *Splines() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPLINES);
  }
  const fb::tuple_float32_float32_float32 *CenterPosition() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_CENTERPOSITION);
  }
  const fb::tuple_float32_float32_float32 *InitModelRotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_INITMODELROTATION);
  }
  const fb::tuple_float32_float32_float32_float32 *Rotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32_float32 *>(VT_ROTATION);
  }
  const fb::tuple_float32_float32_float32 *Scale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_SCALE);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyField<int32_t>(verifier, VT_MOVETYPE, 4) &&
           VerifyField<float>(verifier, VT_SPEED, 4) &&
           VerifyField<float>(verifier, VT_COLLIDERRADIUS, 4) &&
           VerifyOffset(verifier, VT_MODELSCALE) &&
           verifier.VerifyTable(ModelScale()) &&
           VerifyOffset(verifier, VT_SPLINES) &&
           verifier.VerifyString(Splines()) &&
           VerifyOffset(verifier, VT_CENTERPOSITION) &&
           verifier.VerifyTable(CenterPosition()) &&
           VerifyOffset(verifier, VT_INITMODELROTATION) &&
           verifier.VerifyTable(InitModelRotation()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(Rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(Scale()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           verifier.EndTable();
  }
  MoveRockRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MoveRockRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<MoveRockRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MoveRockRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MoveRockRowBuilder {
  typedef MoveRockRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(MoveRockRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(MoveRockRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_MoveType(fb::NpcMoveType MoveType) {
    fbb_.AddElement<int32_t>(MoveRockRow::VT_MOVETYPE, static_cast<int32_t>(MoveType), 0);
  }
  void add_Speed(float Speed) {
    fbb_.AddElement<float>(MoveRockRow::VT_SPEED, Speed, 0.0f);
  }
  void add_ColliderRadius(float ColliderRadius) {
    fbb_.AddElement<float>(MoveRockRow::VT_COLLIDERRADIUS, ColliderRadius, 0.0f);
  }
  void add_ModelScale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> ModelScale) {
    fbb_.AddOffset(MoveRockRow::VT_MODELSCALE, ModelScale);
  }
  void add_Splines(::flatbuffers::Offset<::flatbuffers::String> Splines) {
    fbb_.AddOffset(MoveRockRow::VT_SPLINES, Splines);
  }
  void add_CenterPosition(::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition) {
    fbb_.AddOffset(MoveRockRow::VT_CENTERPOSITION, CenterPosition);
  }
  void add_InitModelRotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32> InitModelRotation) {
    fbb_.AddOffset(MoveRockRow::VT_INITMODELROTATION, InitModelRotation);
  }
  void add_Rotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation) {
    fbb_.AddOffset(MoveRockRow::VT_ROTATION, Rotation);
  }
  void add_Scale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale) {
    fbb_.AddOffset(MoveRockRow::VT_SCALE, Scale);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(MoveRockRow::VT_PREFABPATH, PrefabPath);
  }
  explicit MoveRockRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MoveRockRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MoveRockRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MoveRockRow> CreateMoveRockRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    fb::NpcMoveType MoveType = fb::NpcMoveType_NONE,
    float Speed = 0.0f,
    float ColliderRadius = 0.0f,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> ModelScale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Splines = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> InitModelRotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0) {
  MoveRockRowBuilder builder_(_fbb);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_Scale(Scale);
  builder_.add_Rotation(Rotation);
  builder_.add_InitModelRotation(InitModelRotation);
  builder_.add_CenterPosition(CenterPosition);
  builder_.add_Splines(Splines);
  builder_.add_ModelScale(ModelScale);
  builder_.add_ColliderRadius(ColliderRadius);
  builder_.add_Speed(Speed);
  builder_.add_MoveType(MoveType);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MoveRockRow> CreateMoveRockRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    fb::NpcMoveType MoveType = fb::NpcMoveType_NONE,
    float Speed = 0.0f,
    float ColliderRadius = 0.0f,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> ModelScale = 0,
    const char *Splines = nullptr,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> InitModelRotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    const char *PrefabPath = nullptr) {
  auto Splines__ = Splines ? _fbb.CreateString(Splines) : 0;
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateMoveRockRow(
      _fbb,
      Id,
      WorldTypeId,
      MoveType,
      Speed,
      ColliderRadius,
      ModelScale,
      Splines__,
      CenterPosition,
      InitModelRotation,
      Rotation,
      Scale,
      PrefabPath__);
}

::flatbuffers::Offset<MoveRockRow> CreateMoveRockRow(::flatbuffers::FlatBufferBuilder &_fbb, const MoveRockRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MoveRockT::MoveRockT(const MoveRockT &o) {
  MoveRocks.reserve(o.MoveRocks.size());
  for (const auto &MoveRocks_ : o.MoveRocks) { MoveRocks.emplace_back((MoveRocks_) ? new fb::MoveRockRowT(*MoveRocks_) : nullptr); }
}

inline MoveRockT &MoveRockT::operator=(MoveRockT o) FLATBUFFERS_NOEXCEPT {
  std::swap(MoveRocks, o.MoveRocks);
  return *this;
}

inline MoveRockT *MoveRock::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MoveRockT>(new MoveRockT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MoveRock::UnPackTo(MoveRockT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = MoveRocks(); if (_e) { _o->MoveRocks.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->MoveRocks[_i]) { _e->Get(_i)->UnPackTo(_o->MoveRocks[_i].get(), _resolver); } else { _o->MoveRocks[_i] = std::unique_ptr<fb::MoveRockRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->MoveRocks.resize(0); } }
}

inline ::flatbuffers::Offset<MoveRock> MoveRock::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MoveRockT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMoveRock(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<MoveRock> CreateMoveRock(::flatbuffers::FlatBufferBuilder &_fbb, const MoveRockT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MoveRockT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _MoveRocks = _o->MoveRocks.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::MoveRockRow>> (_o->MoveRocks.size(), [](size_t i, _VectorArgs *__va) { return CreateMoveRockRow(*__va->__fbb, __va->__o->MoveRocks[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateMoveRock(
      _fbb,
      _MoveRocks);
}

inline MoveRockRowT::MoveRockRowT(const MoveRockRowT &o)
      : Id(o.Id),
        WorldTypeId(o.WorldTypeId),
        MoveType(o.MoveType),
        Speed(o.Speed),
        ColliderRadius(o.ColliderRadius),
        ModelScale((o.ModelScale) ? new fb::tuple_float32_float32_float32T(*o.ModelScale) : nullptr),
        Splines(o.Splines),
        CenterPosition((o.CenterPosition) ? new fb::tuple_float32_float32_float32T(*o.CenterPosition) : nullptr),
        InitModelRotation((o.InitModelRotation) ? new fb::tuple_float32_float32_float32T(*o.InitModelRotation) : nullptr),
        Rotation((o.Rotation) ? new fb::tuple_float32_float32_float32_float32T(*o.Rotation) : nullptr),
        Scale((o.Scale) ? new fb::tuple_float32_float32_float32T(*o.Scale) : nullptr),
        PrefabPath(o.PrefabPath) {
}

inline MoveRockRowT &MoveRockRowT::operator=(MoveRockRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldTypeId, o.WorldTypeId);
  std::swap(MoveType, o.MoveType);
  std::swap(Speed, o.Speed);
  std::swap(ColliderRadius, o.ColliderRadius);
  std::swap(ModelScale, o.ModelScale);
  std::swap(Splines, o.Splines);
  std::swap(CenterPosition, o.CenterPosition);
  std::swap(InitModelRotation, o.InitModelRotation);
  std::swap(Rotation, o.Rotation);
  std::swap(Scale, o.Scale);
  std::swap(PrefabPath, o.PrefabPath);
  return *this;
}

inline MoveRockRowT *MoveRockRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MoveRockRowT>(new MoveRockRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MoveRockRow::UnPackTo(MoveRockRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = MoveType(); _o->MoveType = _e; }
  { auto _e = Speed(); _o->Speed = _e; }
  { auto _e = ColliderRadius(); _o->ColliderRadius = _e; }
  { auto _e = ModelScale(); if (_e) { if(_o->ModelScale) { _e->UnPackTo(_o->ModelScale.get(), _resolver); } else { _o->ModelScale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->ModelScale) { _o->ModelScale.reset(); } }
  { auto _e = Splines(); if (_e) _o->Splines = _e->str(); }
  { auto _e = CenterPosition(); if (_e) { if(_o->CenterPosition) { _e->UnPackTo(_o->CenterPosition.get(), _resolver); } else { _o->CenterPosition = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->CenterPosition) { _o->CenterPosition.reset(); } }
  { auto _e = InitModelRotation(); if (_e) { if(_o->InitModelRotation) { _e->UnPackTo(_o->InitModelRotation.get(), _resolver); } else { _o->InitModelRotation = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->InitModelRotation) { _o->InitModelRotation.reset(); } }
  { auto _e = Rotation(); if (_e) { if(_o->Rotation) { _e->UnPackTo(_o->Rotation.get(), _resolver); } else { _o->Rotation = std::unique_ptr<fb::tuple_float32_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Rotation) { _o->Rotation.reset(); } }
  { auto _e = Scale(); if (_e) { if(_o->Scale) { _e->UnPackTo(_o->Scale.get(), _resolver); } else { _o->Scale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Scale) { _o->Scale.reset(); } }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
}

inline ::flatbuffers::Offset<MoveRockRow> MoveRockRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MoveRockRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMoveRockRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<MoveRockRow> CreateMoveRockRow(::flatbuffers::FlatBufferBuilder &_fbb, const MoveRockRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MoveRockRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _MoveType = _o->MoveType;
  auto _Speed = _o->Speed;
  auto _ColliderRadius = _o->ColliderRadius;
  auto _ModelScale = _o->ModelScale ? Createtuple_float32_float32_float32(_fbb, _o->ModelScale.get(), _rehasher) : 0;
  auto _Splines = _o->Splines.empty() ? 0 : _fbb.CreateString(_o->Splines);
  auto _CenterPosition = _o->CenterPosition ? Createtuple_float32_float32_float32(_fbb, _o->CenterPosition.get(), _rehasher) : 0;
  auto _InitModelRotation = _o->InitModelRotation ? Createtuple_float32_float32_float32(_fbb, _o->InitModelRotation.get(), _rehasher) : 0;
  auto _Rotation = _o->Rotation ? Createtuple_float32_float32_float32_float32(_fbb, _o->Rotation.get(), _rehasher) : 0;
  auto _Scale = _o->Scale ? Createtuple_float32_float32_float32(_fbb, _o->Scale.get(), _rehasher) : 0;
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  return fb::CreateMoveRockRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _MoveType,
      _Speed,
      _ColliderRadius,
      _ModelScale,
      _Splines,
      _CenterPosition,
      _InitModelRotation,
      _Rotation,
      _Scale,
      _PrefabPath);
}

inline const fb::MoveRock *GetMoveRock(const void *buf) {
  return ::flatbuffers::GetRoot<fb::MoveRock>(buf);
}

inline const fb::MoveRock *GetSizePrefixedMoveRock(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::MoveRock>(buf);
}

inline bool VerifyMoveRockBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::MoveRock>(nullptr);
}

inline bool VerifySizePrefixedMoveRockBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::MoveRock>(nullptr);
}

inline void FinishMoveRockBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::MoveRock> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMoveRockBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::MoveRock> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::MoveRockT> UnPackMoveRock(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::MoveRockT>(GetMoveRock(buf)->UnPack(res));
}

inline std::unique_ptr<fb::MoveRockT> UnPackSizePrefixedMoveRock(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::MoveRockT>(GetSizePrefixedMoveRock(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_MOVEROCK_FB_H_
