// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ANIMALZONE_FB_H_
#define FLATBUFFERS_GENERATED_ANIMALZONE_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct AnimalZone;
struct AnimalZoneBuilder;
struct AnimalZoneT;

struct AnimalZoneRow;
struct AnimalZoneRowBuilder;
struct AnimalZoneRowT;

struct AnimalZoneT : public ::flatbuffers::NativeTable {
  typedef AnimalZone TableType;
  std::vector<std::unique_ptr<fb::AnimalZoneRowT>> AnimalZones{};
  AnimalZoneT() = default;
  AnimalZoneT(const AnimalZoneT &o);
  AnimalZoneT(AnimalZoneT&&) FLATBUFFERS_NOEXCEPT = default;
  AnimalZoneT &operator=(AnimalZoneT o) FLATBUFFERS_NOEXCEPT;
};

struct AnimalZone FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AnimalZoneT NativeTableType;
  typedef AnimalZoneBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANIMALZONES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AnimalZoneRow>> *AnimalZones() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AnimalZoneRow>> *>(VT_ANIMALZONES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ANIMALZONES) &&
           verifier.VerifyVector(AnimalZones()) &&
           verifier.VerifyVectorOfTables(AnimalZones()) &&
           verifier.EndTable();
  }
  AnimalZoneT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AnimalZoneT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AnimalZone> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalZoneT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AnimalZoneBuilder {
  typedef AnimalZone Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_AnimalZones(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AnimalZoneRow>>> AnimalZones) {
    fbb_.AddOffset(AnimalZone::VT_ANIMALZONES, AnimalZones);
  }
  explicit AnimalZoneBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AnimalZone> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AnimalZone>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AnimalZone> CreateAnimalZone(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AnimalZoneRow>>> AnimalZones = 0) {
  AnimalZoneBuilder builder_(_fbb);
  builder_.add_AnimalZones(AnimalZones);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AnimalZone> CreateAnimalZoneDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::AnimalZoneRow>> *AnimalZones = nullptr) {
  auto AnimalZones__ = AnimalZones ? _fbb.CreateVector<::flatbuffers::Offset<fb::AnimalZoneRow>>(*AnimalZones) : 0;
  return fb::CreateAnimalZone(
      _fbb,
      AnimalZones__);
}

::flatbuffers::Offset<AnimalZone> CreateAnimalZone(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalZoneT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AnimalZoneRowT : public ::flatbuffers::NativeTable {
  typedef AnimalZoneRow TableType;
  uint32_t Id = 0;
  uint32_t WorldId = 0;
  std::string NavMeshDataPath{};
};

struct AnimalZoneRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AnimalZoneRowT NativeTableType;
  typedef AnimalZoneRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDID = 6,
    VT_NAVMESHDATAPATH = 8
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t WorldId() const {
    return GetField<uint32_t>(VT_WORLDID, 0);
  }
  const ::flatbuffers::String *NavMeshDataPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAVMESHDATAPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDID, 4) &&
           VerifyOffset(verifier, VT_NAVMESHDATAPATH) &&
           verifier.VerifyString(NavMeshDataPath()) &&
           verifier.EndTable();
  }
  AnimalZoneRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AnimalZoneRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AnimalZoneRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalZoneRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AnimalZoneRowBuilder {
  typedef AnimalZoneRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(AnimalZoneRow::VT_ID, Id, 0);
  }
  void add_WorldId(uint32_t WorldId) {
    fbb_.AddElement<uint32_t>(AnimalZoneRow::VT_WORLDID, WorldId, 0);
  }
  void add_NavMeshDataPath(::flatbuffers::Offset<::flatbuffers::String> NavMeshDataPath) {
    fbb_.AddOffset(AnimalZoneRow::VT_NAVMESHDATAPATH, NavMeshDataPath);
  }
  explicit AnimalZoneRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AnimalZoneRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AnimalZoneRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AnimalZoneRow> CreateAnimalZoneRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> NavMeshDataPath = 0) {
  AnimalZoneRowBuilder builder_(_fbb);
  builder_.add_NavMeshDataPath(NavMeshDataPath);
  builder_.add_WorldId(WorldId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AnimalZoneRow> CreateAnimalZoneRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldId = 0,
    const char *NavMeshDataPath = nullptr) {
  auto NavMeshDataPath__ = NavMeshDataPath ? _fbb.CreateString(NavMeshDataPath) : 0;
  return fb::CreateAnimalZoneRow(
      _fbb,
      Id,
      WorldId,
      NavMeshDataPath__);
}

::flatbuffers::Offset<AnimalZoneRow> CreateAnimalZoneRow(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalZoneRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AnimalZoneT::AnimalZoneT(const AnimalZoneT &o) {
  AnimalZones.reserve(o.AnimalZones.size());
  for (const auto &AnimalZones_ : o.AnimalZones) { AnimalZones.emplace_back((AnimalZones_) ? new fb::AnimalZoneRowT(*AnimalZones_) : nullptr); }
}

inline AnimalZoneT &AnimalZoneT::operator=(AnimalZoneT o) FLATBUFFERS_NOEXCEPT {
  std::swap(AnimalZones, o.AnimalZones);
  return *this;
}

inline AnimalZoneT *AnimalZone::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AnimalZoneT>(new AnimalZoneT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AnimalZone::UnPackTo(AnimalZoneT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = AnimalZones(); if (_e) { _o->AnimalZones.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->AnimalZones[_i]) { _e->Get(_i)->UnPackTo(_o->AnimalZones[_i].get(), _resolver); } else { _o->AnimalZones[_i] = std::unique_ptr<fb::AnimalZoneRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->AnimalZones.resize(0); } }
}

inline ::flatbuffers::Offset<AnimalZone> AnimalZone::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalZoneT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAnimalZone(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AnimalZone> CreateAnimalZone(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalZoneT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AnimalZoneT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _AnimalZones = _o->AnimalZones.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::AnimalZoneRow>> (_o->AnimalZones.size(), [](size_t i, _VectorArgs *__va) { return CreateAnimalZoneRow(*__va->__fbb, __va->__o->AnimalZones[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAnimalZone(
      _fbb,
      _AnimalZones);
}

inline AnimalZoneRowT *AnimalZoneRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AnimalZoneRowT>(new AnimalZoneRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AnimalZoneRow::UnPackTo(AnimalZoneRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldId(); _o->WorldId = _e; }
  { auto _e = NavMeshDataPath(); if (_e) _o->NavMeshDataPath = _e->str(); }
}

inline ::flatbuffers::Offset<AnimalZoneRow> AnimalZoneRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalZoneRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAnimalZoneRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AnimalZoneRow> CreateAnimalZoneRow(::flatbuffers::FlatBufferBuilder &_fbb, const AnimalZoneRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AnimalZoneRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldId = _o->WorldId;
  auto _NavMeshDataPath = _o->NavMeshDataPath.empty() ? 0 : _fbb.CreateString(_o->NavMeshDataPath);
  return fb::CreateAnimalZoneRow(
      _fbb,
      _Id,
      _WorldId,
      _NavMeshDataPath);
}

inline const fb::AnimalZone *GetAnimalZone(const void *buf) {
  return ::flatbuffers::GetRoot<fb::AnimalZone>(buf);
}

inline const fb::AnimalZone *GetSizePrefixedAnimalZone(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::AnimalZone>(buf);
}

inline bool VerifyAnimalZoneBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::AnimalZone>(nullptr);
}

inline bool VerifySizePrefixedAnimalZoneBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::AnimalZone>(nullptr);
}

inline void FinishAnimalZoneBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AnimalZone> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAnimalZoneBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AnimalZone> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::AnimalZoneT> UnPackAnimalZone(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AnimalZoneT>(GetAnimalZone(buf)->UnPack(res));
}

inline std::unique_ptr<fb::AnimalZoneT> UnPackSizePrefixedAnimalZone(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AnimalZoneT>(GetSizePrefixedAnimalZone(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_ANIMALZONE_FB_H_
