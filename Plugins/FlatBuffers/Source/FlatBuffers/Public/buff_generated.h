// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BUFF_FB_H_
#define FLATBUFFERS_GENERATED_BUFF_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Buff;
struct BuffBuilder;
struct BuffT;

struct BuffRow;
struct BuffRowBuilder;
struct BuffRowT;

struct BuffT : public ::flatbuffers::NativeTable {
  typedef Buff TableType;
  std::vector<std::unique_ptr<fb::BuffRowT>> Buffs{};
  BuffT() = default;
  BuffT(const BuffT &o);
  BuffT(BuffT&&) FLATBUFFERS_NOEXCEPT = default;
  BuffT &operator=(BuffT o) FLATBUFFERS_NOEXCEPT;
};

struct Buff FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BuffT NativeTableType;
  typedef BuffBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUFFS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffRow>> *Buffs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffRow>> *>(VT_BUFFS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUFFS) &&
           verifier.VerifyVector(Buffs()) &&
           verifier.VerifyVectorOfTables(Buffs()) &&
           verifier.EndTable();
  }
  BuffT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BuffT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Buff> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BuffT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BuffBuilder {
  typedef Buff Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Buffs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffRow>>> Buffs) {
    fbb_.AddOffset(Buff::VT_BUFFS, Buffs);
  }
  explicit BuffBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Buff> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Buff>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Buff> CreateBuff(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::BuffRow>>> Buffs = 0) {
  BuffBuilder builder_(_fbb);
  builder_.add_Buffs(Buffs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Buff> CreateBuffDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::BuffRow>> *Buffs = nullptr) {
  auto Buffs__ = Buffs ? _fbb.CreateVector<::flatbuffers::Offset<fb::BuffRow>>(*Buffs) : 0;
  return fb::CreateBuff(
      _fbb,
      Buffs__);
}

::flatbuffers::Offset<Buff> CreateBuff(::flatbuffers::FlatBufferBuilder &_fbb, const BuffT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct BuffRowT : public ::flatbuffers::NativeTable {
  typedef BuffRow TableType;
  uint32_t Id = 0;
  fb::BuffType Type = fb::BuffType_NONE;
  bool Standing = false;
  std::vector<float> EffectParams{};
};

struct BuffRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BuffRowT NativeTableType;
  typedef BuffRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_STANDING = 8,
    VT_EFFECTPARAMS = 10
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  fb::BuffType Type() const {
    return static_cast<fb::BuffType>(GetField<int32_t>(VT_TYPE, 0));
  }
  bool Standing() const {
    return GetField<uint8_t>(VT_STANDING, 0) != 0;
  }
  const ::flatbuffers::Vector<float> *EffectParams() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_EFFECTPARAMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_TYPE, 4) &&
           VerifyField<uint8_t>(verifier, VT_STANDING, 1) &&
           VerifyOffset(verifier, VT_EFFECTPARAMS) &&
           verifier.VerifyVector(EffectParams()) &&
           verifier.EndTable();
  }
  BuffRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(BuffRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<BuffRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BuffRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BuffRowBuilder {
  typedef BuffRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(BuffRow::VT_ID, Id, 0);
  }
  void add_Type(fb::BuffType Type) {
    fbb_.AddElement<int32_t>(BuffRow::VT_TYPE, static_cast<int32_t>(Type), 0);
  }
  void add_Standing(bool Standing) {
    fbb_.AddElement<uint8_t>(BuffRow::VT_STANDING, static_cast<uint8_t>(Standing), 0);
  }
  void add_EffectParams(::flatbuffers::Offset<::flatbuffers::Vector<float>> EffectParams) {
    fbb_.AddOffset(BuffRow::VT_EFFECTPARAMS, EffectParams);
  }
  explicit BuffRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BuffRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BuffRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BuffRow> CreateBuffRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    fb::BuffType Type = fb::BuffType_NONE,
    bool Standing = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> EffectParams = 0) {
  BuffRowBuilder builder_(_fbb);
  builder_.add_EffectParams(EffectParams);
  builder_.add_Type(Type);
  builder_.add_Id(Id);
  builder_.add_Standing(Standing);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BuffRow> CreateBuffRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    fb::BuffType Type = fb::BuffType_NONE,
    bool Standing = false,
    const std::vector<float> *EffectParams = nullptr) {
  auto EffectParams__ = EffectParams ? _fbb.CreateVector<float>(*EffectParams) : 0;
  return fb::CreateBuffRow(
      _fbb,
      Id,
      Type,
      Standing,
      EffectParams__);
}

::flatbuffers::Offset<BuffRow> CreateBuffRow(::flatbuffers::FlatBufferBuilder &_fbb, const BuffRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BuffT::BuffT(const BuffT &o) {
  Buffs.reserve(o.Buffs.size());
  for (const auto &Buffs_ : o.Buffs) { Buffs.emplace_back((Buffs_) ? new fb::BuffRowT(*Buffs_) : nullptr); }
}

inline BuffT &BuffT::operator=(BuffT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Buffs, o.Buffs);
  return *this;
}

inline BuffT *Buff::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BuffT>(new BuffT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Buff::UnPackTo(BuffT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Buffs(); if (_e) { _o->Buffs.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Buffs[_i]) { _e->Get(_i)->UnPackTo(_o->Buffs[_i].get(), _resolver); } else { _o->Buffs[_i] = std::unique_ptr<fb::BuffRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Buffs.resize(0); } }
}

inline ::flatbuffers::Offset<Buff> Buff::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BuffT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBuff(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Buff> CreateBuff(::flatbuffers::FlatBufferBuilder &_fbb, const BuffT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const BuffT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Buffs = _o->Buffs.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::BuffRow>> (_o->Buffs.size(), [](size_t i, _VectorArgs *__va) { return CreateBuffRow(*__va->__fbb, __va->__o->Buffs[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateBuff(
      _fbb,
      _Buffs);
}

inline BuffRowT *BuffRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<BuffRowT>(new BuffRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void BuffRow::UnPackTo(BuffRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Type(); _o->Type = _e; }
  { auto _e = Standing(); _o->Standing = _e; }
  { auto _e = EffectParams(); if (_e) { _o->EffectParams.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->EffectParams[_i] = _e->Get(_i); } } else { _o->EffectParams.resize(0); } }
}

inline ::flatbuffers::Offset<BuffRow> BuffRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const BuffRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBuffRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<BuffRow> CreateBuffRow(::flatbuffers::FlatBufferBuilder &_fbb, const BuffRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const BuffRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Type = _o->Type;
  auto _Standing = _o->Standing;
  auto _EffectParams = _o->EffectParams.size() ? _fbb.CreateVector(_o->EffectParams) : 0;
  return fb::CreateBuffRow(
      _fbb,
      _Id,
      _Type,
      _Standing,
      _EffectParams);
}

inline const fb::Buff *GetBuff(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Buff>(buf);
}

inline const fb::Buff *GetSizePrefixedBuff(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Buff>(buf);
}

inline bool VerifyBuffBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Buff>(nullptr);
}

inline bool VerifySizePrefixedBuffBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Buff>(nullptr);
}

inline void FinishBuffBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Buff> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBuffBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Buff> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::BuffT> UnPackBuff(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::BuffT>(GetBuff(buf)->UnPack(res));
}

inline std::unique_ptr<fb::BuffT> UnPackSizePrefixedBuff(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::BuffT>(GetSizePrefixedBuff(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_BUFF_FB_H_
