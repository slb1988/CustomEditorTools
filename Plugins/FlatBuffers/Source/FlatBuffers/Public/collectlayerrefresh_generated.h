// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COLLECTLAYERREFRESH_FB_H_
#define FLATBUFFERS_GENERATED_COLLECTLAYERREFRESH_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct CollectLayerRefresh;
struct CollectLayerRefreshBuilder;
struct CollectLayerRefreshT;

struct CollectLayerRefreshRow;
struct CollectLayerRefreshRowBuilder;
struct CollectLayerRefreshRowT;

struct CollectLayerRefreshT : public ::flatbuffers::NativeTable {
  typedef CollectLayerRefresh TableType;
  std::vector<std::unique_ptr<fb::CollectLayerRefreshRowT>> CollectLayerRefreshs{};
  CollectLayerRefreshT() = default;
  CollectLayerRefreshT(const CollectLayerRefreshT &o);
  CollectLayerRefreshT(CollectLayerRefreshT&&) FLATBUFFERS_NOEXCEPT = default;
  CollectLayerRefreshT &operator=(CollectLayerRefreshT o) FLATBUFFERS_NOEXCEPT;
};

struct CollectLayerRefresh FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CollectLayerRefreshT NativeTableType;
  typedef CollectLayerRefreshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COLLECTLAYERREFRESHS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectLayerRefreshRow>> *CollectLayerRefreshs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectLayerRefreshRow>> *>(VT_COLLECTLAYERREFRESHS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COLLECTLAYERREFRESHS) &&
           verifier.VerifyVector(CollectLayerRefreshs()) &&
           verifier.VerifyVectorOfTables(CollectLayerRefreshs()) &&
           verifier.EndTable();
  }
  CollectLayerRefreshT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CollectLayerRefreshT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CollectLayerRefresh> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectLayerRefreshT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CollectLayerRefreshBuilder {
  typedef CollectLayerRefresh Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_CollectLayerRefreshs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectLayerRefreshRow>>> CollectLayerRefreshs) {
    fbb_.AddOffset(CollectLayerRefresh::VT_COLLECTLAYERREFRESHS, CollectLayerRefreshs);
  }
  explicit CollectLayerRefreshBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CollectLayerRefresh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CollectLayerRefresh>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CollectLayerRefresh> CreateCollectLayerRefresh(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectLayerRefreshRow>>> CollectLayerRefreshs = 0) {
  CollectLayerRefreshBuilder builder_(_fbb);
  builder_.add_CollectLayerRefreshs(CollectLayerRefreshs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CollectLayerRefresh> CreateCollectLayerRefreshDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::CollectLayerRefreshRow>> *CollectLayerRefreshs = nullptr) {
  auto CollectLayerRefreshs__ = CollectLayerRefreshs ? _fbb.CreateVectorOfSortedTables<fb::CollectLayerRefreshRow>(CollectLayerRefreshs) : 0;
  return fb::CreateCollectLayerRefresh(
      _fbb,
      CollectLayerRefreshs__);
}

::flatbuffers::Offset<CollectLayerRefresh> CreateCollectLayerRefresh(::flatbuffers::FlatBufferBuilder &_fbb, const CollectLayerRefreshT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CollectLayerRefreshRowT : public ::flatbuffers::NativeTable {
  typedef CollectLayerRefreshRow TableType;
  uint32_t Id = 0;
};

struct CollectLayerRefreshRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CollectLayerRefreshRowT NativeTableType;
  typedef CollectLayerRefreshRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const CollectLayerRefreshRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           verifier.EndTable();
  }
  CollectLayerRefreshRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CollectLayerRefreshRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CollectLayerRefreshRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectLayerRefreshRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CollectLayerRefreshRowBuilder {
  typedef CollectLayerRefreshRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(CollectLayerRefreshRow::VT_ID, Id, 0);
  }
  explicit CollectLayerRefreshRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CollectLayerRefreshRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CollectLayerRefreshRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CollectLayerRefreshRow> CreateCollectLayerRefreshRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0) {
  CollectLayerRefreshRowBuilder builder_(_fbb);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<CollectLayerRefreshRow> CreateCollectLayerRefreshRow(::flatbuffers::FlatBufferBuilder &_fbb, const CollectLayerRefreshRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CollectLayerRefreshT::CollectLayerRefreshT(const CollectLayerRefreshT &o) {
  CollectLayerRefreshs.reserve(o.CollectLayerRefreshs.size());
  for (const auto &CollectLayerRefreshs_ : o.CollectLayerRefreshs) { CollectLayerRefreshs.emplace_back((CollectLayerRefreshs_) ? new fb::CollectLayerRefreshRowT(*CollectLayerRefreshs_) : nullptr); }
}

inline CollectLayerRefreshT &CollectLayerRefreshT::operator=(CollectLayerRefreshT o) FLATBUFFERS_NOEXCEPT {
  std::swap(CollectLayerRefreshs, o.CollectLayerRefreshs);
  return *this;
}

inline CollectLayerRefreshT *CollectLayerRefresh::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CollectLayerRefreshT>(new CollectLayerRefreshT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CollectLayerRefresh::UnPackTo(CollectLayerRefreshT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = CollectLayerRefreshs(); if (_e) { _o->CollectLayerRefreshs.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->CollectLayerRefreshs[_i]) { _e->Get(_i)->UnPackTo(_o->CollectLayerRefreshs[_i].get(), _resolver); } else { _o->CollectLayerRefreshs[_i] = std::unique_ptr<fb::CollectLayerRefreshRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->CollectLayerRefreshs.resize(0); } }
}

inline ::flatbuffers::Offset<CollectLayerRefresh> CollectLayerRefresh::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectLayerRefreshT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCollectLayerRefresh(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CollectLayerRefresh> CreateCollectLayerRefresh(::flatbuffers::FlatBufferBuilder &_fbb, const CollectLayerRefreshT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CollectLayerRefreshT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _CollectLayerRefreshs = _o->CollectLayerRefreshs.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::CollectLayerRefreshRow>> (_o->CollectLayerRefreshs.size(), [](size_t i, _VectorArgs *__va) { return CreateCollectLayerRefreshRow(*__va->__fbb, __va->__o->CollectLayerRefreshs[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateCollectLayerRefresh(
      _fbb,
      _CollectLayerRefreshs);
}

inline CollectLayerRefreshRowT *CollectLayerRefreshRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CollectLayerRefreshRowT>(new CollectLayerRefreshRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CollectLayerRefreshRow::UnPackTo(CollectLayerRefreshRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
}

inline ::flatbuffers::Offset<CollectLayerRefreshRow> CollectLayerRefreshRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectLayerRefreshRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCollectLayerRefreshRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CollectLayerRefreshRow> CreateCollectLayerRefreshRow(::flatbuffers::FlatBufferBuilder &_fbb, const CollectLayerRefreshRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CollectLayerRefreshRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  return fb::CreateCollectLayerRefreshRow(
      _fbb,
      _Id);
}

inline const fb::CollectLayerRefresh *GetCollectLayerRefresh(const void *buf) {
  return ::flatbuffers::GetRoot<fb::CollectLayerRefresh>(buf);
}

inline const fb::CollectLayerRefresh *GetSizePrefixedCollectLayerRefresh(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::CollectLayerRefresh>(buf);
}

inline bool VerifyCollectLayerRefreshBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::CollectLayerRefresh>(nullptr);
}

inline bool VerifySizePrefixedCollectLayerRefreshBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::CollectLayerRefresh>(nullptr);
}

inline void FinishCollectLayerRefreshBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::CollectLayerRefresh> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCollectLayerRefreshBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::CollectLayerRefresh> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::CollectLayerRefreshT> UnPackCollectLayerRefresh(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::CollectLayerRefreshT>(GetCollectLayerRefresh(buf)->UnPack(res));
}

inline std::unique_ptr<fb::CollectLayerRefreshT> UnPackSizePrefixedCollectLayerRefresh(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::CollectLayerRefreshT>(GetSizePrefixedCollectLayerRefresh(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_COLLECTLAYERREFRESH_FB_H_
