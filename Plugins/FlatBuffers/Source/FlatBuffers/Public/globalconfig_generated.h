// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GLOBALCONFIG_FB_H_
#define FLATBUFFERS_GENERATED_GLOBALCONFIG_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct GlobalConfig;
struct GlobalConfigBuilder;
struct GlobalConfigT;

struct GlobalConfigT : public ::flatbuffers::NativeTable {
  typedef GlobalConfig TableType;
  std::unique_ptr<fb::tuple_int32_int32T> PlayerNameLen{};
  uint32_t ChatMsgMaxLen = 0;
  std::unique_ptr<fb::tuple_uint32_uint32T> EnergyRecover{};
  int64_t ChatInputtingTimeout = 0;
  uint32_t MaxSceneCoinGenerateRound = 0;
  int32_t MaxPlaceableStarNum = 0;
  GlobalConfigT() = default;
  GlobalConfigT(const GlobalConfigT &o);
  GlobalConfigT(GlobalConfigT&&) FLATBUFFERS_NOEXCEPT = default;
  GlobalConfigT &operator=(GlobalConfigT o) FLATBUFFERS_NOEXCEPT;
};

struct GlobalConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GlobalConfigT NativeTableType;
  typedef GlobalConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYERNAMELEN = 4,
    VT_CHATMSGMAXLEN = 6,
    VT_ENERGYRECOVER = 8,
    VT_CHATINPUTTINGTIMEOUT = 10,
    VT_MAXSCENECOINGENERATEROUND = 12,
    VT_MAXPLACEABLESTARNUM = 14
  };
  const fb::tuple_int32_int32 *PlayerNameLen() const {
    return GetPointer<const fb::tuple_int32_int32 *>(VT_PLAYERNAMELEN);
  }
  uint32_t ChatMsgMaxLen() const {
    return GetField<uint32_t>(VT_CHATMSGMAXLEN, 0);
  }
  const fb::tuple_uint32_uint32 *EnergyRecover() const {
    return GetPointer<const fb::tuple_uint32_uint32 *>(VT_ENERGYRECOVER);
  }
  int64_t ChatInputtingTimeout() const {
    return GetField<int64_t>(VT_CHATINPUTTINGTIMEOUT, 0);
  }
  uint32_t MaxSceneCoinGenerateRound() const {
    return GetField<uint32_t>(VT_MAXSCENECOINGENERATEROUND, 0);
  }
  int32_t MaxPlaceableStarNum() const {
    return GetField<int32_t>(VT_MAXPLACEABLESTARNUM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLAYERNAMELEN) &&
           verifier.VerifyTable(PlayerNameLen()) &&
           VerifyField<uint32_t>(verifier, VT_CHATMSGMAXLEN, 4) &&
           VerifyOffset(verifier, VT_ENERGYRECOVER) &&
           verifier.VerifyTable(EnergyRecover()) &&
           VerifyField<int64_t>(verifier, VT_CHATINPUTTINGTIMEOUT, 8) &&
           VerifyField<uint32_t>(verifier, VT_MAXSCENECOINGENERATEROUND, 4) &&
           VerifyField<int32_t>(verifier, VT_MAXPLACEABLESTARNUM, 4) &&
           verifier.EndTable();
  }
  GlobalConfigT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GlobalConfigT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<GlobalConfig> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GlobalConfigT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GlobalConfigBuilder {
  typedef GlobalConfig Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_PlayerNameLen(::flatbuffers::Offset<fb::tuple_int32_int32> PlayerNameLen) {
    fbb_.AddOffset(GlobalConfig::VT_PLAYERNAMELEN, PlayerNameLen);
  }
  void add_ChatMsgMaxLen(uint32_t ChatMsgMaxLen) {
    fbb_.AddElement<uint32_t>(GlobalConfig::VT_CHATMSGMAXLEN, ChatMsgMaxLen, 0);
  }
  void add_EnergyRecover(::flatbuffers::Offset<fb::tuple_uint32_uint32> EnergyRecover) {
    fbb_.AddOffset(GlobalConfig::VT_ENERGYRECOVER, EnergyRecover);
  }
  void add_ChatInputtingTimeout(int64_t ChatInputtingTimeout) {
    fbb_.AddElement<int64_t>(GlobalConfig::VT_CHATINPUTTINGTIMEOUT, ChatInputtingTimeout, 0);
  }
  void add_MaxSceneCoinGenerateRound(uint32_t MaxSceneCoinGenerateRound) {
    fbb_.AddElement<uint32_t>(GlobalConfig::VT_MAXSCENECOINGENERATEROUND, MaxSceneCoinGenerateRound, 0);
  }
  void add_MaxPlaceableStarNum(int32_t MaxPlaceableStarNum) {
    fbb_.AddElement<int32_t>(GlobalConfig::VT_MAXPLACEABLESTARNUM, MaxPlaceableStarNum, 0);
  }
  explicit GlobalConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GlobalConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GlobalConfig>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GlobalConfig> CreateGlobalConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<fb::tuple_int32_int32> PlayerNameLen = 0,
    uint32_t ChatMsgMaxLen = 0,
    ::flatbuffers::Offset<fb::tuple_uint32_uint32> EnergyRecover = 0,
    int64_t ChatInputtingTimeout = 0,
    uint32_t MaxSceneCoinGenerateRound = 0,
    int32_t MaxPlaceableStarNum = 0) {
  GlobalConfigBuilder builder_(_fbb);
  builder_.add_ChatInputtingTimeout(ChatInputtingTimeout);
  builder_.add_MaxPlaceableStarNum(MaxPlaceableStarNum);
  builder_.add_MaxSceneCoinGenerateRound(MaxSceneCoinGenerateRound);
  builder_.add_EnergyRecover(EnergyRecover);
  builder_.add_ChatMsgMaxLen(ChatMsgMaxLen);
  builder_.add_PlayerNameLen(PlayerNameLen);
  return builder_.Finish();
}

::flatbuffers::Offset<GlobalConfig> CreateGlobalConfig(::flatbuffers::FlatBufferBuilder &_fbb, const GlobalConfigT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GlobalConfigT::GlobalConfigT(const GlobalConfigT &o)
      : PlayerNameLen((o.PlayerNameLen) ? new fb::tuple_int32_int32T(*o.PlayerNameLen) : nullptr),
        ChatMsgMaxLen(o.ChatMsgMaxLen),
        EnergyRecover((o.EnergyRecover) ? new fb::tuple_uint32_uint32T(*o.EnergyRecover) : nullptr),
        ChatInputtingTimeout(o.ChatInputtingTimeout),
        MaxSceneCoinGenerateRound(o.MaxSceneCoinGenerateRound),
        MaxPlaceableStarNum(o.MaxPlaceableStarNum) {
}

inline GlobalConfigT &GlobalConfigT::operator=(GlobalConfigT o) FLATBUFFERS_NOEXCEPT {
  std::swap(PlayerNameLen, o.PlayerNameLen);
  std::swap(ChatMsgMaxLen, o.ChatMsgMaxLen);
  std::swap(EnergyRecover, o.EnergyRecover);
  std::swap(ChatInputtingTimeout, o.ChatInputtingTimeout);
  std::swap(MaxSceneCoinGenerateRound, o.MaxSceneCoinGenerateRound);
  std::swap(MaxPlaceableStarNum, o.MaxPlaceableStarNum);
  return *this;
}

inline GlobalConfigT *GlobalConfig::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GlobalConfigT>(new GlobalConfigT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GlobalConfig::UnPackTo(GlobalConfigT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = PlayerNameLen(); if (_e) { if(_o->PlayerNameLen) { _e->UnPackTo(_o->PlayerNameLen.get(), _resolver); } else { _o->PlayerNameLen = std::unique_ptr<fb::tuple_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->PlayerNameLen) { _o->PlayerNameLen.reset(); } }
  { auto _e = ChatMsgMaxLen(); _o->ChatMsgMaxLen = _e; }
  { auto _e = EnergyRecover(); if (_e) { if(_o->EnergyRecover) { _e->UnPackTo(_o->EnergyRecover.get(), _resolver); } else { _o->EnergyRecover = std::unique_ptr<fb::tuple_uint32_uint32T>(_e->UnPack(_resolver)); } } else if (_o->EnergyRecover) { _o->EnergyRecover.reset(); } }
  { auto _e = ChatInputtingTimeout(); _o->ChatInputtingTimeout = _e; }
  { auto _e = MaxSceneCoinGenerateRound(); _o->MaxSceneCoinGenerateRound = _e; }
  { auto _e = MaxPlaceableStarNum(); _o->MaxPlaceableStarNum = _e; }
}

inline ::flatbuffers::Offset<GlobalConfig> GlobalConfig::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GlobalConfigT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGlobalConfig(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<GlobalConfig> CreateGlobalConfig(::flatbuffers::FlatBufferBuilder &_fbb, const GlobalConfigT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const GlobalConfigT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _PlayerNameLen = _o->PlayerNameLen ? Createtuple_int32_int32(_fbb, _o->PlayerNameLen.get(), _rehasher) : 0;
  auto _ChatMsgMaxLen = _o->ChatMsgMaxLen;
  auto _EnergyRecover = _o->EnergyRecover ? Createtuple_uint32_uint32(_fbb, _o->EnergyRecover.get(), _rehasher) : 0;
  auto _ChatInputtingTimeout = _o->ChatInputtingTimeout;
  auto _MaxSceneCoinGenerateRound = _o->MaxSceneCoinGenerateRound;
  auto _MaxPlaceableStarNum = _o->MaxPlaceableStarNum;
  return fb::CreateGlobalConfig(
      _fbb,
      _PlayerNameLen,
      _ChatMsgMaxLen,
      _EnergyRecover,
      _ChatInputtingTimeout,
      _MaxSceneCoinGenerateRound,
      _MaxPlaceableStarNum);
}

inline const fb::GlobalConfig *GetGlobalConfig(const void *buf) {
  return ::flatbuffers::GetRoot<fb::GlobalConfig>(buf);
}

inline const fb::GlobalConfig *GetSizePrefixedGlobalConfig(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::GlobalConfig>(buf);
}

inline bool VerifyGlobalConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::GlobalConfig>(nullptr);
}

inline bool VerifySizePrefixedGlobalConfigBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::GlobalConfig>(nullptr);
}

inline void FinishGlobalConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::GlobalConfig> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGlobalConfigBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::GlobalConfig> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::GlobalConfigT> UnPackGlobalConfig(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::GlobalConfigT>(GetGlobalConfig(buf)->UnPack(res));
}

inline std::unique_ptr<fb::GlobalConfigT> UnPackSizePrefixedGlobalConfig(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::GlobalConfigT>(GetSizePrefixedGlobalConfig(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_GLOBALCONFIG_FB_H_
