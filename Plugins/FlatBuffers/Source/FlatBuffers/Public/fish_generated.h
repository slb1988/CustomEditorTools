// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FISH_FB_H_
#define FLATBUFFERS_GENERATED_FISH_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Fish;
struct FishBuilder;
struct FishT;

struct FishRow;
struct FishRowBuilder;
struct FishRowT;

struct FishT : public ::flatbuffers::NativeTable {
  typedef Fish TableType;
  std::vector<std::unique_ptr<fb::FishRowT>> Fishs{};
  FishT() = default;
  FishT(const FishT &o);
  FishT(FishT&&) FLATBUFFERS_NOEXCEPT = default;
  FishT &operator=(FishT o) FLATBUFFERS_NOEXCEPT;
};

struct Fish FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FishT NativeTableType;
  typedef FishBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FISHS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::FishRow>> *Fishs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::FishRow>> *>(VT_FISHS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FISHS) &&
           verifier.VerifyVector(Fishs()) &&
           verifier.VerifyVectorOfTables(Fishs()) &&
           verifier.EndTable();
  }
  FishT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FishT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Fish> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FishT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FishBuilder {
  typedef Fish Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Fishs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::FishRow>>> Fishs) {
    fbb_.AddOffset(Fish::VT_FISHS, Fishs);
  }
  explicit FishBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Fish> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Fish>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Fish> CreateFish(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::FishRow>>> Fishs = 0) {
  FishBuilder builder_(_fbb);
  builder_.add_Fishs(Fishs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Fish> CreateFishDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::FishRow>> *Fishs = nullptr) {
  auto Fishs__ = Fishs ? _fbb.CreateVector<::flatbuffers::Offset<fb::FishRow>>(*Fishs) : 0;
  return fb::CreateFish(
      _fbb,
      Fishs__);
}

::flatbuffers::Offset<Fish> CreateFish(::flatbuffers::FlatBufferBuilder &_fbb, const FishT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct FishRowT : public ::flatbuffers::NativeTable {
  typedef FishRow TableType;
  uint32_t Id = 0;
  fb::Quality Quality = fb::Quality_NONE;
  uint32_t Energy = 0;
  uint32_t EscapeTime = 0;
};

struct FishRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FishRowT NativeTableType;
  typedef FishRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_QUALITY = 6,
    VT_ENERGY = 8,
    VT_ESCAPETIME = 10
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  fb::Quality Quality() const {
    return static_cast<fb::Quality>(GetField<int32_t>(VT_QUALITY, 0));
  }
  uint32_t Energy() const {
    return GetField<uint32_t>(VT_ENERGY, 0);
  }
  uint32_t EscapeTime() const {
    return GetField<uint32_t>(VT_ESCAPETIME, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_QUALITY, 4) &&
           VerifyField<uint32_t>(verifier, VT_ENERGY, 4) &&
           VerifyField<uint32_t>(verifier, VT_ESCAPETIME, 4) &&
           verifier.EndTable();
  }
  FishRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FishRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<FishRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FishRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FishRowBuilder {
  typedef FishRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(FishRow::VT_ID, Id, 0);
  }
  void add_Quality(fb::Quality Quality) {
    fbb_.AddElement<int32_t>(FishRow::VT_QUALITY, static_cast<int32_t>(Quality), 0);
  }
  void add_Energy(uint32_t Energy) {
    fbb_.AddElement<uint32_t>(FishRow::VT_ENERGY, Energy, 0);
  }
  void add_EscapeTime(uint32_t EscapeTime) {
    fbb_.AddElement<uint32_t>(FishRow::VT_ESCAPETIME, EscapeTime, 0);
  }
  explicit FishRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FishRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FishRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FishRow> CreateFishRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    fb::Quality Quality = fb::Quality_NONE,
    uint32_t Energy = 0,
    uint32_t EscapeTime = 0) {
  FishRowBuilder builder_(_fbb);
  builder_.add_EscapeTime(EscapeTime);
  builder_.add_Energy(Energy);
  builder_.add_Quality(Quality);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<FishRow> CreateFishRow(::flatbuffers::FlatBufferBuilder &_fbb, const FishRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline FishT::FishT(const FishT &o) {
  Fishs.reserve(o.Fishs.size());
  for (const auto &Fishs_ : o.Fishs) { Fishs.emplace_back((Fishs_) ? new fb::FishRowT(*Fishs_) : nullptr); }
}

inline FishT &FishT::operator=(FishT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Fishs, o.Fishs);
  return *this;
}

inline FishT *Fish::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FishT>(new FishT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Fish::UnPackTo(FishT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Fishs(); if (_e) { _o->Fishs.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Fishs[_i]) { _e->Get(_i)->UnPackTo(_o->Fishs[_i].get(), _resolver); } else { _o->Fishs[_i] = std::unique_ptr<fb::FishRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Fishs.resize(0); } }
}

inline ::flatbuffers::Offset<Fish> Fish::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FishT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFish(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Fish> CreateFish(::flatbuffers::FlatBufferBuilder &_fbb, const FishT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const FishT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Fishs = _o->Fishs.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::FishRow>> (_o->Fishs.size(), [](size_t i, _VectorArgs *__va) { return CreateFishRow(*__va->__fbb, __va->__o->Fishs[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateFish(
      _fbb,
      _Fishs);
}

inline FishRowT *FishRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FishRowT>(new FishRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FishRow::UnPackTo(FishRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Quality(); _o->Quality = _e; }
  { auto _e = Energy(); _o->Energy = _e; }
  { auto _e = EscapeTime(); _o->EscapeTime = _e; }
}

inline ::flatbuffers::Offset<FishRow> FishRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FishRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFishRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<FishRow> CreateFishRow(::flatbuffers::FlatBufferBuilder &_fbb, const FishRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const FishRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Quality = _o->Quality;
  auto _Energy = _o->Energy;
  auto _EscapeTime = _o->EscapeTime;
  return fb::CreateFishRow(
      _fbb,
      _Id,
      _Quality,
      _Energy,
      _EscapeTime);
}

inline const fb::Fish *GetFish(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Fish>(buf);
}

inline const fb::Fish *GetSizePrefixedFish(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Fish>(buf);
}

inline bool VerifyFishBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Fish>(nullptr);
}

inline bool VerifySizePrefixedFishBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Fish>(nullptr);
}

inline void FinishFishBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Fish> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFishBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Fish> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::FishT> UnPackFish(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::FishT>(GetFish(buf)->UnPack(res));
}

inline std::unique_ptr<fb::FishT> UnPackSizePrefixedFish(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::FishT>(GetSizePrefixedFish(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_FISH_FB_H_
