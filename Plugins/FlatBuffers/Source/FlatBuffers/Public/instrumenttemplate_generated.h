// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INSTRUMENTTEMPLATE_FB_H_
#define FLATBUFFERS_GENERATED_INSTRUMENTTEMPLATE_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct InstrumentTemplate;
struct InstrumentTemplateBuilder;
struct InstrumentTemplateT;

struct InstrumentTemplateRow;
struct InstrumentTemplateRowBuilder;
struct InstrumentTemplateRowT;

struct InstrumentTemplateT : public ::flatbuffers::NativeTable {
  typedef InstrumentTemplate TableType;
  std::vector<std::unique_ptr<fb::InstrumentTemplateRowT>> InstrumentTemplates{};
  InstrumentTemplateT() = default;
  InstrumentTemplateT(const InstrumentTemplateT &o);
  InstrumentTemplateT(InstrumentTemplateT&&) FLATBUFFERS_NOEXCEPT = default;
  InstrumentTemplateT &operator=(InstrumentTemplateT o) FLATBUFFERS_NOEXCEPT;
};

struct InstrumentTemplate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InstrumentTemplateT NativeTableType;
  typedef InstrumentTemplateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTRUMENTTEMPLATES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentTemplateRow>> *InstrumentTemplates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentTemplateRow>> *>(VT_INSTRUMENTTEMPLATES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTRUMENTTEMPLATES) &&
           verifier.VerifyVector(InstrumentTemplates()) &&
           verifier.VerifyVectorOfTables(InstrumentTemplates()) &&
           verifier.EndTable();
  }
  InstrumentTemplateT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(InstrumentTemplateT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<InstrumentTemplate> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentTemplateT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct InstrumentTemplateBuilder {
  typedef InstrumentTemplate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_InstrumentTemplates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentTemplateRow>>> InstrumentTemplates) {
    fbb_.AddOffset(InstrumentTemplate::VT_INSTRUMENTTEMPLATES, InstrumentTemplates);
  }
  explicit InstrumentTemplateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InstrumentTemplate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InstrumentTemplate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InstrumentTemplate> CreateInstrumentTemplate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentTemplateRow>>> InstrumentTemplates = 0) {
  InstrumentTemplateBuilder builder_(_fbb);
  builder_.add_InstrumentTemplates(InstrumentTemplates);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<InstrumentTemplate> CreateInstrumentTemplateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::InstrumentTemplateRow>> *InstrumentTemplates = nullptr) {
  auto InstrumentTemplates__ = InstrumentTemplates ? _fbb.CreateVectorOfSortedTables<fb::InstrumentTemplateRow>(InstrumentTemplates) : 0;
  return fb::CreateInstrumentTemplate(
      _fbb,
      InstrumentTemplates__);
}

::flatbuffers::Offset<InstrumentTemplate> CreateInstrumentTemplate(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentTemplateT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct InstrumentTemplateRowT : public ::flatbuffers::NativeTable {
  typedef InstrumentTemplateRow TableType;
  uint32_t Id = 0;
  uint32_t TemplateId = 0;
  uint32_t Rank = 0;
  float RankCureFactor = 0.0f;
};

struct InstrumentTemplateRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InstrumentTemplateRowT NativeTableType;
  typedef InstrumentTemplateRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TEMPLATEID = 6,
    VT_RANK = 8,
    VT_RANKCUREFACTOR = 10
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const InstrumentTemplateRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  uint32_t TemplateId() const {
    return GetField<uint32_t>(VT_TEMPLATEID, 0);
  }
  uint32_t Rank() const {
    return GetField<uint32_t>(VT_RANK, 0);
  }
  float RankCureFactor() const {
    return GetField<float>(VT_RANKCUREFACTOR, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_TEMPLATEID, 4) &&
           VerifyField<uint32_t>(verifier, VT_RANK, 4) &&
           VerifyField<float>(verifier, VT_RANKCUREFACTOR, 4) &&
           verifier.EndTable();
  }
  InstrumentTemplateRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(InstrumentTemplateRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<InstrumentTemplateRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentTemplateRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct InstrumentTemplateRowBuilder {
  typedef InstrumentTemplateRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(InstrumentTemplateRow::VT_ID, Id, 0);
  }
  void add_TemplateId(uint32_t TemplateId) {
    fbb_.AddElement<uint32_t>(InstrumentTemplateRow::VT_TEMPLATEID, TemplateId, 0);
  }
  void add_Rank(uint32_t Rank) {
    fbb_.AddElement<uint32_t>(InstrumentTemplateRow::VT_RANK, Rank, 0);
  }
  void add_RankCureFactor(float RankCureFactor) {
    fbb_.AddElement<float>(InstrumentTemplateRow::VT_RANKCUREFACTOR, RankCureFactor, 0.0f);
  }
  explicit InstrumentTemplateRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InstrumentTemplateRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InstrumentTemplateRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InstrumentTemplateRow> CreateInstrumentTemplateRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t TemplateId = 0,
    uint32_t Rank = 0,
    float RankCureFactor = 0.0f) {
  InstrumentTemplateRowBuilder builder_(_fbb);
  builder_.add_RankCureFactor(RankCureFactor);
  builder_.add_Rank(Rank);
  builder_.add_TemplateId(TemplateId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<InstrumentTemplateRow> CreateInstrumentTemplateRow(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentTemplateRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline InstrumentTemplateT::InstrumentTemplateT(const InstrumentTemplateT &o) {
  InstrumentTemplates.reserve(o.InstrumentTemplates.size());
  for (const auto &InstrumentTemplates_ : o.InstrumentTemplates) { InstrumentTemplates.emplace_back((InstrumentTemplates_) ? new fb::InstrumentTemplateRowT(*InstrumentTemplates_) : nullptr); }
}

inline InstrumentTemplateT &InstrumentTemplateT::operator=(InstrumentTemplateT o) FLATBUFFERS_NOEXCEPT {
  std::swap(InstrumentTemplates, o.InstrumentTemplates);
  return *this;
}

inline InstrumentTemplateT *InstrumentTemplate::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<InstrumentTemplateT>(new InstrumentTemplateT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void InstrumentTemplate::UnPackTo(InstrumentTemplateT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = InstrumentTemplates(); if (_e) { _o->InstrumentTemplates.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->InstrumentTemplates[_i]) { _e->Get(_i)->UnPackTo(_o->InstrumentTemplates[_i].get(), _resolver); } else { _o->InstrumentTemplates[_i] = std::unique_ptr<fb::InstrumentTemplateRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->InstrumentTemplates.resize(0); } }
}

inline ::flatbuffers::Offset<InstrumentTemplate> InstrumentTemplate::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentTemplateT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInstrumentTemplate(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<InstrumentTemplate> CreateInstrumentTemplate(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentTemplateT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const InstrumentTemplateT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _InstrumentTemplates = _o->InstrumentTemplates.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::InstrumentTemplateRow>> (_o->InstrumentTemplates.size(), [](size_t i, _VectorArgs *__va) { return CreateInstrumentTemplateRow(*__va->__fbb, __va->__o->InstrumentTemplates[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateInstrumentTemplate(
      _fbb,
      _InstrumentTemplates);
}

inline InstrumentTemplateRowT *InstrumentTemplateRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<InstrumentTemplateRowT>(new InstrumentTemplateRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void InstrumentTemplateRow::UnPackTo(InstrumentTemplateRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = TemplateId(); _o->TemplateId = _e; }
  { auto _e = Rank(); _o->Rank = _e; }
  { auto _e = RankCureFactor(); _o->RankCureFactor = _e; }
}

inline ::flatbuffers::Offset<InstrumentTemplateRow> InstrumentTemplateRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentTemplateRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInstrumentTemplateRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<InstrumentTemplateRow> CreateInstrumentTemplateRow(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentTemplateRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const InstrumentTemplateRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _TemplateId = _o->TemplateId;
  auto _Rank = _o->Rank;
  auto _RankCureFactor = _o->RankCureFactor;
  return fb::CreateInstrumentTemplateRow(
      _fbb,
      _Id,
      _TemplateId,
      _Rank,
      _RankCureFactor);
}

inline const fb::InstrumentTemplate *GetInstrumentTemplate(const void *buf) {
  return ::flatbuffers::GetRoot<fb::InstrumentTemplate>(buf);
}

inline const fb::InstrumentTemplate *GetSizePrefixedInstrumentTemplate(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::InstrumentTemplate>(buf);
}

inline bool VerifyInstrumentTemplateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::InstrumentTemplate>(nullptr);
}

inline bool VerifySizePrefixedInstrumentTemplateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::InstrumentTemplate>(nullptr);
}

inline void FinishInstrumentTemplateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::InstrumentTemplate> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInstrumentTemplateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::InstrumentTemplate> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::InstrumentTemplateT> UnPackInstrumentTemplate(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::InstrumentTemplateT>(GetInstrumentTemplate(buf)->UnPack(res));
}

inline std::unique_ptr<fb::InstrumentTemplateT> UnPackSizePrefixedInstrumentTemplate(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::InstrumentTemplateT>(GetSizePrefixedInstrumentTemplate(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_INSTRUMENTTEMPLATE_FB_H_
