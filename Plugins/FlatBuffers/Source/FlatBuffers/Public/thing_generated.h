// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_THING_FB_H_
#define FLATBUFFERS_GENERATED_THING_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Thing;
struct ThingBuilder;
struct ThingT;

struct ThingRow;
struct ThingRowBuilder;
struct ThingRowT;

struct ThingT : public ::flatbuffers::NativeTable {
  typedef Thing TableType;
  std::vector<std::unique_ptr<fb::ThingRowT>> Things{};
  ThingT() = default;
  ThingT(const ThingT &o);
  ThingT(ThingT&&) FLATBUFFERS_NOEXCEPT = default;
  ThingT &operator=(ThingT o) FLATBUFFERS_NOEXCEPT;
};

struct Thing FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ThingT NativeTableType;
  typedef ThingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_THINGS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::ThingRow>> *Things() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::ThingRow>> *>(VT_THINGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_THINGS) &&
           verifier.VerifyVector(Things()) &&
           verifier.VerifyVectorOfTables(Things()) &&
           verifier.EndTable();
  }
  ThingT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ThingT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Thing> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ThingT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ThingBuilder {
  typedef Thing Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Things(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::ThingRow>>> Things) {
    fbb_.AddOffset(Thing::VT_THINGS, Things);
  }
  explicit ThingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Thing> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Thing>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Thing> CreateThing(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::ThingRow>>> Things = 0) {
  ThingBuilder builder_(_fbb);
  builder_.add_Things(Things);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Thing> CreateThingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::ThingRow>> *Things = nullptr) {
  auto Things__ = Things ? _fbb.CreateVector<::flatbuffers::Offset<fb::ThingRow>>(*Things) : 0;
  return fb::CreateThing(
      _fbb,
      Things__);
}

::flatbuffers::Offset<Thing> CreateThing(::flatbuffers::FlatBufferBuilder &_fbb, const ThingT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ThingRowT : public ::flatbuffers::NativeTable {
  typedef ThingRow TableType;
  uint32_t Id = 0;
  fb::ThingType ThingType = fb::ThingType_NONE;
  uint32_t TypeId = 0;
  int32_t Num = 0;
};

struct ThingRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ThingRowT NativeTableType;
  typedef ThingRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_THINGTYPE = 6,
    VT_TYPEID = 8,
    VT_NUM = 10
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  fb::ThingType ThingType() const {
    return static_cast<fb::ThingType>(GetField<int32_t>(VT_THINGTYPE, 0));
  }
  uint32_t TypeId() const {
    return GetField<uint32_t>(VT_TYPEID, 0);
  }
  int32_t Num() const {
    return GetField<int32_t>(VT_NUM, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_THINGTYPE, 4) &&
           VerifyField<uint32_t>(verifier, VT_TYPEID, 4) &&
           VerifyField<int32_t>(verifier, VT_NUM, 4) &&
           verifier.EndTable();
  }
  ThingRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ThingRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ThingRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ThingRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ThingRowBuilder {
  typedef ThingRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(ThingRow::VT_ID, Id, 0);
  }
  void add_ThingType(fb::ThingType ThingType) {
    fbb_.AddElement<int32_t>(ThingRow::VT_THINGTYPE, static_cast<int32_t>(ThingType), 0);
  }
  void add_TypeId(uint32_t TypeId) {
    fbb_.AddElement<uint32_t>(ThingRow::VT_TYPEID, TypeId, 0);
  }
  void add_Num(int32_t Num) {
    fbb_.AddElement<int32_t>(ThingRow::VT_NUM, Num, 0);
  }
  explicit ThingRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ThingRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ThingRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ThingRow> CreateThingRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    fb::ThingType ThingType = fb::ThingType_NONE,
    uint32_t TypeId = 0,
    int32_t Num = 0) {
  ThingRowBuilder builder_(_fbb);
  builder_.add_Num(Num);
  builder_.add_TypeId(TypeId);
  builder_.add_ThingType(ThingType);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<ThingRow> CreateThingRow(::flatbuffers::FlatBufferBuilder &_fbb, const ThingRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ThingT::ThingT(const ThingT &o) {
  Things.reserve(o.Things.size());
  for (const auto &Things_ : o.Things) { Things.emplace_back((Things_) ? new fb::ThingRowT(*Things_) : nullptr); }
}

inline ThingT &ThingT::operator=(ThingT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Things, o.Things);
  return *this;
}

inline ThingT *Thing::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ThingT>(new ThingT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Thing::UnPackTo(ThingT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Things(); if (_e) { _o->Things.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Things[_i]) { _e->Get(_i)->UnPackTo(_o->Things[_i].get(), _resolver); } else { _o->Things[_i] = std::unique_ptr<fb::ThingRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Things.resize(0); } }
}

inline ::flatbuffers::Offset<Thing> Thing::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ThingT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateThing(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Thing> CreateThing(::flatbuffers::FlatBufferBuilder &_fbb, const ThingT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ThingT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Things = _o->Things.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::ThingRow>> (_o->Things.size(), [](size_t i, _VectorArgs *__va) { return CreateThingRow(*__va->__fbb, __va->__o->Things[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateThing(
      _fbb,
      _Things);
}

inline ThingRowT *ThingRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ThingRowT>(new ThingRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ThingRow::UnPackTo(ThingRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = ThingType(); _o->ThingType = _e; }
  { auto _e = TypeId(); _o->TypeId = _e; }
  { auto _e = Num(); _o->Num = _e; }
}

inline ::flatbuffers::Offset<ThingRow> ThingRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ThingRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateThingRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ThingRow> CreateThingRow(::flatbuffers::FlatBufferBuilder &_fbb, const ThingRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ThingRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _ThingType = _o->ThingType;
  auto _TypeId = _o->TypeId;
  auto _Num = _o->Num;
  return fb::CreateThingRow(
      _fbb,
      _Id,
      _ThingType,
      _TypeId,
      _Num);
}

inline const fb::Thing *GetThing(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Thing>(buf);
}

inline const fb::Thing *GetSizePrefixedThing(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Thing>(buf);
}

inline bool VerifyThingBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Thing>(nullptr);
}

inline bool VerifySizePrefixedThingBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Thing>(nullptr);
}

inline void FinishThingBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Thing> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedThingBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Thing> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::ThingT> UnPackThing(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::ThingT>(GetThing(buf)->UnPack(res));
}

inline std::unique_ptr<fb::ThingT> UnPackSizePrefixedThing(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::ThingT>(GetSizePrefixedThing(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_THING_FB_H_
