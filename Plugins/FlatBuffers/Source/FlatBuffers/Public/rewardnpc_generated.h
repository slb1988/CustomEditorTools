// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REWARDNPC_FB_H_
#define FLATBUFFERS_GENERATED_REWARDNPC_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct RewardNpc;
struct RewardNpcBuilder;
struct RewardNpcT;

struct RewardNpcRow;
struct RewardNpcRowBuilder;
struct RewardNpcRowT;

struct RewardNpcT : public ::flatbuffers::NativeTable {
  typedef RewardNpc TableType;
  std::vector<std::unique_ptr<fb::RewardNpcRowT>> RewardNpcs{};
  RewardNpcT() = default;
  RewardNpcT(const RewardNpcT &o);
  RewardNpcT(RewardNpcT&&) FLATBUFFERS_NOEXCEPT = default;
  RewardNpcT &operator=(RewardNpcT o) FLATBUFFERS_NOEXCEPT;
};

struct RewardNpc FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RewardNpcT NativeTableType;
  typedef RewardNpcBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REWARDNPCS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::RewardNpcRow>> *RewardNpcs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::RewardNpcRow>> *>(VT_REWARDNPCS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REWARDNPCS) &&
           verifier.VerifyVector(RewardNpcs()) &&
           verifier.VerifyVectorOfTables(RewardNpcs()) &&
           verifier.EndTable();
  }
  RewardNpcT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RewardNpcT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<RewardNpc> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RewardNpcT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RewardNpcBuilder {
  typedef RewardNpc Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_RewardNpcs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::RewardNpcRow>>> RewardNpcs) {
    fbb_.AddOffset(RewardNpc::VT_REWARDNPCS, RewardNpcs);
  }
  explicit RewardNpcBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RewardNpc> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RewardNpc>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RewardNpc> CreateRewardNpc(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::RewardNpcRow>>> RewardNpcs = 0) {
  RewardNpcBuilder builder_(_fbb);
  builder_.add_RewardNpcs(RewardNpcs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RewardNpc> CreateRewardNpcDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::RewardNpcRow>> *RewardNpcs = nullptr) {
  auto RewardNpcs__ = RewardNpcs ? _fbb.CreateVectorOfSortedTables<fb::RewardNpcRow>(RewardNpcs) : 0;
  return fb::CreateRewardNpc(
      _fbb,
      RewardNpcs__);
}

::flatbuffers::Offset<RewardNpc> CreateRewardNpc(::flatbuffers::FlatBufferBuilder &_fbb, const RewardNpcT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RewardNpcRowT : public ::flatbuffers::NativeTable {
  typedef RewardNpcRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  bool InitCreate = false;
  bool BelongToWorld = false;
  std::vector<std::unique_ptr<fb::tuple_uint32_uint32_uint32T>> InteractRewards{};
  std::string PrefabPath{};
  RewardNpcRowT() = default;
  RewardNpcRowT(const RewardNpcRowT &o);
  RewardNpcRowT(RewardNpcRowT&&) FLATBUFFERS_NOEXCEPT = default;
  RewardNpcRowT &operator=(RewardNpcRowT o) FLATBUFFERS_NOEXCEPT;
};

struct RewardNpcRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RewardNpcRowT NativeTableType;
  typedef RewardNpcRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_INITCREATE = 8,
    VT_BELONGTOWORLD = 10,
    VT_INTERACTREWARDS = 12,
    VT_PREFABPATH = 14
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const RewardNpcRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  bool InitCreate() const {
    return GetField<uint8_t>(VT_INITCREATE, 0) != 0;
  }
  bool BelongToWorld() const {
    return GetField<uint8_t>(VT_BELONGTOWORLD, 0) != 0;
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_uint32_uint32_uint32>> *InteractRewards() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_uint32_uint32_uint32>> *>(VT_INTERACTREWARDS);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyField<uint8_t>(verifier, VT_INITCREATE, 1) &&
           VerifyField<uint8_t>(verifier, VT_BELONGTOWORLD, 1) &&
           VerifyOffset(verifier, VT_INTERACTREWARDS) &&
           verifier.VerifyVector(InteractRewards()) &&
           verifier.VerifyVectorOfTables(InteractRewards()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           verifier.EndTable();
  }
  RewardNpcRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RewardNpcRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<RewardNpcRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RewardNpcRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RewardNpcRowBuilder {
  typedef RewardNpcRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(RewardNpcRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(RewardNpcRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_InitCreate(bool InitCreate) {
    fbb_.AddElement<uint8_t>(RewardNpcRow::VT_INITCREATE, static_cast<uint8_t>(InitCreate), 0);
  }
  void add_BelongToWorld(bool BelongToWorld) {
    fbb_.AddElement<uint8_t>(RewardNpcRow::VT_BELONGTOWORLD, static_cast<uint8_t>(BelongToWorld), 0);
  }
  void add_InteractRewards(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_uint32_uint32_uint32>>> InteractRewards) {
    fbb_.AddOffset(RewardNpcRow::VT_INTERACTREWARDS, InteractRewards);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(RewardNpcRow::VT_PREFABPATH, PrefabPath);
  }
  explicit RewardNpcRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RewardNpcRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RewardNpcRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RewardNpcRow> CreateRewardNpcRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    bool InitCreate = false,
    bool BelongToWorld = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_uint32_uint32_uint32>>> InteractRewards = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0) {
  RewardNpcRowBuilder builder_(_fbb);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_InteractRewards(InteractRewards);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  builder_.add_BelongToWorld(BelongToWorld);
  builder_.add_InitCreate(InitCreate);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RewardNpcRow> CreateRewardNpcRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    bool InitCreate = false,
    bool BelongToWorld = false,
    const std::vector<::flatbuffers::Offset<fb::tuple_uint32_uint32_uint32>> *InteractRewards = nullptr,
    const char *PrefabPath = nullptr) {
  auto InteractRewards__ = InteractRewards ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_uint32_uint32_uint32>>(*InteractRewards) : 0;
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateRewardNpcRow(
      _fbb,
      Id,
      WorldTypeId,
      InitCreate,
      BelongToWorld,
      InteractRewards__,
      PrefabPath__);
}

::flatbuffers::Offset<RewardNpcRow> CreateRewardNpcRow(::flatbuffers::FlatBufferBuilder &_fbb, const RewardNpcRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline RewardNpcT::RewardNpcT(const RewardNpcT &o) {
  RewardNpcs.reserve(o.RewardNpcs.size());
  for (const auto &RewardNpcs_ : o.RewardNpcs) { RewardNpcs.emplace_back((RewardNpcs_) ? new fb::RewardNpcRowT(*RewardNpcs_) : nullptr); }
}

inline RewardNpcT &RewardNpcT::operator=(RewardNpcT o) FLATBUFFERS_NOEXCEPT {
  std::swap(RewardNpcs, o.RewardNpcs);
  return *this;
}

inline RewardNpcT *RewardNpc::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RewardNpcT>(new RewardNpcT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RewardNpc::UnPackTo(RewardNpcT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = RewardNpcs(); if (_e) { _o->RewardNpcs.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->RewardNpcs[_i]) { _e->Get(_i)->UnPackTo(_o->RewardNpcs[_i].get(), _resolver); } else { _o->RewardNpcs[_i] = std::unique_ptr<fb::RewardNpcRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->RewardNpcs.resize(0); } }
}

inline ::flatbuffers::Offset<RewardNpc> RewardNpc::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RewardNpcT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRewardNpc(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<RewardNpc> CreateRewardNpc(::flatbuffers::FlatBufferBuilder &_fbb, const RewardNpcT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RewardNpcT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _RewardNpcs = _o->RewardNpcs.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::RewardNpcRow>> (_o->RewardNpcs.size(), [](size_t i, _VectorArgs *__va) { return CreateRewardNpcRow(*__va->__fbb, __va->__o->RewardNpcs[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateRewardNpc(
      _fbb,
      _RewardNpcs);
}

inline RewardNpcRowT::RewardNpcRowT(const RewardNpcRowT &o)
      : Id(o.Id),
        WorldTypeId(o.WorldTypeId),
        InitCreate(o.InitCreate),
        BelongToWorld(o.BelongToWorld),
        PrefabPath(o.PrefabPath) {
  InteractRewards.reserve(o.InteractRewards.size());
  for (const auto &InteractRewards_ : o.InteractRewards) { InteractRewards.emplace_back((InteractRewards_) ? new fb::tuple_uint32_uint32_uint32T(*InteractRewards_) : nullptr); }
}

inline RewardNpcRowT &RewardNpcRowT::operator=(RewardNpcRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldTypeId, o.WorldTypeId);
  std::swap(InitCreate, o.InitCreate);
  std::swap(BelongToWorld, o.BelongToWorld);
  std::swap(InteractRewards, o.InteractRewards);
  std::swap(PrefabPath, o.PrefabPath);
  return *this;
}

inline RewardNpcRowT *RewardNpcRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RewardNpcRowT>(new RewardNpcRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RewardNpcRow::UnPackTo(RewardNpcRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = InitCreate(); _o->InitCreate = _e; }
  { auto _e = BelongToWorld(); _o->BelongToWorld = _e; }
  { auto _e = InteractRewards(); if (_e) { _o->InteractRewards.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->InteractRewards[_i]) { _e->Get(_i)->UnPackTo(_o->InteractRewards[_i].get(), _resolver); } else { _o->InteractRewards[_i] = std::unique_ptr<fb::tuple_uint32_uint32_uint32T>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->InteractRewards.resize(0); } }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
}

inline ::flatbuffers::Offset<RewardNpcRow> RewardNpcRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RewardNpcRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRewardNpcRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<RewardNpcRow> CreateRewardNpcRow(::flatbuffers::FlatBufferBuilder &_fbb, const RewardNpcRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RewardNpcRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _InitCreate = _o->InitCreate;
  auto _BelongToWorld = _o->BelongToWorld;
  auto _InteractRewards = _o->InteractRewards.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_uint32_uint32_uint32>> (_o->InteractRewards.size(), [](size_t i, _VectorArgs *__va) { return Createtuple_uint32_uint32_uint32(*__va->__fbb, __va->__o->InteractRewards[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  return fb::CreateRewardNpcRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _InitCreate,
      _BelongToWorld,
      _InteractRewards,
      _PrefabPath);
}

inline const fb::RewardNpc *GetRewardNpc(const void *buf) {
  return ::flatbuffers::GetRoot<fb::RewardNpc>(buf);
}

inline const fb::RewardNpc *GetSizePrefixedRewardNpc(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::RewardNpc>(buf);
}

inline bool VerifyRewardNpcBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::RewardNpc>(nullptr);
}

inline bool VerifySizePrefixedRewardNpcBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::RewardNpc>(nullptr);
}

inline void FinishRewardNpcBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::RewardNpc> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRewardNpcBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::RewardNpc> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::RewardNpcT> UnPackRewardNpc(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::RewardNpcT>(GetRewardNpc(buf)->UnPack(res));
}

inline std::unique_ptr<fb::RewardNpcT> UnPackSizePrefixedRewardNpc(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::RewardNpcT>(GetSizePrefixedRewardNpc(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_REWARDNPC_FB_H_
