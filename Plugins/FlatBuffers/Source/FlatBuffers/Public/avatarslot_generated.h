// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AVATARSLOT_FB_H_
#define FLATBUFFERS_GENERATED_AVATARSLOT_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct AvatarSlot;
struct AvatarSlotBuilder;
struct AvatarSlotT;

struct AvatarSlotRow;
struct AvatarSlotRowBuilder;
struct AvatarSlotRowT;

struct AvatarSlotT : public ::flatbuffers::NativeTable {
  typedef AvatarSlot TableType;
  std::vector<std::unique_ptr<fb::AvatarSlotRowT>> AvatarSlots{};
  AvatarSlotT() = default;
  AvatarSlotT(const AvatarSlotT &o);
  AvatarSlotT(AvatarSlotT&&) FLATBUFFERS_NOEXCEPT = default;
  AvatarSlotT &operator=(AvatarSlotT o) FLATBUFFERS_NOEXCEPT;
};

struct AvatarSlot FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AvatarSlotT NativeTableType;
  typedef AvatarSlotBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AVATARSLOTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSlotRow>> *AvatarSlots() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSlotRow>> *>(VT_AVATARSLOTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AVATARSLOTS) &&
           verifier.VerifyVector(AvatarSlots()) &&
           verifier.VerifyVectorOfTables(AvatarSlots()) &&
           verifier.EndTable();
  }
  AvatarSlotT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AvatarSlotT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AvatarSlot> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AvatarSlotBuilder {
  typedef AvatarSlot Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_AvatarSlots(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSlotRow>>> AvatarSlots) {
    fbb_.AddOffset(AvatarSlot::VT_AVATARSLOTS, AvatarSlots);
  }
  explicit AvatarSlotBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AvatarSlot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AvatarSlot>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AvatarSlot> CreateAvatarSlot(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::AvatarSlotRow>>> AvatarSlots = 0) {
  AvatarSlotBuilder builder_(_fbb);
  builder_.add_AvatarSlots(AvatarSlots);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AvatarSlot> CreateAvatarSlotDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::AvatarSlotRow>> *AvatarSlots = nullptr) {
  auto AvatarSlots__ = AvatarSlots ? _fbb.CreateVectorOfSortedTables<fb::AvatarSlotRow>(AvatarSlots) : 0;
  return fb::CreateAvatarSlot(
      _fbb,
      AvatarSlots__);
}

::flatbuffers::Offset<AvatarSlot> CreateAvatarSlot(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AvatarSlotRowT : public ::flatbuffers::NativeTable {
  typedef AvatarSlotRow TableType;
  uint32_t Id = 0;
  std::string Name{};
  std::string Desc{};
};

struct AvatarSlotRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AvatarSlotRowT NativeTableType;
  typedef AvatarSlotRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_DESC = 8
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const AvatarSlotRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  const ::flatbuffers::String *Name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *Desc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESC);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(Name()) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(Desc()) &&
           verifier.EndTable();
  }
  AvatarSlotRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AvatarSlotRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AvatarSlotRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AvatarSlotRowBuilder {
  typedef AvatarSlotRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(AvatarSlotRow::VT_ID, Id, 0);
  }
  void add_Name(::flatbuffers::Offset<::flatbuffers::String> Name) {
    fbb_.AddOffset(AvatarSlotRow::VT_NAME, Name);
  }
  void add_Desc(::flatbuffers::Offset<::flatbuffers::String> Desc) {
    fbb_.AddOffset(AvatarSlotRow::VT_DESC, Desc);
  }
  explicit AvatarSlotRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AvatarSlotRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AvatarSlotRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AvatarSlotRow> CreateAvatarSlotRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Desc = 0) {
  AvatarSlotRowBuilder builder_(_fbb);
  builder_.add_Desc(Desc);
  builder_.add_Name(Name);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AvatarSlotRow> CreateAvatarSlotRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *Name = nullptr,
    const char *Desc = nullptr) {
  auto Name__ = Name ? _fbb.CreateString(Name) : 0;
  auto Desc__ = Desc ? _fbb.CreateString(Desc) : 0;
  return fb::CreateAvatarSlotRow(
      _fbb,
      Id,
      Name__,
      Desc__);
}

::flatbuffers::Offset<AvatarSlotRow> CreateAvatarSlotRow(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AvatarSlotT::AvatarSlotT(const AvatarSlotT &o) {
  AvatarSlots.reserve(o.AvatarSlots.size());
  for (const auto &AvatarSlots_ : o.AvatarSlots) { AvatarSlots.emplace_back((AvatarSlots_) ? new fb::AvatarSlotRowT(*AvatarSlots_) : nullptr); }
}

inline AvatarSlotT &AvatarSlotT::operator=(AvatarSlotT o) FLATBUFFERS_NOEXCEPT {
  std::swap(AvatarSlots, o.AvatarSlots);
  return *this;
}

inline AvatarSlotT *AvatarSlot::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AvatarSlotT>(new AvatarSlotT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AvatarSlot::UnPackTo(AvatarSlotT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = AvatarSlots(); if (_e) { _o->AvatarSlots.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->AvatarSlots[_i]) { _e->Get(_i)->UnPackTo(_o->AvatarSlots[_i].get(), _resolver); } else { _o->AvatarSlots[_i] = std::unique_ptr<fb::AvatarSlotRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->AvatarSlots.resize(0); } }
}

inline ::flatbuffers::Offset<AvatarSlot> AvatarSlot::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAvatarSlot(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AvatarSlot> CreateAvatarSlot(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AvatarSlotT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _AvatarSlots = _o->AvatarSlots.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::AvatarSlotRow>> (_o->AvatarSlots.size(), [](size_t i, _VectorArgs *__va) { return CreateAvatarSlotRow(*__va->__fbb, __va->__o->AvatarSlots[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateAvatarSlot(
      _fbb,
      _AvatarSlots);
}

inline AvatarSlotRowT *AvatarSlotRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AvatarSlotRowT>(new AvatarSlotRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AvatarSlotRow::UnPackTo(AvatarSlotRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Name(); if (_e) _o->Name = _e->str(); }
  { auto _e = Desc(); if (_e) _o->Desc = _e->str(); }
}

inline ::flatbuffers::Offset<AvatarSlotRow> AvatarSlotRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAvatarSlotRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AvatarSlotRow> CreateAvatarSlotRow(::flatbuffers::FlatBufferBuilder &_fbb, const AvatarSlotRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AvatarSlotRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Name = _o->Name.empty() ? 0 : _fbb.CreateString(_o->Name);
  auto _Desc = _o->Desc.empty() ? 0 : _fbb.CreateString(_o->Desc);
  return fb::CreateAvatarSlotRow(
      _fbb,
      _Id,
      _Name,
      _Desc);
}

inline const fb::AvatarSlot *GetAvatarSlot(const void *buf) {
  return ::flatbuffers::GetRoot<fb::AvatarSlot>(buf);
}

inline const fb::AvatarSlot *GetSizePrefixedAvatarSlot(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::AvatarSlot>(buf);
}

inline bool VerifyAvatarSlotBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::AvatarSlot>(nullptr);
}

inline bool VerifySizePrefixedAvatarSlotBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::AvatarSlot>(nullptr);
}

inline void FinishAvatarSlotBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AvatarSlot> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAvatarSlotBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::AvatarSlot> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::AvatarSlotT> UnPackAvatarSlot(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AvatarSlotT>(GetAvatarSlot(buf)->UnPack(res));
}

inline std::unique_ptr<fb::AvatarSlotT> UnPackSizePrefixedAvatarSlot(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::AvatarSlotT>(GetSizePrefixedAvatarSlot(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_AVATARSLOT_FB_H_
