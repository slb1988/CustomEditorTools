// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DEVELOP_FB_H_
#define FLATBUFFERS_GENERATED_DEVELOP_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Develop;
struct DevelopBuilder;
struct DevelopT;

struct DevelopRow;
struct DevelopRowBuilder;
struct DevelopRowT;

struct DevelopT : public ::flatbuffers::NativeTable {
  typedef Develop TableType;
  std::vector<std::unique_ptr<fb::DevelopRowT>> Develops{};
  DevelopT() = default;
  DevelopT(const DevelopT &o);
  DevelopT(DevelopT&&) FLATBUFFERS_NOEXCEPT = default;
  DevelopT &operator=(DevelopT o) FLATBUFFERS_NOEXCEPT;
};

struct Develop FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DevelopT NativeTableType;
  typedef DevelopBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEVELOPS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::DevelopRow>> *Develops() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::DevelopRow>> *>(VT_DEVELOPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEVELOPS) &&
           verifier.VerifyVector(Develops()) &&
           verifier.VerifyVectorOfTables(Develops()) &&
           verifier.EndTable();
  }
  DevelopT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DevelopT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Develop> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DevelopT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DevelopBuilder {
  typedef Develop Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Develops(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::DevelopRow>>> Develops) {
    fbb_.AddOffset(Develop::VT_DEVELOPS, Develops);
  }
  explicit DevelopBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Develop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Develop>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Develop> CreateDevelop(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::DevelopRow>>> Develops = 0) {
  DevelopBuilder builder_(_fbb);
  builder_.add_Develops(Develops);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Develop> CreateDevelopDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::DevelopRow>> *Develops = nullptr) {
  auto Develops__ = Develops ? _fbb.CreateVectorOfSortedTables<fb::DevelopRow>(Develops) : 0;
  return fb::CreateDevelop(
      _fbb,
      Develops__);
}

::flatbuffers::Offset<Develop> CreateDevelop(::flatbuffers::FlatBufferBuilder &_fbb, const DevelopT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DevelopRowT : public ::flatbuffers::NativeTable {
  typedef DevelopRow TableType;
  uint32_t Id = 0;
  uint32_t ParentId = 0;
  std::string Desc{};
  std::unique_ptr<fb::tuple_uint32_uint32T> Cost{};
  fb::DevelopUnlockType UolockType = fb::DevelopUnlockType_NONE;
  std::vector<float> UolockParams{};
  DevelopRowT() = default;
  DevelopRowT(const DevelopRowT &o);
  DevelopRowT(DevelopRowT&&) FLATBUFFERS_NOEXCEPT = default;
  DevelopRowT &operator=(DevelopRowT o) FLATBUFFERS_NOEXCEPT;
};

struct DevelopRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DevelopRowT NativeTableType;
  typedef DevelopRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PARENTID = 6,
    VT_DESC = 8,
    VT_COST = 10,
    VT_UOLOCKTYPE = 12,
    VT_UOLOCKPARAMS = 14
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const DevelopRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  uint32_t ParentId() const {
    return GetField<uint32_t>(VT_PARENTID, 0);
  }
  const ::flatbuffers::String *Desc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESC);
  }
  const fb::tuple_uint32_uint32 *Cost() const {
    return GetPointer<const fb::tuple_uint32_uint32 *>(VT_COST);
  }
  fb::DevelopUnlockType UolockType() const {
    return static_cast<fb::DevelopUnlockType>(GetField<int32_t>(VT_UOLOCKTYPE, 0));
  }
  const ::flatbuffers::Vector<float> *UolockParams() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_UOLOCKPARAMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_PARENTID, 4) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(Desc()) &&
           VerifyOffset(verifier, VT_COST) &&
           verifier.VerifyTable(Cost()) &&
           VerifyField<int32_t>(verifier, VT_UOLOCKTYPE, 4) &&
           VerifyOffset(verifier, VT_UOLOCKPARAMS) &&
           verifier.VerifyVector(UolockParams()) &&
           verifier.EndTable();
  }
  DevelopRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DevelopRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<DevelopRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DevelopRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DevelopRowBuilder {
  typedef DevelopRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(DevelopRow::VT_ID, Id, 0);
  }
  void add_ParentId(uint32_t ParentId) {
    fbb_.AddElement<uint32_t>(DevelopRow::VT_PARENTID, ParentId, 0);
  }
  void add_Desc(::flatbuffers::Offset<::flatbuffers::String> Desc) {
    fbb_.AddOffset(DevelopRow::VT_DESC, Desc);
  }
  void add_Cost(::flatbuffers::Offset<fb::tuple_uint32_uint32> Cost) {
    fbb_.AddOffset(DevelopRow::VT_COST, Cost);
  }
  void add_UolockType(fb::DevelopUnlockType UolockType) {
    fbb_.AddElement<int32_t>(DevelopRow::VT_UOLOCKTYPE, static_cast<int32_t>(UolockType), 0);
  }
  void add_UolockParams(::flatbuffers::Offset<::flatbuffers::Vector<float>> UolockParams) {
    fbb_.AddOffset(DevelopRow::VT_UOLOCKPARAMS, UolockParams);
  }
  explicit DevelopRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DevelopRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DevelopRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DevelopRow> CreateDevelopRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t ParentId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Desc = 0,
    ::flatbuffers::Offset<fb::tuple_uint32_uint32> Cost = 0,
    fb::DevelopUnlockType UolockType = fb::DevelopUnlockType_NONE,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> UolockParams = 0) {
  DevelopRowBuilder builder_(_fbb);
  builder_.add_UolockParams(UolockParams);
  builder_.add_UolockType(UolockType);
  builder_.add_Cost(Cost);
  builder_.add_Desc(Desc);
  builder_.add_ParentId(ParentId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DevelopRow> CreateDevelopRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t ParentId = 0,
    const char *Desc = nullptr,
    ::flatbuffers::Offset<fb::tuple_uint32_uint32> Cost = 0,
    fb::DevelopUnlockType UolockType = fb::DevelopUnlockType_NONE,
    const std::vector<float> *UolockParams = nullptr) {
  auto Desc__ = Desc ? _fbb.CreateString(Desc) : 0;
  auto UolockParams__ = UolockParams ? _fbb.CreateVector<float>(*UolockParams) : 0;
  return fb::CreateDevelopRow(
      _fbb,
      Id,
      ParentId,
      Desc__,
      Cost,
      UolockType,
      UolockParams__);
}

::flatbuffers::Offset<DevelopRow> CreateDevelopRow(::flatbuffers::FlatBufferBuilder &_fbb, const DevelopRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline DevelopT::DevelopT(const DevelopT &o) {
  Develops.reserve(o.Develops.size());
  for (const auto &Develops_ : o.Develops) { Develops.emplace_back((Develops_) ? new fb::DevelopRowT(*Develops_) : nullptr); }
}

inline DevelopT &DevelopT::operator=(DevelopT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Develops, o.Develops);
  return *this;
}

inline DevelopT *Develop::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DevelopT>(new DevelopT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Develop::UnPackTo(DevelopT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Develops(); if (_e) { _o->Develops.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Develops[_i]) { _e->Get(_i)->UnPackTo(_o->Develops[_i].get(), _resolver); } else { _o->Develops[_i] = std::unique_ptr<fb::DevelopRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Develops.resize(0); } }
}

inline ::flatbuffers::Offset<Develop> Develop::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DevelopT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDevelop(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Develop> CreateDevelop(::flatbuffers::FlatBufferBuilder &_fbb, const DevelopT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DevelopT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Develops = _o->Develops.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::DevelopRow>> (_o->Develops.size(), [](size_t i, _VectorArgs *__va) { return CreateDevelopRow(*__va->__fbb, __va->__o->Develops[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateDevelop(
      _fbb,
      _Develops);
}

inline DevelopRowT::DevelopRowT(const DevelopRowT &o)
      : Id(o.Id),
        ParentId(o.ParentId),
        Desc(o.Desc),
        Cost((o.Cost) ? new fb::tuple_uint32_uint32T(*o.Cost) : nullptr),
        UolockType(o.UolockType),
        UolockParams(o.UolockParams) {
}

inline DevelopRowT &DevelopRowT::operator=(DevelopRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(ParentId, o.ParentId);
  std::swap(Desc, o.Desc);
  std::swap(Cost, o.Cost);
  std::swap(UolockType, o.UolockType);
  std::swap(UolockParams, o.UolockParams);
  return *this;
}

inline DevelopRowT *DevelopRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<DevelopRowT>(new DevelopRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void DevelopRow::UnPackTo(DevelopRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = ParentId(); _o->ParentId = _e; }
  { auto _e = Desc(); if (_e) _o->Desc = _e->str(); }
  { auto _e = Cost(); if (_e) { if(_o->Cost) { _e->UnPackTo(_o->Cost.get(), _resolver); } else { _o->Cost = std::unique_ptr<fb::tuple_uint32_uint32T>(_e->UnPack(_resolver)); } } else if (_o->Cost) { _o->Cost.reset(); } }
  { auto _e = UolockType(); _o->UolockType = _e; }
  { auto _e = UolockParams(); if (_e) { _o->UolockParams.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->UolockParams[_i] = _e->Get(_i); } } else { _o->UolockParams.resize(0); } }
}

inline ::flatbuffers::Offset<DevelopRow> DevelopRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const DevelopRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDevelopRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<DevelopRow> CreateDevelopRow(::flatbuffers::FlatBufferBuilder &_fbb, const DevelopRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const DevelopRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _ParentId = _o->ParentId;
  auto _Desc = _o->Desc.empty() ? 0 : _fbb.CreateString(_o->Desc);
  auto _Cost = _o->Cost ? Createtuple_uint32_uint32(_fbb, _o->Cost.get(), _rehasher) : 0;
  auto _UolockType = _o->UolockType;
  auto _UolockParams = _o->UolockParams.size() ? _fbb.CreateVector(_o->UolockParams) : 0;
  return fb::CreateDevelopRow(
      _fbb,
      _Id,
      _ParentId,
      _Desc,
      _Cost,
      _UolockType,
      _UolockParams);
}

inline const fb::Develop *GetDevelop(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Develop>(buf);
}

inline const fb::Develop *GetSizePrefixedDevelop(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Develop>(buf);
}

inline bool VerifyDevelopBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Develop>(nullptr);
}

inline bool VerifySizePrefixedDevelopBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Develop>(nullptr);
}

inline void FinishDevelopBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Develop> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDevelopBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Develop> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::DevelopT> UnPackDevelop(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::DevelopT>(GetDevelop(buf)->UnPack(res));
}

inline std::unique_ptr<fb::DevelopT> UnPackSizePrefixedDevelop(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::DevelopT>(GetSizePrefixedDevelop(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_DEVELOP_FB_H_
