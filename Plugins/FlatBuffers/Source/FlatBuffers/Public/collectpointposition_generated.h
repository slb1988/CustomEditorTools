// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COLLECTPOINTPOSITION_FB_H_
#define FLATBUFFERS_GENERATED_COLLECTPOINTPOSITION_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct CollectPointPosition;
struct CollectPointPositionBuilder;
struct CollectPointPositionT;

struct CollectPointPositionRow;
struct CollectPointPositionRowBuilder;
struct CollectPointPositionRowT;

struct CollectPointPositionT : public ::flatbuffers::NativeTable {
  typedef CollectPointPosition TableType;
  std::vector<std::unique_ptr<fb::CollectPointPositionRowT>> CollectPointPositions{};
  CollectPointPositionT() = default;
  CollectPointPositionT(const CollectPointPositionT &o);
  CollectPointPositionT(CollectPointPositionT&&) FLATBUFFERS_NOEXCEPT = default;
  CollectPointPositionT &operator=(CollectPointPositionT o) FLATBUFFERS_NOEXCEPT;
};

struct CollectPointPosition FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CollectPointPositionT NativeTableType;
  typedef CollectPointPositionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COLLECTPOINTPOSITIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectPointPositionRow>> *CollectPointPositions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectPointPositionRow>> *>(VT_COLLECTPOINTPOSITIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COLLECTPOINTPOSITIONS) &&
           verifier.VerifyVector(CollectPointPositions()) &&
           verifier.VerifyVectorOfTables(CollectPointPositions()) &&
           verifier.EndTable();
  }
  CollectPointPositionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CollectPointPositionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CollectPointPosition> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectPointPositionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CollectPointPositionBuilder {
  typedef CollectPointPosition Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_CollectPointPositions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectPointPositionRow>>> CollectPointPositions) {
    fbb_.AddOffset(CollectPointPosition::VT_COLLECTPOINTPOSITIONS, CollectPointPositions);
  }
  explicit CollectPointPositionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CollectPointPosition> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CollectPointPosition>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CollectPointPosition> CreateCollectPointPosition(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::CollectPointPositionRow>>> CollectPointPositions = 0) {
  CollectPointPositionBuilder builder_(_fbb);
  builder_.add_CollectPointPositions(CollectPointPositions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CollectPointPosition> CreateCollectPointPositionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::CollectPointPositionRow>> *CollectPointPositions = nullptr) {
  auto CollectPointPositions__ = CollectPointPositions ? _fbb.CreateVectorOfSortedTables<fb::CollectPointPositionRow>(CollectPointPositions) : 0;
  return fb::CreateCollectPointPosition(
      _fbb,
      CollectPointPositions__);
}

::flatbuffers::Offset<CollectPointPosition> CreateCollectPointPosition(::flatbuffers::FlatBufferBuilder &_fbb, const CollectPointPositionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CollectPointPositionRowT : public ::flatbuffers::NativeTable {
  typedef CollectPointPositionRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  uint32_t CollectPoint = 0;
  std::unique_ptr<fb::tuple_float32_float32_float32T> CenterPosition{};
  std::unique_ptr<fb::tuple_float32_float32_float32_float32T> Rotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> Scale{};
  std::string PrefabPath{};
  CollectPointPositionRowT() = default;
  CollectPointPositionRowT(const CollectPointPositionRowT &o);
  CollectPointPositionRowT(CollectPointPositionRowT&&) FLATBUFFERS_NOEXCEPT = default;
  CollectPointPositionRowT &operator=(CollectPointPositionRowT o) FLATBUFFERS_NOEXCEPT;
};

struct CollectPointPositionRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CollectPointPositionRowT NativeTableType;
  typedef CollectPointPositionRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_COLLECTPOINT = 8,
    VT_CENTERPOSITION = 10,
    VT_ROTATION = 12,
    VT_SCALE = 14,
    VT_PREFABPATH = 16
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const CollectPointPositionRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  uint32_t CollectPoint() const {
    return GetField<uint32_t>(VT_COLLECTPOINT, 0);
  }
  const fb::tuple_float32_float32_float32 *CenterPosition() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_CENTERPOSITION);
  }
  const fb::tuple_float32_float32_float32_float32 *Rotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32_float32 *>(VT_ROTATION);
  }
  const fb::tuple_float32_float32_float32 *Scale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_SCALE);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyField<uint32_t>(verifier, VT_COLLECTPOINT, 4) &&
           VerifyOffset(verifier, VT_CENTERPOSITION) &&
           verifier.VerifyTable(CenterPosition()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(Rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(Scale()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           verifier.EndTable();
  }
  CollectPointPositionRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CollectPointPositionRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<CollectPointPositionRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectPointPositionRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CollectPointPositionRowBuilder {
  typedef CollectPointPositionRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(CollectPointPositionRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(CollectPointPositionRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_CollectPoint(uint32_t CollectPoint) {
    fbb_.AddElement<uint32_t>(CollectPointPositionRow::VT_COLLECTPOINT, CollectPoint, 0);
  }
  void add_CenterPosition(::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition) {
    fbb_.AddOffset(CollectPointPositionRow::VT_CENTERPOSITION, CenterPosition);
  }
  void add_Rotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation) {
    fbb_.AddOffset(CollectPointPositionRow::VT_ROTATION, Rotation);
  }
  void add_Scale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale) {
    fbb_.AddOffset(CollectPointPositionRow::VT_SCALE, Scale);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(CollectPointPositionRow::VT_PREFABPATH, PrefabPath);
  }
  explicit CollectPointPositionRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CollectPointPositionRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CollectPointPositionRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CollectPointPositionRow> CreateCollectPointPositionRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    uint32_t CollectPoint = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0) {
  CollectPointPositionRowBuilder builder_(_fbb);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_Scale(Scale);
  builder_.add_Rotation(Rotation);
  builder_.add_CenterPosition(CenterPosition);
  builder_.add_CollectPoint(CollectPoint);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CollectPointPositionRow> CreateCollectPointPositionRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    uint32_t CollectPoint = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    const char *PrefabPath = nullptr) {
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateCollectPointPositionRow(
      _fbb,
      Id,
      WorldTypeId,
      CollectPoint,
      CenterPosition,
      Rotation,
      Scale,
      PrefabPath__);
}

::flatbuffers::Offset<CollectPointPositionRow> CreateCollectPointPositionRow(::flatbuffers::FlatBufferBuilder &_fbb, const CollectPointPositionRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CollectPointPositionT::CollectPointPositionT(const CollectPointPositionT &o) {
  CollectPointPositions.reserve(o.CollectPointPositions.size());
  for (const auto &CollectPointPositions_ : o.CollectPointPositions) { CollectPointPositions.emplace_back((CollectPointPositions_) ? new fb::CollectPointPositionRowT(*CollectPointPositions_) : nullptr); }
}

inline CollectPointPositionT &CollectPointPositionT::operator=(CollectPointPositionT o) FLATBUFFERS_NOEXCEPT {
  std::swap(CollectPointPositions, o.CollectPointPositions);
  return *this;
}

inline CollectPointPositionT *CollectPointPosition::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CollectPointPositionT>(new CollectPointPositionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CollectPointPosition::UnPackTo(CollectPointPositionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = CollectPointPositions(); if (_e) { _o->CollectPointPositions.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->CollectPointPositions[_i]) { _e->Get(_i)->UnPackTo(_o->CollectPointPositions[_i].get(), _resolver); } else { _o->CollectPointPositions[_i] = std::unique_ptr<fb::CollectPointPositionRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->CollectPointPositions.resize(0); } }
}

inline ::flatbuffers::Offset<CollectPointPosition> CollectPointPosition::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectPointPositionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCollectPointPosition(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CollectPointPosition> CreateCollectPointPosition(::flatbuffers::FlatBufferBuilder &_fbb, const CollectPointPositionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CollectPointPositionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _CollectPointPositions = _o->CollectPointPositions.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::CollectPointPositionRow>> (_o->CollectPointPositions.size(), [](size_t i, _VectorArgs *__va) { return CreateCollectPointPositionRow(*__va->__fbb, __va->__o->CollectPointPositions[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateCollectPointPosition(
      _fbb,
      _CollectPointPositions);
}

inline CollectPointPositionRowT::CollectPointPositionRowT(const CollectPointPositionRowT &o)
      : Id(o.Id),
        WorldTypeId(o.WorldTypeId),
        CollectPoint(o.CollectPoint),
        CenterPosition((o.CenterPosition) ? new fb::tuple_float32_float32_float32T(*o.CenterPosition) : nullptr),
        Rotation((o.Rotation) ? new fb::tuple_float32_float32_float32_float32T(*o.Rotation) : nullptr),
        Scale((o.Scale) ? new fb::tuple_float32_float32_float32T(*o.Scale) : nullptr),
        PrefabPath(o.PrefabPath) {
}

inline CollectPointPositionRowT &CollectPointPositionRowT::operator=(CollectPointPositionRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldTypeId, o.WorldTypeId);
  std::swap(CollectPoint, o.CollectPoint);
  std::swap(CenterPosition, o.CenterPosition);
  std::swap(Rotation, o.Rotation);
  std::swap(Scale, o.Scale);
  std::swap(PrefabPath, o.PrefabPath);
  return *this;
}

inline CollectPointPositionRowT *CollectPointPositionRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CollectPointPositionRowT>(new CollectPointPositionRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void CollectPointPositionRow::UnPackTo(CollectPointPositionRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = CollectPoint(); _o->CollectPoint = _e; }
  { auto _e = CenterPosition(); if (_e) { if(_o->CenterPosition) { _e->UnPackTo(_o->CenterPosition.get(), _resolver); } else { _o->CenterPosition = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->CenterPosition) { _o->CenterPosition.reset(); } }
  { auto _e = Rotation(); if (_e) { if(_o->Rotation) { _e->UnPackTo(_o->Rotation.get(), _resolver); } else { _o->Rotation = std::unique_ptr<fb::tuple_float32_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Rotation) { _o->Rotation.reset(); } }
  { auto _e = Scale(); if (_e) { if(_o->Scale) { _e->UnPackTo(_o->Scale.get(), _resolver); } else { _o->Scale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Scale) { _o->Scale.reset(); } }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
}

inline ::flatbuffers::Offset<CollectPointPositionRow> CollectPointPositionRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CollectPointPositionRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCollectPointPositionRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<CollectPointPositionRow> CreateCollectPointPositionRow(::flatbuffers::FlatBufferBuilder &_fbb, const CollectPointPositionRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CollectPointPositionRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _CollectPoint = _o->CollectPoint;
  auto _CenterPosition = _o->CenterPosition ? Createtuple_float32_float32_float32(_fbb, _o->CenterPosition.get(), _rehasher) : 0;
  auto _Rotation = _o->Rotation ? Createtuple_float32_float32_float32_float32(_fbb, _o->Rotation.get(), _rehasher) : 0;
  auto _Scale = _o->Scale ? Createtuple_float32_float32_float32(_fbb, _o->Scale.get(), _rehasher) : 0;
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  return fb::CreateCollectPointPositionRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _CollectPoint,
      _CenterPosition,
      _Rotation,
      _Scale,
      _PrefabPath);
}

inline const fb::CollectPointPosition *GetCollectPointPosition(const void *buf) {
  return ::flatbuffers::GetRoot<fb::CollectPointPosition>(buf);
}

inline const fb::CollectPointPosition *GetSizePrefixedCollectPointPosition(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::CollectPointPosition>(buf);
}

inline bool VerifyCollectPointPositionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::CollectPointPosition>(nullptr);
}

inline bool VerifySizePrefixedCollectPointPositionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::CollectPointPosition>(nullptr);
}

inline void FinishCollectPointPositionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::CollectPointPosition> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCollectPointPositionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::CollectPointPosition> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::CollectPointPositionT> UnPackCollectPointPosition(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::CollectPointPositionT>(GetCollectPointPosition(buf)->UnPack(res));
}

inline std::unique_ptr<fb::CollectPointPositionT> UnPackSizePrefixedCollectPointPosition(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::CollectPointPositionT>(GetSizePrefixedCollectPointPosition(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_COLLECTPOINTPOSITION_FB_H_
