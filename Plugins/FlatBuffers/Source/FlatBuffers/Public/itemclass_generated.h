// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ITEMCLASS_FB_H_
#define FLATBUFFERS_GENERATED_ITEMCLASS_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct ItemClass;
struct ItemClassBuilder;
struct ItemClassT;

struct ItemClassRow;
struct ItemClassRowBuilder;
struct ItemClassRowT;

struct ItemClassT : public ::flatbuffers::NativeTable {
  typedef ItemClass TableType;
  std::vector<std::unique_ptr<fb::ItemClassRowT>> ItemClasss{};
  ItemClassT() = default;
  ItemClassT(const ItemClassT &o);
  ItemClassT(ItemClassT&&) FLATBUFFERS_NOEXCEPT = default;
  ItemClassT &operator=(ItemClassT o) FLATBUFFERS_NOEXCEPT;
};

struct ItemClass FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemClassT NativeTableType;
  typedef ItemClassBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ITEMCLASSS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemClassRow>> *ItemClasss() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemClassRow>> *>(VT_ITEMCLASSS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ITEMCLASSS) &&
           verifier.VerifyVector(ItemClasss()) &&
           verifier.VerifyVectorOfTables(ItemClasss()) &&
           verifier.EndTable();
  }
  ItemClassT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemClassT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ItemClass> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemClassT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ItemClassBuilder {
  typedef ItemClass Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ItemClasss(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemClassRow>>> ItemClasss) {
    fbb_.AddOffset(ItemClass::VT_ITEMCLASSS, ItemClasss);
  }
  explicit ItemClassBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemClass> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemClass>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemClass> CreateItemClass(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::ItemClassRow>>> ItemClasss = 0) {
  ItemClassBuilder builder_(_fbb);
  builder_.add_ItemClasss(ItemClasss);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemClass> CreateItemClassDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::ItemClassRow>> *ItemClasss = nullptr) {
  auto ItemClasss__ = ItemClasss ? _fbb.CreateVectorOfSortedTables<fb::ItemClassRow>(ItemClasss) : 0;
  return fb::CreateItemClass(
      _fbb,
      ItemClasss__);
}

::flatbuffers::Offset<ItemClass> CreateItemClass(::flatbuffers::FlatBufferBuilder &_fbb, const ItemClassT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct ItemClassRowT : public ::flatbuffers::NativeTable {
  typedef ItemClassRow TableType;
  uint32_t Id = 0;
  std::string Name{};
};

struct ItemClassRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ItemClassRowT NativeTableType;
  typedef ItemClassRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const ItemClassRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  const ::flatbuffers::String *Name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(Name()) &&
           verifier.EndTable();
  }
  ItemClassRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ItemClassRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ItemClassRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemClassRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ItemClassRowBuilder {
  typedef ItemClassRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(ItemClassRow::VT_ID, Id, 0);
  }
  void add_Name(::flatbuffers::Offset<::flatbuffers::String> Name) {
    fbb_.AddOffset(ItemClassRow::VT_NAME, Name);
  }
  explicit ItemClassRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ItemClassRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ItemClassRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ItemClassRow> CreateItemClassRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Name = 0) {
  ItemClassRowBuilder builder_(_fbb);
  builder_.add_Name(Name);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ItemClassRow> CreateItemClassRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *Name = nullptr) {
  auto Name__ = Name ? _fbb.CreateString(Name) : 0;
  return fb::CreateItemClassRow(
      _fbb,
      Id,
      Name__);
}

::flatbuffers::Offset<ItemClassRow> CreateItemClassRow(::flatbuffers::FlatBufferBuilder &_fbb, const ItemClassRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ItemClassT::ItemClassT(const ItemClassT &o) {
  ItemClasss.reserve(o.ItemClasss.size());
  for (const auto &ItemClasss_ : o.ItemClasss) { ItemClasss.emplace_back((ItemClasss_) ? new fb::ItemClassRowT(*ItemClasss_) : nullptr); }
}

inline ItemClassT &ItemClassT::operator=(ItemClassT o) FLATBUFFERS_NOEXCEPT {
  std::swap(ItemClasss, o.ItemClasss);
  return *this;
}

inline ItemClassT *ItemClass::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemClassT>(new ItemClassT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ItemClass::UnPackTo(ItemClassT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = ItemClasss(); if (_e) { _o->ItemClasss.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->ItemClasss[_i]) { _e->Get(_i)->UnPackTo(_o->ItemClasss[_i].get(), _resolver); } else { _o->ItemClasss[_i] = std::unique_ptr<fb::ItemClassRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->ItemClasss.resize(0); } }
}

inline ::flatbuffers::Offset<ItemClass> ItemClass::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemClassT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItemClass(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ItemClass> CreateItemClass(::flatbuffers::FlatBufferBuilder &_fbb, const ItemClassT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ItemClassT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _ItemClasss = _o->ItemClasss.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::ItemClassRow>> (_o->ItemClasss.size(), [](size_t i, _VectorArgs *__va) { return CreateItemClassRow(*__va->__fbb, __va->__o->ItemClasss[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateItemClass(
      _fbb,
      _ItemClasss);
}

inline ItemClassRowT *ItemClassRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ItemClassRowT>(new ItemClassRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ItemClassRow::UnPackTo(ItemClassRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Name(); if (_e) _o->Name = _e->str(); }
}

inline ::flatbuffers::Offset<ItemClassRow> ItemClassRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ItemClassRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateItemClassRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ItemClassRow> CreateItemClassRow(::flatbuffers::FlatBufferBuilder &_fbb, const ItemClassRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ItemClassRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Name = _o->Name.empty() ? 0 : _fbb.CreateString(_o->Name);
  return fb::CreateItemClassRow(
      _fbb,
      _Id,
      _Name);
}

inline const fb::ItemClass *GetItemClass(const void *buf) {
  return ::flatbuffers::GetRoot<fb::ItemClass>(buf);
}

inline const fb::ItemClass *GetSizePrefixedItemClass(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::ItemClass>(buf);
}

inline bool VerifyItemClassBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::ItemClass>(nullptr);
}

inline bool VerifySizePrefixedItemClassBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::ItemClass>(nullptr);
}

inline void FinishItemClassBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::ItemClass> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedItemClassBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::ItemClass> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::ItemClassT> UnPackItemClass(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::ItemClassT>(GetItemClass(buf)->UnPack(res));
}

inline std::unique_ptr<fb::ItemClassT> UnPackSizePrefixedItemClass(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::ItemClassT>(GetSizePrefixedItemClass(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_ITEMCLASS_FB_H_
