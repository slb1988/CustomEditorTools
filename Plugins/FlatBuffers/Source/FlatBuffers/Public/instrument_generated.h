// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INSTRUMENT_FB_H_
#define FLATBUFFERS_GENERATED_INSTRUMENT_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Instrument;
struct InstrumentBuilder;
struct InstrumentT;

struct InstrumentRow;
struct InstrumentRowBuilder;
struct InstrumentRowT;

struct InstrumentT : public ::flatbuffers::NativeTable {
  typedef Instrument TableType;
  std::vector<std::unique_ptr<fb::InstrumentRowT>> Instruments{};
  InstrumentT() = default;
  InstrumentT(const InstrumentT &o);
  InstrumentT(InstrumentT&&) FLATBUFFERS_NOEXCEPT = default;
  InstrumentT &operator=(InstrumentT o) FLATBUFFERS_NOEXCEPT;
};

struct Instrument FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InstrumentT NativeTableType;
  typedef InstrumentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INSTRUMENTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentRow>> *Instruments() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentRow>> *>(VT_INSTRUMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INSTRUMENTS) &&
           verifier.VerifyVector(Instruments()) &&
           verifier.VerifyVectorOfTables(Instruments()) &&
           verifier.EndTable();
  }
  InstrumentT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(InstrumentT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Instrument> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct InstrumentBuilder {
  typedef Instrument Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Instruments(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentRow>>> Instruments) {
    fbb_.AddOffset(Instrument::VT_INSTRUMENTS, Instruments);
  }
  explicit InstrumentBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Instrument> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Instrument>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Instrument> CreateInstrument(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::InstrumentRow>>> Instruments = 0) {
  InstrumentBuilder builder_(_fbb);
  builder_.add_Instruments(Instruments);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Instrument> CreateInstrumentDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::InstrumentRow>> *Instruments = nullptr) {
  auto Instruments__ = Instruments ? _fbb.CreateVectorOfSortedTables<fb::InstrumentRow>(Instruments) : 0;
  return fb::CreateInstrument(
      _fbb,
      Instruments__);
}

::flatbuffers::Offset<Instrument> CreateInstrument(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct InstrumentRowT : public ::flatbuffers::NativeTable {
  typedef InstrumentRow TableType;
  uint32_t Id = 0;
  std::string Name{};
  std::string Desc{};
  std::string Icon{};
  uint32_t Quality = 0;
  uint32_t InitRank = 0;
  uint32_t MaxRank = 0;
  uint32_t ModelId = 0;
  uint32_t TemplateId = 0;
  float MusicRadius = 0.0f;
  bool Tradable = false;
  bool Sellable = false;
};

struct InstrumentRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InstrumentRowT NativeTableType;
  typedef InstrumentRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_DESC = 8,
    VT_ICON = 10,
    VT_QUALITY = 12,
    VT_INITRANK = 14,
    VT_MAXRANK = 16,
    VT_MODELID = 18,
    VT_TEMPLATEID = 20,
    VT_MUSICRADIUS = 22,
    VT_TRADABLE = 24,
    VT_SELLABLE = 26
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const InstrumentRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  const ::flatbuffers::String *Name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *Desc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESC);
  }
  const ::flatbuffers::String *Icon() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ICON);
  }
  uint32_t Quality() const {
    return GetField<uint32_t>(VT_QUALITY, 0);
  }
  uint32_t InitRank() const {
    return GetField<uint32_t>(VT_INITRANK, 0);
  }
  uint32_t MaxRank() const {
    return GetField<uint32_t>(VT_MAXRANK, 0);
  }
  uint32_t ModelId() const {
    return GetField<uint32_t>(VT_MODELID, 0);
  }
  uint32_t TemplateId() const {
    return GetField<uint32_t>(VT_TEMPLATEID, 0);
  }
  float MusicRadius() const {
    return GetField<float>(VT_MUSICRADIUS, 0.0f);
  }
  bool Tradable() const {
    return GetField<uint8_t>(VT_TRADABLE, 0) != 0;
  }
  bool Sellable() const {
    return GetField<uint8_t>(VT_SELLABLE, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(Name()) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(Desc()) &&
           VerifyOffset(verifier, VT_ICON) &&
           verifier.VerifyString(Icon()) &&
           VerifyField<uint32_t>(verifier, VT_QUALITY, 4) &&
           VerifyField<uint32_t>(verifier, VT_INITRANK, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAXRANK, 4) &&
           VerifyField<uint32_t>(verifier, VT_MODELID, 4) &&
           VerifyField<uint32_t>(verifier, VT_TEMPLATEID, 4) &&
           VerifyField<float>(verifier, VT_MUSICRADIUS, 4) &&
           VerifyField<uint8_t>(verifier, VT_TRADABLE, 1) &&
           VerifyField<uint8_t>(verifier, VT_SELLABLE, 1) &&
           verifier.EndTable();
  }
  InstrumentRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(InstrumentRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<InstrumentRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct InstrumentRowBuilder {
  typedef InstrumentRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(InstrumentRow::VT_ID, Id, 0);
  }
  void add_Name(::flatbuffers::Offset<::flatbuffers::String> Name) {
    fbb_.AddOffset(InstrumentRow::VT_NAME, Name);
  }
  void add_Desc(::flatbuffers::Offset<::flatbuffers::String> Desc) {
    fbb_.AddOffset(InstrumentRow::VT_DESC, Desc);
  }
  void add_Icon(::flatbuffers::Offset<::flatbuffers::String> Icon) {
    fbb_.AddOffset(InstrumentRow::VT_ICON, Icon);
  }
  void add_Quality(uint32_t Quality) {
    fbb_.AddElement<uint32_t>(InstrumentRow::VT_QUALITY, Quality, 0);
  }
  void add_InitRank(uint32_t InitRank) {
    fbb_.AddElement<uint32_t>(InstrumentRow::VT_INITRANK, InitRank, 0);
  }
  void add_MaxRank(uint32_t MaxRank) {
    fbb_.AddElement<uint32_t>(InstrumentRow::VT_MAXRANK, MaxRank, 0);
  }
  void add_ModelId(uint32_t ModelId) {
    fbb_.AddElement<uint32_t>(InstrumentRow::VT_MODELID, ModelId, 0);
  }
  void add_TemplateId(uint32_t TemplateId) {
    fbb_.AddElement<uint32_t>(InstrumentRow::VT_TEMPLATEID, TemplateId, 0);
  }
  void add_MusicRadius(float MusicRadius) {
    fbb_.AddElement<float>(InstrumentRow::VT_MUSICRADIUS, MusicRadius, 0.0f);
  }
  void add_Tradable(bool Tradable) {
    fbb_.AddElement<uint8_t>(InstrumentRow::VT_TRADABLE, static_cast<uint8_t>(Tradable), 0);
  }
  void add_Sellable(bool Sellable) {
    fbb_.AddElement<uint8_t>(InstrumentRow::VT_SELLABLE, static_cast<uint8_t>(Sellable), 0);
  }
  explicit InstrumentRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InstrumentRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InstrumentRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InstrumentRow> CreateInstrumentRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Desc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Icon = 0,
    uint32_t Quality = 0,
    uint32_t InitRank = 0,
    uint32_t MaxRank = 0,
    uint32_t ModelId = 0,
    uint32_t TemplateId = 0,
    float MusicRadius = 0.0f,
    bool Tradable = false,
    bool Sellable = false) {
  InstrumentRowBuilder builder_(_fbb);
  builder_.add_MusicRadius(MusicRadius);
  builder_.add_TemplateId(TemplateId);
  builder_.add_ModelId(ModelId);
  builder_.add_MaxRank(MaxRank);
  builder_.add_InitRank(InitRank);
  builder_.add_Quality(Quality);
  builder_.add_Icon(Icon);
  builder_.add_Desc(Desc);
  builder_.add_Name(Name);
  builder_.add_Id(Id);
  builder_.add_Sellable(Sellable);
  builder_.add_Tradable(Tradable);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<InstrumentRow> CreateInstrumentRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *Name = nullptr,
    const char *Desc = nullptr,
    const char *Icon = nullptr,
    uint32_t Quality = 0,
    uint32_t InitRank = 0,
    uint32_t MaxRank = 0,
    uint32_t ModelId = 0,
    uint32_t TemplateId = 0,
    float MusicRadius = 0.0f,
    bool Tradable = false,
    bool Sellable = false) {
  auto Name__ = Name ? _fbb.CreateString(Name) : 0;
  auto Desc__ = Desc ? _fbb.CreateString(Desc) : 0;
  auto Icon__ = Icon ? _fbb.CreateString(Icon) : 0;
  return fb::CreateInstrumentRow(
      _fbb,
      Id,
      Name__,
      Desc__,
      Icon__,
      Quality,
      InitRank,
      MaxRank,
      ModelId,
      TemplateId,
      MusicRadius,
      Tradable,
      Sellable);
}

::flatbuffers::Offset<InstrumentRow> CreateInstrumentRow(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline InstrumentT::InstrumentT(const InstrumentT &o) {
  Instruments.reserve(o.Instruments.size());
  for (const auto &Instruments_ : o.Instruments) { Instruments.emplace_back((Instruments_) ? new fb::InstrumentRowT(*Instruments_) : nullptr); }
}

inline InstrumentT &InstrumentT::operator=(InstrumentT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Instruments, o.Instruments);
  return *this;
}

inline InstrumentT *Instrument::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<InstrumentT>(new InstrumentT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Instrument::UnPackTo(InstrumentT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Instruments(); if (_e) { _o->Instruments.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Instruments[_i]) { _e->Get(_i)->UnPackTo(_o->Instruments[_i].get(), _resolver); } else { _o->Instruments[_i] = std::unique_ptr<fb::InstrumentRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Instruments.resize(0); } }
}

inline ::flatbuffers::Offset<Instrument> Instrument::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInstrument(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Instrument> CreateInstrument(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const InstrumentT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Instruments = _o->Instruments.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::InstrumentRow>> (_o->Instruments.size(), [](size_t i, _VectorArgs *__va) { return CreateInstrumentRow(*__va->__fbb, __va->__o->Instruments[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateInstrument(
      _fbb,
      _Instruments);
}

inline InstrumentRowT *InstrumentRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<InstrumentRowT>(new InstrumentRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void InstrumentRow::UnPackTo(InstrumentRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Name(); if (_e) _o->Name = _e->str(); }
  { auto _e = Desc(); if (_e) _o->Desc = _e->str(); }
  { auto _e = Icon(); if (_e) _o->Icon = _e->str(); }
  { auto _e = Quality(); _o->Quality = _e; }
  { auto _e = InitRank(); _o->InitRank = _e; }
  { auto _e = MaxRank(); _o->MaxRank = _e; }
  { auto _e = ModelId(); _o->ModelId = _e; }
  { auto _e = TemplateId(); _o->TemplateId = _e; }
  { auto _e = MusicRadius(); _o->MusicRadius = _e; }
  { auto _e = Tradable(); _o->Tradable = _e; }
  { auto _e = Sellable(); _o->Sellable = _e; }
}

inline ::flatbuffers::Offset<InstrumentRow> InstrumentRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateInstrumentRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<InstrumentRow> CreateInstrumentRow(::flatbuffers::FlatBufferBuilder &_fbb, const InstrumentRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const InstrumentRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Name = _o->Name.empty() ? 0 : _fbb.CreateString(_o->Name);
  auto _Desc = _o->Desc.empty() ? 0 : _fbb.CreateString(_o->Desc);
  auto _Icon = _o->Icon.empty() ? 0 : _fbb.CreateString(_o->Icon);
  auto _Quality = _o->Quality;
  auto _InitRank = _o->InitRank;
  auto _MaxRank = _o->MaxRank;
  auto _ModelId = _o->ModelId;
  auto _TemplateId = _o->TemplateId;
  auto _MusicRadius = _o->MusicRadius;
  auto _Tradable = _o->Tradable;
  auto _Sellable = _o->Sellable;
  return fb::CreateInstrumentRow(
      _fbb,
      _Id,
      _Name,
      _Desc,
      _Icon,
      _Quality,
      _InitRank,
      _MaxRank,
      _ModelId,
      _TemplateId,
      _MusicRadius,
      _Tradable,
      _Sellable);
}

inline const fb::Instrument *GetInstrument(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Instrument>(buf);
}

inline const fb::Instrument *GetSizePrefixedInstrument(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Instrument>(buf);
}

inline bool VerifyInstrumentBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Instrument>(nullptr);
}

inline bool VerifySizePrefixedInstrumentBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Instrument>(nullptr);
}

inline void FinishInstrumentBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Instrument> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInstrumentBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Instrument> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::InstrumentT> UnPackInstrument(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::InstrumentT>(GetInstrument(buf)->UnPack(res));
}

inline std::unique_ptr<fb::InstrumentT> UnPackSizePrefixedInstrument(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::InstrumentT>(GetSizePrefixedInstrument(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_INSTRUMENT_FB_H_
