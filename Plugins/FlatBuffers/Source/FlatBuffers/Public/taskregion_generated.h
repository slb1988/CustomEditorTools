// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TASKREGION_FB_H_
#define FLATBUFFERS_GENERATED_TASKREGION_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct TaskRegion;
struct TaskRegionBuilder;
struct TaskRegionT;

struct TaskRegionRow;
struct TaskRegionRowBuilder;
struct TaskRegionRowT;

struct TaskRegionT : public ::flatbuffers::NativeTable {
  typedef TaskRegion TableType;
  std::vector<std::unique_ptr<fb::TaskRegionRowT>> TaskRegions{};
  TaskRegionT() = default;
  TaskRegionT(const TaskRegionT &o);
  TaskRegionT(TaskRegionT&&) FLATBUFFERS_NOEXCEPT = default;
  TaskRegionT &operator=(TaskRegionT o) FLATBUFFERS_NOEXCEPT;
};

struct TaskRegion FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TaskRegionT NativeTableType;
  typedef TaskRegionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TASKREGIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::TaskRegionRow>> *TaskRegions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::TaskRegionRow>> *>(VT_TASKREGIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TASKREGIONS) &&
           verifier.VerifyVector(TaskRegions()) &&
           verifier.VerifyVectorOfTables(TaskRegions()) &&
           verifier.EndTable();
  }
  TaskRegionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TaskRegionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<TaskRegion> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TaskRegionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TaskRegionBuilder {
  typedef TaskRegion Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_TaskRegions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::TaskRegionRow>>> TaskRegions) {
    fbb_.AddOffset(TaskRegion::VT_TASKREGIONS, TaskRegions);
  }
  explicit TaskRegionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TaskRegion> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TaskRegion>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TaskRegion> CreateTaskRegion(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::TaskRegionRow>>> TaskRegions = 0) {
  TaskRegionBuilder builder_(_fbb);
  builder_.add_TaskRegions(TaskRegions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TaskRegion> CreateTaskRegionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::TaskRegionRow>> *TaskRegions = nullptr) {
  auto TaskRegions__ = TaskRegions ? _fbb.CreateVectorOfSortedTables<fb::TaskRegionRow>(TaskRegions) : 0;
  return fb::CreateTaskRegion(
      _fbb,
      TaskRegions__);
}

::flatbuffers::Offset<TaskRegion> CreateTaskRegion(::flatbuffers::FlatBufferBuilder &_fbb, const TaskRegionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TaskRegionRowT : public ::flatbuffers::NativeTable {
  typedef TaskRegionRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  std::vector<uint32_t> Tasks{};
};

struct TaskRegionRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TaskRegionRowT NativeTableType;
  typedef TaskRegionRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_TASKS = 8
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const TaskRegionRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  const ::flatbuffers::Vector<uint32_t> *Tasks() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_TASKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyOffset(verifier, VT_TASKS) &&
           verifier.VerifyVector(Tasks()) &&
           verifier.EndTable();
  }
  TaskRegionRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TaskRegionRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<TaskRegionRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TaskRegionRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TaskRegionRowBuilder {
  typedef TaskRegionRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(TaskRegionRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(TaskRegionRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_Tasks(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> Tasks) {
    fbb_.AddOffset(TaskRegionRow::VT_TASKS, Tasks);
  }
  explicit TaskRegionRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TaskRegionRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TaskRegionRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TaskRegionRow> CreateTaskRegionRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> Tasks = 0) {
  TaskRegionRowBuilder builder_(_fbb);
  builder_.add_Tasks(Tasks);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TaskRegionRow> CreateTaskRegionRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    const std::vector<uint32_t> *Tasks = nullptr) {
  auto Tasks__ = Tasks ? _fbb.CreateVector<uint32_t>(*Tasks) : 0;
  return fb::CreateTaskRegionRow(
      _fbb,
      Id,
      WorldTypeId,
      Tasks__);
}

::flatbuffers::Offset<TaskRegionRow> CreateTaskRegionRow(::flatbuffers::FlatBufferBuilder &_fbb, const TaskRegionRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TaskRegionT::TaskRegionT(const TaskRegionT &o) {
  TaskRegions.reserve(o.TaskRegions.size());
  for (const auto &TaskRegions_ : o.TaskRegions) { TaskRegions.emplace_back((TaskRegions_) ? new fb::TaskRegionRowT(*TaskRegions_) : nullptr); }
}

inline TaskRegionT &TaskRegionT::operator=(TaskRegionT o) FLATBUFFERS_NOEXCEPT {
  std::swap(TaskRegions, o.TaskRegions);
  return *this;
}

inline TaskRegionT *TaskRegion::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TaskRegionT>(new TaskRegionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TaskRegion::UnPackTo(TaskRegionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = TaskRegions(); if (_e) { _o->TaskRegions.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->TaskRegions[_i]) { _e->Get(_i)->UnPackTo(_o->TaskRegions[_i].get(), _resolver); } else { _o->TaskRegions[_i] = std::unique_ptr<fb::TaskRegionRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->TaskRegions.resize(0); } }
}

inline ::flatbuffers::Offset<TaskRegion> TaskRegion::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TaskRegionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTaskRegion(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<TaskRegion> CreateTaskRegion(::flatbuffers::FlatBufferBuilder &_fbb, const TaskRegionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TaskRegionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _TaskRegions = _o->TaskRegions.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::TaskRegionRow>> (_o->TaskRegions.size(), [](size_t i, _VectorArgs *__va) { return CreateTaskRegionRow(*__va->__fbb, __va->__o->TaskRegions[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateTaskRegion(
      _fbb,
      _TaskRegions);
}

inline TaskRegionRowT *TaskRegionRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TaskRegionRowT>(new TaskRegionRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TaskRegionRow::UnPackTo(TaskRegionRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = Tasks(); if (_e) { _o->Tasks.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->Tasks[_i] = _e->Get(_i); } } else { _o->Tasks.resize(0); } }
}

inline ::flatbuffers::Offset<TaskRegionRow> TaskRegionRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TaskRegionRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTaskRegionRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<TaskRegionRow> CreateTaskRegionRow(::flatbuffers::FlatBufferBuilder &_fbb, const TaskRegionRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TaskRegionRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _Tasks = _o->Tasks.size() ? _fbb.CreateVector(_o->Tasks) : 0;
  return fb::CreateTaskRegionRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _Tasks);
}

inline const fb::TaskRegion *GetTaskRegion(const void *buf) {
  return ::flatbuffers::GetRoot<fb::TaskRegion>(buf);
}

inline const fb::TaskRegion *GetSizePrefixedTaskRegion(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::TaskRegion>(buf);
}

inline bool VerifyTaskRegionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::TaskRegion>(nullptr);
}

inline bool VerifySizePrefixedTaskRegionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::TaskRegion>(nullptr);
}

inline void FinishTaskRegionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::TaskRegion> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTaskRegionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::TaskRegion> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::TaskRegionT> UnPackTaskRegion(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::TaskRegionT>(GetTaskRegion(buf)->UnPack(res));
}

inline std::unique_ptr<fb::TaskRegionT> UnPackSizePrefixedTaskRegion(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::TaskRegionT>(GetSizePrefixedTaskRegion(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_TASKREGION_FB_H_
