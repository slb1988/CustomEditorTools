// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEITEM_FB_H_
#define FLATBUFFERS_GENERATED_GAMEITEM_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct GameItem;
struct GameItemBuilder;
struct GameItemT;

struct GameItemRow;
struct GameItemRowBuilder;
struct GameItemRowT;

struct GameItemT : public ::flatbuffers::NativeTable {
  typedef GameItem TableType;
  std::vector<std::unique_ptr<fb::GameItemRowT>> GameItems{};
  GameItemT() = default;
  GameItemT(const GameItemT &o);
  GameItemT(GameItemT&&) FLATBUFFERS_NOEXCEPT = default;
  GameItemT &operator=(GameItemT o) FLATBUFFERS_NOEXCEPT;
};

struct GameItem FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameItemT NativeTableType;
  typedef GameItemBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GAMEITEMS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::GameItemRow>> *GameItems() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::GameItemRow>> *>(VT_GAMEITEMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GAMEITEMS) &&
           verifier.VerifyVector(GameItems()) &&
           verifier.VerifyVectorOfTables(GameItems()) &&
           verifier.EndTable();
  }
  GameItemT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GameItemT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<GameItem> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GameItemT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GameItemBuilder {
  typedef GameItem Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_GameItems(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::GameItemRow>>> GameItems) {
    fbb_.AddOffset(GameItem::VT_GAMEITEMS, GameItems);
  }
  explicit GameItemBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameItem> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameItem>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameItem> CreateGameItem(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::GameItemRow>>> GameItems = 0) {
  GameItemBuilder builder_(_fbb);
  builder_.add_GameItems(GameItems);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameItem> CreateGameItemDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::GameItemRow>> *GameItems = nullptr) {
  auto GameItems__ = GameItems ? _fbb.CreateVectorOfSortedTables<fb::GameItemRow>(GameItems) : 0;
  return fb::CreateGameItem(
      _fbb,
      GameItems__);
}

::flatbuffers::Offset<GameItem> CreateGameItem(::flatbuffers::FlatBufferBuilder &_fbb, const GameItemT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct GameItemRowT : public ::flatbuffers::NativeTable {
  typedef GameItemRow TableType;
  uint32_t Id = 0;
  std::string ItemName{};
  std::unique_ptr<fb::tuple_int32_string_list_uint32T> TupleTest{};
  std::unique_ptr<fb::map_int32_int64T> MapTest{};
  std::vector<std::unique_ptr<fb::tuple_int32_stringT>> TupleInList{};
  float Float32Test = 0.0f;
  std::unique_ptr<fb::tuple_int32_tuple_uint32_stringT> TupleInTuple{};
  std::vector<fb::ItemType> EnumInList{};
  GameItemRowT() = default;
  GameItemRowT(const GameItemRowT &o);
  GameItemRowT(GameItemRowT&&) FLATBUFFERS_NOEXCEPT = default;
  GameItemRowT &operator=(GameItemRowT o) FLATBUFFERS_NOEXCEPT;
};

struct GameItemRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameItemRowT NativeTableType;
  typedef GameItemRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_ITEMNAME = 6,
    VT_TUPLETEST = 8,
    VT_MAPTEST = 10,
    VT_TUPLEINLIST = 12,
    VT_FLOAT32TEST = 14,
    VT_TUPLEINTUPLE = 16,
    VT_ENUMINLIST = 18
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const GameItemRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  const ::flatbuffers::String *ItemName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ITEMNAME);
  }
  const fb::tuple_int32_string_list_uint32 *TupleTest() const {
    return GetPointer<const fb::tuple_int32_string_list_uint32 *>(VT_TUPLETEST);
  }
  const fb::map_int32_int64 *MapTest() const {
    return GetPointer<const fb::map_int32_int64 *>(VT_MAPTEST);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_string>> *TupleInList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_string>> *>(VT_TUPLEINLIST);
  }
  float Float32Test() const {
    return GetField<float>(VT_FLOAT32TEST, 0.0f);
  }
  const fb::tuple_int32_tuple_uint32_string *TupleInTuple() const {
    return GetPointer<const fb::tuple_int32_tuple_uint32_string *>(VT_TUPLEINTUPLE);
  }
  const ::flatbuffers::Vector<int32_t> *EnumInList() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_ENUMINLIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_ITEMNAME) &&
           verifier.VerifyString(ItemName()) &&
           VerifyOffset(verifier, VT_TUPLETEST) &&
           verifier.VerifyTable(TupleTest()) &&
           VerifyOffset(verifier, VT_MAPTEST) &&
           verifier.VerifyTable(MapTest()) &&
           VerifyOffset(verifier, VT_TUPLEINLIST) &&
           verifier.VerifyVector(TupleInList()) &&
           verifier.VerifyVectorOfTables(TupleInList()) &&
           VerifyField<float>(verifier, VT_FLOAT32TEST, 4) &&
           VerifyOffset(verifier, VT_TUPLEINTUPLE) &&
           verifier.VerifyTable(TupleInTuple()) &&
           VerifyOffset(verifier, VT_ENUMINLIST) &&
           verifier.VerifyVector(EnumInList()) &&
           verifier.EndTable();
  }
  GameItemRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GameItemRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<GameItemRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GameItemRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GameItemRowBuilder {
  typedef GameItemRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(GameItemRow::VT_ID, Id, 0);
  }
  void add_ItemName(::flatbuffers::Offset<::flatbuffers::String> ItemName) {
    fbb_.AddOffset(GameItemRow::VT_ITEMNAME, ItemName);
  }
  void add_TupleTest(::flatbuffers::Offset<fb::tuple_int32_string_list_uint32> TupleTest) {
    fbb_.AddOffset(GameItemRow::VT_TUPLETEST, TupleTest);
  }
  void add_MapTest(::flatbuffers::Offset<fb::map_int32_int64> MapTest) {
    fbb_.AddOffset(GameItemRow::VT_MAPTEST, MapTest);
  }
  void add_TupleInList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_string>>> TupleInList) {
    fbb_.AddOffset(GameItemRow::VT_TUPLEINLIST, TupleInList);
  }
  void add_Float32Test(float Float32Test) {
    fbb_.AddElement<float>(GameItemRow::VT_FLOAT32TEST, Float32Test, 0.0f);
  }
  void add_TupleInTuple(::flatbuffers::Offset<fb::tuple_int32_tuple_uint32_string> TupleInTuple) {
    fbb_.AddOffset(GameItemRow::VT_TUPLEINTUPLE, TupleInTuple);
  }
  void add_EnumInList(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> EnumInList) {
    fbb_.AddOffset(GameItemRow::VT_ENUMINLIST, EnumInList);
  }
  explicit GameItemRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameItemRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameItemRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameItemRow> CreateGameItemRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ItemName = 0,
    ::flatbuffers::Offset<fb::tuple_int32_string_list_uint32> TupleTest = 0,
    ::flatbuffers::Offset<fb::map_int32_int64> MapTest = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_string>>> TupleInList = 0,
    float Float32Test = 0.0f,
    ::flatbuffers::Offset<fb::tuple_int32_tuple_uint32_string> TupleInTuple = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> EnumInList = 0) {
  GameItemRowBuilder builder_(_fbb);
  builder_.add_EnumInList(EnumInList);
  builder_.add_TupleInTuple(TupleInTuple);
  builder_.add_Float32Test(Float32Test);
  builder_.add_TupleInList(TupleInList);
  builder_.add_MapTest(MapTest);
  builder_.add_TupleTest(TupleTest);
  builder_.add_ItemName(ItemName);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GameItemRow> CreateGameItemRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *ItemName = nullptr,
    ::flatbuffers::Offset<fb::tuple_int32_string_list_uint32> TupleTest = 0,
    ::flatbuffers::Offset<fb::map_int32_int64> MapTest = 0,
    const std::vector<::flatbuffers::Offset<fb::tuple_int32_string>> *TupleInList = nullptr,
    float Float32Test = 0.0f,
    ::flatbuffers::Offset<fb::tuple_int32_tuple_uint32_string> TupleInTuple = 0,
    const std::vector<int32_t> *EnumInList = nullptr) {
  auto ItemName__ = ItemName ? _fbb.CreateString(ItemName) : 0;
  auto TupleInList__ = TupleInList ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_string>>(*TupleInList) : 0;
  auto EnumInList__ = EnumInList ? _fbb.CreateVector<int32_t>(*EnumInList) : 0;
  return fb::CreateGameItemRow(
      _fbb,
      Id,
      ItemName__,
      TupleTest,
      MapTest,
      TupleInList__,
      Float32Test,
      TupleInTuple,
      EnumInList__);
}

::flatbuffers::Offset<GameItemRow> CreateGameItemRow(::flatbuffers::FlatBufferBuilder &_fbb, const GameItemRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GameItemT::GameItemT(const GameItemT &o) {
  GameItems.reserve(o.GameItems.size());
  for (const auto &GameItems_ : o.GameItems) { GameItems.emplace_back((GameItems_) ? new fb::GameItemRowT(*GameItems_) : nullptr); }
}

inline GameItemT &GameItemT::operator=(GameItemT o) FLATBUFFERS_NOEXCEPT {
  std::swap(GameItems, o.GameItems);
  return *this;
}

inline GameItemT *GameItem::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GameItemT>(new GameItemT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GameItem::UnPackTo(GameItemT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = GameItems(); if (_e) { _o->GameItems.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->GameItems[_i]) { _e->Get(_i)->UnPackTo(_o->GameItems[_i].get(), _resolver); } else { _o->GameItems[_i] = std::unique_ptr<fb::GameItemRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->GameItems.resize(0); } }
}

inline ::flatbuffers::Offset<GameItem> GameItem::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GameItemT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGameItem(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<GameItem> CreateGameItem(::flatbuffers::FlatBufferBuilder &_fbb, const GameItemT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const GameItemT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _GameItems = _o->GameItems.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::GameItemRow>> (_o->GameItems.size(), [](size_t i, _VectorArgs *__va) { return CreateGameItemRow(*__va->__fbb, __va->__o->GameItems[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateGameItem(
      _fbb,
      _GameItems);
}

inline GameItemRowT::GameItemRowT(const GameItemRowT &o)
      : Id(o.Id),
        ItemName(o.ItemName),
        TupleTest((o.TupleTest) ? new fb::tuple_int32_string_list_uint32T(*o.TupleTest) : nullptr),
        MapTest((o.MapTest) ? new fb::map_int32_int64T(*o.MapTest) : nullptr),
        Float32Test(o.Float32Test),
        TupleInTuple((o.TupleInTuple) ? new fb::tuple_int32_tuple_uint32_stringT(*o.TupleInTuple) : nullptr),
        EnumInList(o.EnumInList) {
  TupleInList.reserve(o.TupleInList.size());
  for (const auto &TupleInList_ : o.TupleInList) { TupleInList.emplace_back((TupleInList_) ? new fb::tuple_int32_stringT(*TupleInList_) : nullptr); }
}

inline GameItemRowT &GameItemRowT::operator=(GameItemRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(ItemName, o.ItemName);
  std::swap(TupleTest, o.TupleTest);
  std::swap(MapTest, o.MapTest);
  std::swap(TupleInList, o.TupleInList);
  std::swap(Float32Test, o.Float32Test);
  std::swap(TupleInTuple, o.TupleInTuple);
  std::swap(EnumInList, o.EnumInList);
  return *this;
}

inline GameItemRowT *GameItemRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<GameItemRowT>(new GameItemRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void GameItemRow::UnPackTo(GameItemRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = ItemName(); if (_e) _o->ItemName = _e->str(); }
  { auto _e = TupleTest(); if (_e) { if(_o->TupleTest) { _e->UnPackTo(_o->TupleTest.get(), _resolver); } else { _o->TupleTest = std::unique_ptr<fb::tuple_int32_string_list_uint32T>(_e->UnPack(_resolver)); } } else if (_o->TupleTest) { _o->TupleTest.reset(); } }
  { auto _e = MapTest(); if (_e) { if(_o->MapTest) { _e->UnPackTo(_o->MapTest.get(), _resolver); } else { _o->MapTest = std::unique_ptr<fb::map_int32_int64T>(_e->UnPack(_resolver)); } } else if (_o->MapTest) { _o->MapTest.reset(); } }
  { auto _e = TupleInList(); if (_e) { _o->TupleInList.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->TupleInList[_i]) { _e->Get(_i)->UnPackTo(_o->TupleInList[_i].get(), _resolver); } else { _o->TupleInList[_i] = std::unique_ptr<fb::tuple_int32_stringT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->TupleInList.resize(0); } }
  { auto _e = Float32Test(); _o->Float32Test = _e; }
  { auto _e = TupleInTuple(); if (_e) { if(_o->TupleInTuple) { _e->UnPackTo(_o->TupleInTuple.get(), _resolver); } else { _o->TupleInTuple = std::unique_ptr<fb::tuple_int32_tuple_uint32_stringT>(_e->UnPack(_resolver)); } } else if (_o->TupleInTuple) { _o->TupleInTuple.reset(); } }
  { auto _e = EnumInList(); if (_e) { _o->EnumInList.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->EnumInList[_i] = static_cast<fb::ItemType>(_e->Get(_i)); } } else { _o->EnumInList.resize(0); } }
}

inline ::flatbuffers::Offset<GameItemRow> GameItemRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const GameItemRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGameItemRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<GameItemRow> CreateGameItemRow(::flatbuffers::FlatBufferBuilder &_fbb, const GameItemRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const GameItemRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _ItemName = _o->ItemName.empty() ? 0 : _fbb.CreateString(_o->ItemName);
  auto _TupleTest = _o->TupleTest ? Createtuple_int32_string_list_uint32(_fbb, _o->TupleTest.get(), _rehasher) : 0;
  auto _MapTest = _o->MapTest ? Createmap_int32_int64(_fbb, _o->MapTest.get(), _rehasher) : 0;
  auto _TupleInList = _o->TupleInList.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_string>> (_o->TupleInList.size(), [](size_t i, _VectorArgs *__va) { return Createtuple_int32_string(*__va->__fbb, __va->__o->TupleInList[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _Float32Test = _o->Float32Test;
  auto _TupleInTuple = _o->TupleInTuple ? Createtuple_int32_tuple_uint32_string(_fbb, _o->TupleInTuple.get(), _rehasher) : 0;
  auto _EnumInList = _o->EnumInList.size() ? _fbb.CreateVectorScalarCast<int32_t>(::flatbuffers::data(_o->EnumInList), _o->EnumInList.size()) : 0;
  return fb::CreateGameItemRow(
      _fbb,
      _Id,
      _ItemName,
      _TupleTest,
      _MapTest,
      _TupleInList,
      _Float32Test,
      _TupleInTuple,
      _EnumInList);
}

inline const fb::GameItem *GetGameItem(const void *buf) {
  return ::flatbuffers::GetRoot<fb::GameItem>(buf);
}

inline const fb::GameItem *GetSizePrefixedGameItem(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::GameItem>(buf);
}

inline bool VerifyGameItemBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::GameItem>(nullptr);
}

inline bool VerifySizePrefixedGameItemBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::GameItem>(nullptr);
}

inline void FinishGameItemBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::GameItem> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGameItemBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::GameItem> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::GameItemT> UnPackGameItem(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::GameItemT>(GetGameItem(buf)->UnPack(res));
}

inline std::unique_ptr<fb::GameItemT> UnPackSizePrefixedGameItem(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::GameItemT>(GetSizePrefixedGameItem(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_GAMEITEM_FB_H_
