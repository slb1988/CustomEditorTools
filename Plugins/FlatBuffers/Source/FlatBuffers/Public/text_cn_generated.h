// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTCN_FB_H_
#define FLATBUFFERS_GENERATED_TEXTCN_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct text_cn;
struct text_cnBuilder;
struct text_cnT;

struct text_cnRow;
struct text_cnRowBuilder;
struct text_cnRowT;

struct text_cnT : public ::flatbuffers::NativeTable {
  typedef text_cn TableType;
  std::vector<std::unique_ptr<fb::text_cnRowT>> text_cns{};
  text_cnT() = default;
  text_cnT(const text_cnT &o);
  text_cnT(text_cnT&&) FLATBUFFERS_NOEXCEPT = default;
  text_cnT &operator=(text_cnT o) FLATBUFFERS_NOEXCEPT;
};

struct text_cn FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef text_cnT NativeTableType;
  typedef text_cnBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT_CNS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::text_cnRow>> *text_cns() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::text_cnRow>> *>(VT_TEXT_CNS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT_CNS) &&
           verifier.VerifyVector(text_cns()) &&
           verifier.VerifyVectorOfTables(text_cns()) &&
           verifier.EndTable();
  }
  text_cnT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(text_cnT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<text_cn> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const text_cnT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct text_cnBuilder {
  typedef text_cn Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_text_cns(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::text_cnRow>>> text_cns) {
    fbb_.AddOffset(text_cn::VT_TEXT_CNS, text_cns);
  }
  explicit text_cnBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<text_cn> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<text_cn>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<text_cn> Createtext_cn(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::text_cnRow>>> text_cns = 0) {
  text_cnBuilder builder_(_fbb);
  builder_.add_text_cns(text_cns);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<text_cn> Createtext_cnDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<fb::text_cnRow>> *text_cns = nullptr) {
  auto text_cns__ = text_cns ? _fbb.CreateVectorOfSortedTables<fb::text_cnRow>(text_cns) : 0;
  return fb::Createtext_cn(
      _fbb,
      text_cns__);
}

::flatbuffers::Offset<text_cn> Createtext_cn(::flatbuffers::FlatBufferBuilder &_fbb, const text_cnT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct text_cnRowT : public ::flatbuffers::NativeTable {
  typedef text_cnRow TableType;
  uint32_t Id = 0;
  std::string Text{};
};

struct text_cnRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef text_cnRowT NativeTableType;
  typedef text_cnRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TEXT = 6
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool KeyCompareLessThan(const text_cnRow * const o) const {
    return Id() < o->Id();
  }
  int KeyCompareWithValue(uint32_t _Id) const {
    return static_cast<int>(Id() > _Id) - static_cast<int>(Id() < _Id);
  }
  const ::flatbuffers::String *Text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(Text()) &&
           verifier.EndTable();
  }
  text_cnRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(text_cnRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<text_cnRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const text_cnRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct text_cnRowBuilder {
  typedef text_cnRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(text_cnRow::VT_ID, Id, 0);
  }
  void add_Text(::flatbuffers::Offset<::flatbuffers::String> Text) {
    fbb_.AddOffset(text_cnRow::VT_TEXT, Text);
  }
  explicit text_cnRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<text_cnRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<text_cnRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<text_cnRow> Createtext_cnRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Text = 0) {
  text_cnRowBuilder builder_(_fbb);
  builder_.add_Text(Text);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<text_cnRow> Createtext_cnRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    const char *Text = nullptr) {
  auto Text__ = Text ? _fbb.CreateString(Text) : 0;
  return fb::Createtext_cnRow(
      _fbb,
      Id,
      Text__);
}

::flatbuffers::Offset<text_cnRow> Createtext_cnRow(::flatbuffers::FlatBufferBuilder &_fbb, const text_cnRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline text_cnT::text_cnT(const text_cnT &o) {
  text_cns.reserve(o.text_cns.size());
  for (const auto &text_cns_ : o.text_cns) { text_cns.emplace_back((text_cns_) ? new fb::text_cnRowT(*text_cns_) : nullptr); }
}

inline text_cnT &text_cnT::operator=(text_cnT o) FLATBUFFERS_NOEXCEPT {
  std::swap(text_cns, o.text_cns);
  return *this;
}

inline text_cnT *text_cn::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<text_cnT>(new text_cnT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void text_cn::UnPackTo(text_cnT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = text_cns(); if (_e) { _o->text_cns.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->text_cns[_i]) { _e->Get(_i)->UnPackTo(_o->text_cns[_i].get(), _resolver); } else { _o->text_cns[_i] = std::unique_ptr<fb::text_cnRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->text_cns.resize(0); } }
}

inline ::flatbuffers::Offset<text_cn> text_cn::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const text_cnT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createtext_cn(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<text_cn> Createtext_cn(::flatbuffers::FlatBufferBuilder &_fbb, const text_cnT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const text_cnT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _text_cns = _o->text_cns.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::text_cnRow>> (_o->text_cns.size(), [](size_t i, _VectorArgs *__va) { return Createtext_cnRow(*__va->__fbb, __va->__o->text_cns[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::Createtext_cn(
      _fbb,
      _text_cns);
}

inline text_cnRowT *text_cnRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<text_cnRowT>(new text_cnRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void text_cnRow::UnPackTo(text_cnRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = Text(); if (_e) _o->Text = _e->str(); }
}

inline ::flatbuffers::Offset<text_cnRow> text_cnRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const text_cnRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createtext_cnRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<text_cnRow> Createtext_cnRow(::flatbuffers::FlatBufferBuilder &_fbb, const text_cnRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const text_cnRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _Text = _o->Text.empty() ? 0 : _fbb.CreateString(_o->Text);
  return fb::Createtext_cnRow(
      _fbb,
      _Id,
      _Text);
}

inline const fb::text_cn *Gettext_cn(const void *buf) {
  return ::flatbuffers::GetRoot<fb::text_cn>(buf);
}

inline const fb::text_cn *GetSizePrefixedtext_cn(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::text_cn>(buf);
}

inline bool Verifytext_cnBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::text_cn>(nullptr);
}

inline bool VerifySizePrefixedtext_cnBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::text_cn>(nullptr);
}

inline void Finishtext_cnBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::text_cn> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedtext_cnBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::text_cn> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::text_cnT> UnPacktext_cn(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::text_cnT>(Gettext_cn(buf)->UnPack(res));
}

inline std::unique_ptr<fb::text_cnT> UnPackSizePrefixedtext_cn(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::text_cnT>(GetSizePrefixedtext_cn(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_TEXTCN_FB_H_
