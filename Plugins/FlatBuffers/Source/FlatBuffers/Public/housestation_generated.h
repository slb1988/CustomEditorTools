// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HOUSESTATION_FB_H_
#define FLATBUFFERS_GENERATED_HOUSESTATION_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct HouseStation;
struct HouseStationBuilder;
struct HouseStationT;

struct HouseStationRow;
struct HouseStationRowBuilder;
struct HouseStationRowT;

struct HouseStationT : public ::flatbuffers::NativeTable {
  typedef HouseStation TableType;
  std::vector<std::unique_ptr<fb::HouseStationRowT>> HouseStations{};
  HouseStationT() = default;
  HouseStationT(const HouseStationT &o);
  HouseStationT(HouseStationT&&) FLATBUFFERS_NOEXCEPT = default;
  HouseStationT &operator=(HouseStationT o) FLATBUFFERS_NOEXCEPT;
};

struct HouseStation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HouseStationT NativeTableType;
  typedef HouseStationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HOUSESTATIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::HouseStationRow>> *HouseStations() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::HouseStationRow>> *>(VT_HOUSESTATIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HOUSESTATIONS) &&
           verifier.VerifyVector(HouseStations()) &&
           verifier.VerifyVectorOfTables(HouseStations()) &&
           verifier.EndTable();
  }
  HouseStationT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HouseStationT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<HouseStation> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HouseStationT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HouseStationBuilder {
  typedef HouseStation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_HouseStations(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::HouseStationRow>>> HouseStations) {
    fbb_.AddOffset(HouseStation::VT_HOUSESTATIONS, HouseStations);
  }
  explicit HouseStationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HouseStation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HouseStation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HouseStation> CreateHouseStation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::HouseStationRow>>> HouseStations = 0) {
  HouseStationBuilder builder_(_fbb);
  builder_.add_HouseStations(HouseStations);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<HouseStation> CreateHouseStationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::HouseStationRow>> *HouseStations = nullptr) {
  auto HouseStations__ = HouseStations ? _fbb.CreateVector<::flatbuffers::Offset<fb::HouseStationRow>>(*HouseStations) : 0;
  return fb::CreateHouseStation(
      _fbb,
      HouseStations__);
}

::flatbuffers::Offset<HouseStation> CreateHouseStation(::flatbuffers::FlatBufferBuilder &_fbb, const HouseStationT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct HouseStationRowT : public ::flatbuffers::NativeTable {
  typedef HouseStationRow TableType;
  uint32_t Id = 0;
  uint32_t WorldId = 0;
  std::string Name{};
  std::string Desc{};
  std::unique_ptr<fb::tuple_uint32_uint32T> ParkingTime{};
  uint32_t ParkingPriceSC = 0;
  std::vector<std::unique_ptr<fb::tuple_float32_float32_float32_float32T>> BornPoint{};
  HouseStationRowT() = default;
  HouseStationRowT(const HouseStationRowT &o);
  HouseStationRowT(HouseStationRowT&&) FLATBUFFERS_NOEXCEPT = default;
  HouseStationRowT &operator=(HouseStationRowT o) FLATBUFFERS_NOEXCEPT;
};

struct HouseStationRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HouseStationRowT NativeTableType;
  typedef HouseStationRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDID = 6,
    VT_NAME = 8,
    VT_DESC = 10,
    VT_PARKINGTIME = 12,
    VT_PARKINGPRICESC = 14,
    VT_BORNPOINT = 16
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t WorldId() const {
    return GetField<uint32_t>(VT_WORLDID, 0);
  }
  const ::flatbuffers::String *Name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *Desc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESC);
  }
  const fb::tuple_uint32_uint32 *ParkingTime() const {
    return GetPointer<const fb::tuple_uint32_uint32 *>(VT_PARKINGTIME);
  }
  uint32_t ParkingPriceSC() const {
    return GetField<uint32_t>(VT_PARKINGPRICESC, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32>> *BornPoint() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32>> *>(VT_BORNPOINT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDID, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(Name()) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(Desc()) &&
           VerifyOffset(verifier, VT_PARKINGTIME) &&
           verifier.VerifyTable(ParkingTime()) &&
           VerifyField<uint32_t>(verifier, VT_PARKINGPRICESC, 4) &&
           VerifyOffset(verifier, VT_BORNPOINT) &&
           verifier.VerifyVector(BornPoint()) &&
           verifier.VerifyVectorOfTables(BornPoint()) &&
           verifier.EndTable();
  }
  HouseStationRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HouseStationRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<HouseStationRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HouseStationRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HouseStationRowBuilder {
  typedef HouseStationRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(HouseStationRow::VT_ID, Id, 0);
  }
  void add_WorldId(uint32_t WorldId) {
    fbb_.AddElement<uint32_t>(HouseStationRow::VT_WORLDID, WorldId, 0);
  }
  void add_Name(::flatbuffers::Offset<::flatbuffers::String> Name) {
    fbb_.AddOffset(HouseStationRow::VT_NAME, Name);
  }
  void add_Desc(::flatbuffers::Offset<::flatbuffers::String> Desc) {
    fbb_.AddOffset(HouseStationRow::VT_DESC, Desc);
  }
  void add_ParkingTime(::flatbuffers::Offset<fb::tuple_uint32_uint32> ParkingTime) {
    fbb_.AddOffset(HouseStationRow::VT_PARKINGTIME, ParkingTime);
  }
  void add_ParkingPriceSC(uint32_t ParkingPriceSC) {
    fbb_.AddElement<uint32_t>(HouseStationRow::VT_PARKINGPRICESC, ParkingPriceSC, 0);
  }
  void add_BornPoint(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32>>> BornPoint) {
    fbb_.AddOffset(HouseStationRow::VT_BORNPOINT, BornPoint);
  }
  explicit HouseStationRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HouseStationRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HouseStationRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HouseStationRow> CreateHouseStationRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Desc = 0,
    ::flatbuffers::Offset<fb::tuple_uint32_uint32> ParkingTime = 0,
    uint32_t ParkingPriceSC = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32>>> BornPoint = 0) {
  HouseStationRowBuilder builder_(_fbb);
  builder_.add_BornPoint(BornPoint);
  builder_.add_ParkingPriceSC(ParkingPriceSC);
  builder_.add_ParkingTime(ParkingTime);
  builder_.add_Desc(Desc);
  builder_.add_Name(Name);
  builder_.add_WorldId(WorldId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<HouseStationRow> CreateHouseStationRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldId = 0,
    const char *Name = nullptr,
    const char *Desc = nullptr,
    ::flatbuffers::Offset<fb::tuple_uint32_uint32> ParkingTime = 0,
    uint32_t ParkingPriceSC = 0,
    const std::vector<::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32>> *BornPoint = nullptr) {
  auto Name__ = Name ? _fbb.CreateString(Name) : 0;
  auto Desc__ = Desc ? _fbb.CreateString(Desc) : 0;
  auto BornPoint__ = BornPoint ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32>>(*BornPoint) : 0;
  return fb::CreateHouseStationRow(
      _fbb,
      Id,
      WorldId,
      Name__,
      Desc__,
      ParkingTime,
      ParkingPriceSC,
      BornPoint__);
}

::flatbuffers::Offset<HouseStationRow> CreateHouseStationRow(::flatbuffers::FlatBufferBuilder &_fbb, const HouseStationRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HouseStationT::HouseStationT(const HouseStationT &o) {
  HouseStations.reserve(o.HouseStations.size());
  for (const auto &HouseStations_ : o.HouseStations) { HouseStations.emplace_back((HouseStations_) ? new fb::HouseStationRowT(*HouseStations_) : nullptr); }
}

inline HouseStationT &HouseStationT::operator=(HouseStationT o) FLATBUFFERS_NOEXCEPT {
  std::swap(HouseStations, o.HouseStations);
  return *this;
}

inline HouseStationT *HouseStation::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HouseStationT>(new HouseStationT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HouseStation::UnPackTo(HouseStationT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = HouseStations(); if (_e) { _o->HouseStations.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->HouseStations[_i]) { _e->Get(_i)->UnPackTo(_o->HouseStations[_i].get(), _resolver); } else { _o->HouseStations[_i] = std::unique_ptr<fb::HouseStationRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->HouseStations.resize(0); } }
}

inline ::flatbuffers::Offset<HouseStation> HouseStation::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HouseStationT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHouseStation(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<HouseStation> CreateHouseStation(::flatbuffers::FlatBufferBuilder &_fbb, const HouseStationT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const HouseStationT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _HouseStations = _o->HouseStations.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::HouseStationRow>> (_o->HouseStations.size(), [](size_t i, _VectorArgs *__va) { return CreateHouseStationRow(*__va->__fbb, __va->__o->HouseStations[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateHouseStation(
      _fbb,
      _HouseStations);
}

inline HouseStationRowT::HouseStationRowT(const HouseStationRowT &o)
      : Id(o.Id),
        WorldId(o.WorldId),
        Name(o.Name),
        Desc(o.Desc),
        ParkingTime((o.ParkingTime) ? new fb::tuple_uint32_uint32T(*o.ParkingTime) : nullptr),
        ParkingPriceSC(o.ParkingPriceSC) {
  BornPoint.reserve(o.BornPoint.size());
  for (const auto &BornPoint_ : o.BornPoint) { BornPoint.emplace_back((BornPoint_) ? new fb::tuple_float32_float32_float32_float32T(*BornPoint_) : nullptr); }
}

inline HouseStationRowT &HouseStationRowT::operator=(HouseStationRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldId, o.WorldId);
  std::swap(Name, o.Name);
  std::swap(Desc, o.Desc);
  std::swap(ParkingTime, o.ParkingTime);
  std::swap(ParkingPriceSC, o.ParkingPriceSC);
  std::swap(BornPoint, o.BornPoint);
  return *this;
}

inline HouseStationRowT *HouseStationRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HouseStationRowT>(new HouseStationRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HouseStationRow::UnPackTo(HouseStationRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldId(); _o->WorldId = _e; }
  { auto _e = Name(); if (_e) _o->Name = _e->str(); }
  { auto _e = Desc(); if (_e) _o->Desc = _e->str(); }
  { auto _e = ParkingTime(); if (_e) { if(_o->ParkingTime) { _e->UnPackTo(_o->ParkingTime.get(), _resolver); } else { _o->ParkingTime = std::unique_ptr<fb::tuple_uint32_uint32T>(_e->UnPack(_resolver)); } } else if (_o->ParkingTime) { _o->ParkingTime.reset(); } }
  { auto _e = ParkingPriceSC(); _o->ParkingPriceSC = _e; }
  { auto _e = BornPoint(); if (_e) { _o->BornPoint.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->BornPoint[_i]) { _e->Get(_i)->UnPackTo(_o->BornPoint[_i].get(), _resolver); } else { _o->BornPoint[_i] = std::unique_ptr<fb::tuple_float32_float32_float32_float32T>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->BornPoint.resize(0); } }
}

inline ::flatbuffers::Offset<HouseStationRow> HouseStationRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HouseStationRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHouseStationRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<HouseStationRow> CreateHouseStationRow(::flatbuffers::FlatBufferBuilder &_fbb, const HouseStationRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const HouseStationRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldId = _o->WorldId;
  auto _Name = _o->Name.empty() ? 0 : _fbb.CreateString(_o->Name);
  auto _Desc = _o->Desc.empty() ? 0 : _fbb.CreateString(_o->Desc);
  auto _ParkingTime = _o->ParkingTime ? Createtuple_uint32_uint32(_fbb, _o->ParkingTime.get(), _rehasher) : 0;
  auto _ParkingPriceSC = _o->ParkingPriceSC;
  auto _BornPoint = _o->BornPoint.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32>> (_o->BornPoint.size(), [](size_t i, _VectorArgs *__va) { return Createtuple_float32_float32_float32_float32(*__va->__fbb, __va->__o->BornPoint[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateHouseStationRow(
      _fbb,
      _Id,
      _WorldId,
      _Name,
      _Desc,
      _ParkingTime,
      _ParkingPriceSC,
      _BornPoint);
}

inline const fb::HouseStation *GetHouseStation(const void *buf) {
  return ::flatbuffers::GetRoot<fb::HouseStation>(buf);
}

inline const fb::HouseStation *GetSizePrefixedHouseStation(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::HouseStation>(buf);
}

inline bool VerifyHouseStationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::HouseStation>(nullptr);
}

inline bool VerifySizePrefixedHouseStationBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::HouseStation>(nullptr);
}

inline void FinishHouseStationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::HouseStation> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHouseStationBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::HouseStation> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::HouseStationT> UnPackHouseStation(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::HouseStationT>(GetHouseStation(buf)->UnPack(res));
}

inline std::unique_ptr<fb::HouseStationT> UnPackSizePrefixedHouseStation(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::HouseStationT>(GetSizePrefixedHouseStation(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_HOUSESTATION_FB_H_
