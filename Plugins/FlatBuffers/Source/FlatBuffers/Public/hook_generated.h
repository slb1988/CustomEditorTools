// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HOOK_FB_H_
#define FLATBUFFERS_GENERATED_HOOK_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Hook;
struct HookBuilder;
struct HookT;

struct HookRow;
struct HookRowBuilder;
struct HookRowT;

struct HookT : public ::flatbuffers::NativeTable {
  typedef Hook TableType;
  std::vector<std::unique_ptr<fb::HookRowT>> Hooks{};
  HookT() = default;
  HookT(const HookT &o);
  HookT(HookT&&) FLATBUFFERS_NOEXCEPT = default;
  HookT &operator=(HookT o) FLATBUFFERS_NOEXCEPT;
};

struct Hook FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HookT NativeTableType;
  typedef HookBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HOOKS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::HookRow>> *Hooks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::HookRow>> *>(VT_HOOKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HOOKS) &&
           verifier.VerifyVector(Hooks()) &&
           verifier.VerifyVectorOfTables(Hooks()) &&
           verifier.EndTable();
  }
  HookT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HookT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Hook> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HookT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HookBuilder {
  typedef Hook Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Hooks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::HookRow>>> Hooks) {
    fbb_.AddOffset(Hook::VT_HOOKS, Hooks);
  }
  explicit HookBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Hook> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Hook>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Hook> CreateHook(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::HookRow>>> Hooks = 0) {
  HookBuilder builder_(_fbb);
  builder_.add_Hooks(Hooks);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Hook> CreateHookDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::HookRow>> *Hooks = nullptr) {
  auto Hooks__ = Hooks ? _fbb.CreateVector<::flatbuffers::Offset<fb::HookRow>>(*Hooks) : 0;
  return fb::CreateHook(
      _fbb,
      Hooks__);
}

::flatbuffers::Offset<Hook> CreateHook(::flatbuffers::FlatBufferBuilder &_fbb, const HookT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct HookRowT : public ::flatbuffers::NativeTable {
  typedef HookRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  uint32_t GoodDuration = 0;
  uint32_t GreatDuration = 0;
  uint32_t PerfectDuration = 0;
  std::unique_ptr<fb::tuple_float32_float32_float32T> CenterPosition{};
  std::unique_ptr<fb::tuple_float32_float32_float32_float32T> Rotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> Scale{};
  std::string PrefabPath{};
  HookRowT() = default;
  HookRowT(const HookRowT &o);
  HookRowT(HookRowT&&) FLATBUFFERS_NOEXCEPT = default;
  HookRowT &operator=(HookRowT o) FLATBUFFERS_NOEXCEPT;
};

struct HookRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HookRowT NativeTableType;
  typedef HookRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_GOODDURATION = 8,
    VT_GREATDURATION = 10,
    VT_PERFECTDURATION = 12,
    VT_CENTERPOSITION = 14,
    VT_ROTATION = 16,
    VT_SCALE = 18,
    VT_PREFABPATH = 20
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  uint32_t GoodDuration() const {
    return GetField<uint32_t>(VT_GOODDURATION, 0);
  }
  uint32_t GreatDuration() const {
    return GetField<uint32_t>(VT_GREATDURATION, 0);
  }
  uint32_t PerfectDuration() const {
    return GetField<uint32_t>(VT_PERFECTDURATION, 0);
  }
  const fb::tuple_float32_float32_float32 *CenterPosition() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_CENTERPOSITION);
  }
  const fb::tuple_float32_float32_float32_float32 *Rotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32_float32 *>(VT_ROTATION);
  }
  const fb::tuple_float32_float32_float32 *Scale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_SCALE);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyField<uint32_t>(verifier, VT_GOODDURATION, 4) &&
           VerifyField<uint32_t>(verifier, VT_GREATDURATION, 4) &&
           VerifyField<uint32_t>(verifier, VT_PERFECTDURATION, 4) &&
           VerifyOffset(verifier, VT_CENTERPOSITION) &&
           verifier.VerifyTable(CenterPosition()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(Rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(Scale()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           verifier.EndTable();
  }
  HookRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HookRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<HookRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HookRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HookRowBuilder {
  typedef HookRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(HookRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(HookRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_GoodDuration(uint32_t GoodDuration) {
    fbb_.AddElement<uint32_t>(HookRow::VT_GOODDURATION, GoodDuration, 0);
  }
  void add_GreatDuration(uint32_t GreatDuration) {
    fbb_.AddElement<uint32_t>(HookRow::VT_GREATDURATION, GreatDuration, 0);
  }
  void add_PerfectDuration(uint32_t PerfectDuration) {
    fbb_.AddElement<uint32_t>(HookRow::VT_PERFECTDURATION, PerfectDuration, 0);
  }
  void add_CenterPosition(::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition) {
    fbb_.AddOffset(HookRow::VT_CENTERPOSITION, CenterPosition);
  }
  void add_Rotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation) {
    fbb_.AddOffset(HookRow::VT_ROTATION, Rotation);
  }
  void add_Scale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale) {
    fbb_.AddOffset(HookRow::VT_SCALE, Scale);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(HookRow::VT_PREFABPATH, PrefabPath);
  }
  explicit HookRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<HookRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<HookRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<HookRow> CreateHookRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    uint32_t GoodDuration = 0,
    uint32_t GreatDuration = 0,
    uint32_t PerfectDuration = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0) {
  HookRowBuilder builder_(_fbb);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_Scale(Scale);
  builder_.add_Rotation(Rotation);
  builder_.add_CenterPosition(CenterPosition);
  builder_.add_PerfectDuration(PerfectDuration);
  builder_.add_GreatDuration(GreatDuration);
  builder_.add_GoodDuration(GoodDuration);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<HookRow> CreateHookRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    uint32_t GoodDuration = 0,
    uint32_t GreatDuration = 0,
    uint32_t PerfectDuration = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    const char *PrefabPath = nullptr) {
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateHookRow(
      _fbb,
      Id,
      WorldTypeId,
      GoodDuration,
      GreatDuration,
      PerfectDuration,
      CenterPosition,
      Rotation,
      Scale,
      PrefabPath__);
}

::flatbuffers::Offset<HookRow> CreateHookRow(::flatbuffers::FlatBufferBuilder &_fbb, const HookRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HookT::HookT(const HookT &o) {
  Hooks.reserve(o.Hooks.size());
  for (const auto &Hooks_ : o.Hooks) { Hooks.emplace_back((Hooks_) ? new fb::HookRowT(*Hooks_) : nullptr); }
}

inline HookT &HookT::operator=(HookT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Hooks, o.Hooks);
  return *this;
}

inline HookT *Hook::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HookT>(new HookT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Hook::UnPackTo(HookT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Hooks(); if (_e) { _o->Hooks.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Hooks[_i]) { _e->Get(_i)->UnPackTo(_o->Hooks[_i].get(), _resolver); } else { _o->Hooks[_i] = std::unique_ptr<fb::HookRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Hooks.resize(0); } }
}

inline ::flatbuffers::Offset<Hook> Hook::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HookT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHook(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Hook> CreateHook(::flatbuffers::FlatBufferBuilder &_fbb, const HookT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const HookT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Hooks = _o->Hooks.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::HookRow>> (_o->Hooks.size(), [](size_t i, _VectorArgs *__va) { return CreateHookRow(*__va->__fbb, __va->__o->Hooks[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateHook(
      _fbb,
      _Hooks);
}

inline HookRowT::HookRowT(const HookRowT &o)
      : Id(o.Id),
        WorldTypeId(o.WorldTypeId),
        GoodDuration(o.GoodDuration),
        GreatDuration(o.GreatDuration),
        PerfectDuration(o.PerfectDuration),
        CenterPosition((o.CenterPosition) ? new fb::tuple_float32_float32_float32T(*o.CenterPosition) : nullptr),
        Rotation((o.Rotation) ? new fb::tuple_float32_float32_float32_float32T(*o.Rotation) : nullptr),
        Scale((o.Scale) ? new fb::tuple_float32_float32_float32T(*o.Scale) : nullptr),
        PrefabPath(o.PrefabPath) {
}

inline HookRowT &HookRowT::operator=(HookRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldTypeId, o.WorldTypeId);
  std::swap(GoodDuration, o.GoodDuration);
  std::swap(GreatDuration, o.GreatDuration);
  std::swap(PerfectDuration, o.PerfectDuration);
  std::swap(CenterPosition, o.CenterPosition);
  std::swap(Rotation, o.Rotation);
  std::swap(Scale, o.Scale);
  std::swap(PrefabPath, o.PrefabPath);
  return *this;
}

inline HookRowT *HookRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HookRowT>(new HookRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void HookRow::UnPackTo(HookRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = GoodDuration(); _o->GoodDuration = _e; }
  { auto _e = GreatDuration(); _o->GreatDuration = _e; }
  { auto _e = PerfectDuration(); _o->PerfectDuration = _e; }
  { auto _e = CenterPosition(); if (_e) { if(_o->CenterPosition) { _e->UnPackTo(_o->CenterPosition.get(), _resolver); } else { _o->CenterPosition = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->CenterPosition) { _o->CenterPosition.reset(); } }
  { auto _e = Rotation(); if (_e) { if(_o->Rotation) { _e->UnPackTo(_o->Rotation.get(), _resolver); } else { _o->Rotation = std::unique_ptr<fb::tuple_float32_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Rotation) { _o->Rotation.reset(); } }
  { auto _e = Scale(); if (_e) { if(_o->Scale) { _e->UnPackTo(_o->Scale.get(), _resolver); } else { _o->Scale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Scale) { _o->Scale.reset(); } }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
}

inline ::flatbuffers::Offset<HookRow> HookRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HookRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHookRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<HookRow> CreateHookRow(::flatbuffers::FlatBufferBuilder &_fbb, const HookRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const HookRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _GoodDuration = _o->GoodDuration;
  auto _GreatDuration = _o->GreatDuration;
  auto _PerfectDuration = _o->PerfectDuration;
  auto _CenterPosition = _o->CenterPosition ? Createtuple_float32_float32_float32(_fbb, _o->CenterPosition.get(), _rehasher) : 0;
  auto _Rotation = _o->Rotation ? Createtuple_float32_float32_float32_float32(_fbb, _o->Rotation.get(), _rehasher) : 0;
  auto _Scale = _o->Scale ? Createtuple_float32_float32_float32(_fbb, _o->Scale.get(), _rehasher) : 0;
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  return fb::CreateHookRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _GoodDuration,
      _GreatDuration,
      _PerfectDuration,
      _CenterPosition,
      _Rotation,
      _Scale,
      _PrefabPath);
}

inline const fb::Hook *GetHook(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Hook>(buf);
}

inline const fb::Hook *GetSizePrefixedHook(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Hook>(buf);
}

inline bool VerifyHookBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Hook>(nullptr);
}

inline bool VerifySizePrefixedHookBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Hook>(nullptr);
}

inline void FinishHookBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Hook> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHookBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Hook> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::HookT> UnPackHook(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::HookT>(GetHook(buf)->UnPack(res));
}

inline std::unique_ptr<fb::HookT> UnPackSizePrefixedHook(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::HookT>(GetSizePrefixedHook(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_HOOK_FB_H_
