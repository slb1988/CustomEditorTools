// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UAV_FB_H_
#define FLATBUFFERS_GENERATED_UAV_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct UAV;
struct UAVBuilder;
struct UAVT;

struct UAVRow;
struct UAVRowBuilder;
struct UAVRowT;

struct UAVT : public ::flatbuffers::NativeTable {
  typedef UAV TableType;
  std::vector<std::unique_ptr<fb::UAVRowT>> UAVs{};
  UAVT() = default;
  UAVT(const UAVT &o);
  UAVT(UAVT&&) FLATBUFFERS_NOEXCEPT = default;
  UAVT &operator=(UAVT o) FLATBUFFERS_NOEXCEPT;
};

struct UAV FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UAVT NativeTableType;
  typedef UAVBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UAVS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::UAVRow>> *UAVs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::UAVRow>> *>(VT_UAVS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UAVS) &&
           verifier.VerifyVector(UAVs()) &&
           verifier.VerifyVectorOfTables(UAVs()) &&
           verifier.EndTable();
  }
  UAVT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UAVT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<UAV> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UAVT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UAVBuilder {
  typedef UAV Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_UAVs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::UAVRow>>> UAVs) {
    fbb_.AddOffset(UAV::VT_UAVS, UAVs);
  }
  explicit UAVBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UAV> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UAV>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UAV> CreateUAV(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::UAVRow>>> UAVs = 0) {
  UAVBuilder builder_(_fbb);
  builder_.add_UAVs(UAVs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UAV> CreateUAVDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::UAVRow>> *UAVs = nullptr) {
  auto UAVs__ = UAVs ? _fbb.CreateVector<::flatbuffers::Offset<fb::UAVRow>>(*UAVs) : 0;
  return fb::CreateUAV(
      _fbb,
      UAVs__);
}

::flatbuffers::Offset<UAV> CreateUAV(::flatbuffers::FlatBufferBuilder &_fbb, const UAVT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct UAVRowT : public ::flatbuffers::NativeTable {
  typedef UAVRow TableType;
  uint32_t Id = 0;
  uint32_t WorldTypeId = 0;
  fb::NpcMoveType MoveType = fb::NpcMoveType_NONE;
  float Speed = 0.0f;
  bool AttackStationaryPlayer = false;
  std::unique_ptr<fb::tuple_float32_float32_float32T> ModelScale{};
  std::string Splines{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> CenterPosition{};
  float SensitiveAreaRadius = 0.0f;
  float VisionAreaRadius = 0.0f;
  float VisionAreaAngle = 0.0f;
  int32_t SensitiveAlertSpeed = 0;
  int32_t VisionAlertSpeed = 0;
  int32_t AlertValueToAttack = 0;
  std::vector<std::unique_ptr<fb::tuple_uint32_uint32T>> AttackBuffId{};
  int64_t SluggishTime = 0;
  std::unique_ptr<fb::tuple_int32_int32T> RandomScanRangeX{};
  std::unique_ptr<fb::tuple_int32_int32T> RandomScanRangeY{};
  float RandomScanSpeed = 0.0f;
  std::vector<std::unique_ptr<fb::tuple_int32_int32T>> SpecifyScanPoint{};
  float SpecifyScanSpeed = 0.0f;
  std::unique_ptr<fb::tuple_int32_int32T> LockRangeX{};
  std::unique_ptr<fb::tuple_int32_int32T> LockRangeY{};
  float LockSpeed = 0.0f;
  int64_t LockDamping = 0;
  int64_t AimTime = 0;
  int64_t AttackCD = 0;
  float BulletSpeed = 0.0f;
  int64_t BulletLifetime = 0;
  float BulletColliderRadius = 0.0f;
  float BulletBlastRadius = 0.0f;
  std::unique_ptr<fb::tuple_float32_float32_float32T> InitModelRotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32_float32T> Rotation{};
  std::unique_ptr<fb::tuple_float32_float32_float32T> Scale{};
  std::string PrefabPath{};
  UAVRowT() = default;
  UAVRowT(const UAVRowT &o);
  UAVRowT(UAVRowT&&) FLATBUFFERS_NOEXCEPT = default;
  UAVRowT &operator=(UAVRowT o) FLATBUFFERS_NOEXCEPT;
};

struct UAVRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UAVRowT NativeTableType;
  typedef UAVRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_WORLDTYPEID = 6,
    VT_MOVETYPE = 8,
    VT_SPEED = 10,
    VT_ATTACKSTATIONARYPLAYER = 12,
    VT_MODELSCALE = 14,
    VT_SPLINES = 16,
    VT_CENTERPOSITION = 18,
    VT_SENSITIVEAREARADIUS = 20,
    VT_VISIONAREARADIUS = 22,
    VT_VISIONAREAANGLE = 24,
    VT_SENSITIVEALERTSPEED = 26,
    VT_VISIONALERTSPEED = 28,
    VT_ALERTVALUETOATTACK = 30,
    VT_ATTACKBUFFID = 32,
    VT_SLUGGISHTIME = 34,
    VT_RANDOMSCANRANGEX = 36,
    VT_RANDOMSCANRANGEY = 38,
    VT_RANDOMSCANSPEED = 40,
    VT_SPECIFYSCANPOINT = 42,
    VT_SPECIFYSCANSPEED = 44,
    VT_LOCKRANGEX = 46,
    VT_LOCKRANGEY = 48,
    VT_LOCKSPEED = 50,
    VT_LOCKDAMPING = 52,
    VT_AIMTIME = 54,
    VT_ATTACKCD = 56,
    VT_BULLETSPEED = 58,
    VT_BULLETLIFETIME = 60,
    VT_BULLETCOLLIDERRADIUS = 62,
    VT_BULLETBLASTRADIUS = 64,
    VT_INITMODELROTATION = 66,
    VT_ROTATION = 68,
    VT_SCALE = 70,
    VT_PREFABPATH = 72
  };
  uint32_t Id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint32_t WorldTypeId() const {
    return GetField<uint32_t>(VT_WORLDTYPEID, 0);
  }
  fb::NpcMoveType MoveType() const {
    return static_cast<fb::NpcMoveType>(GetField<int32_t>(VT_MOVETYPE, 0));
  }
  float Speed() const {
    return GetField<float>(VT_SPEED, 0.0f);
  }
  bool AttackStationaryPlayer() const {
    return GetField<uint8_t>(VT_ATTACKSTATIONARYPLAYER, 0) != 0;
  }
  const fb::tuple_float32_float32_float32 *ModelScale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_MODELSCALE);
  }
  const ::flatbuffers::String *Splines() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPLINES);
  }
  const fb::tuple_float32_float32_float32 *CenterPosition() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_CENTERPOSITION);
  }
  float SensitiveAreaRadius() const {
    return GetField<float>(VT_SENSITIVEAREARADIUS, 0.0f);
  }
  float VisionAreaRadius() const {
    return GetField<float>(VT_VISIONAREARADIUS, 0.0f);
  }
  float VisionAreaAngle() const {
    return GetField<float>(VT_VISIONAREAANGLE, 0.0f);
  }
  int32_t SensitiveAlertSpeed() const {
    return GetField<int32_t>(VT_SENSITIVEALERTSPEED, 0);
  }
  int32_t VisionAlertSpeed() const {
    return GetField<int32_t>(VT_VISIONALERTSPEED, 0);
  }
  int32_t AlertValueToAttack() const {
    return GetField<int32_t>(VT_ALERTVALUETOATTACK, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_uint32_uint32>> *AttackBuffId() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_uint32_uint32>> *>(VT_ATTACKBUFFID);
  }
  int64_t SluggishTime() const {
    return GetField<int64_t>(VT_SLUGGISHTIME, 0);
  }
  const fb::tuple_int32_int32 *RandomScanRangeX() const {
    return GetPointer<const fb::tuple_int32_int32 *>(VT_RANDOMSCANRANGEX);
  }
  const fb::tuple_int32_int32 *RandomScanRangeY() const {
    return GetPointer<const fb::tuple_int32_int32 *>(VT_RANDOMSCANRANGEY);
  }
  float RandomScanSpeed() const {
    return GetField<float>(VT_RANDOMSCANSPEED, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32>> *SpecifyScanPoint() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32>> *>(VT_SPECIFYSCANPOINT);
  }
  float SpecifyScanSpeed() const {
    return GetField<float>(VT_SPECIFYSCANSPEED, 0.0f);
  }
  const fb::tuple_int32_int32 *LockRangeX() const {
    return GetPointer<const fb::tuple_int32_int32 *>(VT_LOCKRANGEX);
  }
  const fb::tuple_int32_int32 *LockRangeY() const {
    return GetPointer<const fb::tuple_int32_int32 *>(VT_LOCKRANGEY);
  }
  float LockSpeed() const {
    return GetField<float>(VT_LOCKSPEED, 0.0f);
  }
  int64_t LockDamping() const {
    return GetField<int64_t>(VT_LOCKDAMPING, 0);
  }
  int64_t AimTime() const {
    return GetField<int64_t>(VT_AIMTIME, 0);
  }
  int64_t AttackCD() const {
    return GetField<int64_t>(VT_ATTACKCD, 0);
  }
  float BulletSpeed() const {
    return GetField<float>(VT_BULLETSPEED, 0.0f);
  }
  int64_t BulletLifetime() const {
    return GetField<int64_t>(VT_BULLETLIFETIME, 0);
  }
  float BulletColliderRadius() const {
    return GetField<float>(VT_BULLETCOLLIDERRADIUS, 0.0f);
  }
  float BulletBlastRadius() const {
    return GetField<float>(VT_BULLETBLASTRADIUS, 0.0f);
  }
  const fb::tuple_float32_float32_float32 *InitModelRotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_INITMODELROTATION);
  }
  const fb::tuple_float32_float32_float32_float32 *Rotation() const {
    return GetPointer<const fb::tuple_float32_float32_float32_float32 *>(VT_ROTATION);
  }
  const fb::tuple_float32_float32_float32 *Scale() const {
    return GetPointer<const fb::tuple_float32_float32_float32 *>(VT_SCALE);
  }
  const ::flatbuffers::String *PrefabPath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFABPATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_WORLDTYPEID, 4) &&
           VerifyField<int32_t>(verifier, VT_MOVETYPE, 4) &&
           VerifyField<float>(verifier, VT_SPEED, 4) &&
           VerifyField<uint8_t>(verifier, VT_ATTACKSTATIONARYPLAYER, 1) &&
           VerifyOffset(verifier, VT_MODELSCALE) &&
           verifier.VerifyTable(ModelScale()) &&
           VerifyOffset(verifier, VT_SPLINES) &&
           verifier.VerifyString(Splines()) &&
           VerifyOffset(verifier, VT_CENTERPOSITION) &&
           verifier.VerifyTable(CenterPosition()) &&
           VerifyField<float>(verifier, VT_SENSITIVEAREARADIUS, 4) &&
           VerifyField<float>(verifier, VT_VISIONAREARADIUS, 4) &&
           VerifyField<float>(verifier, VT_VISIONAREAANGLE, 4) &&
           VerifyField<int32_t>(verifier, VT_SENSITIVEALERTSPEED, 4) &&
           VerifyField<int32_t>(verifier, VT_VISIONALERTSPEED, 4) &&
           VerifyField<int32_t>(verifier, VT_ALERTVALUETOATTACK, 4) &&
           VerifyOffset(verifier, VT_ATTACKBUFFID) &&
           verifier.VerifyVector(AttackBuffId()) &&
           verifier.VerifyVectorOfTables(AttackBuffId()) &&
           VerifyField<int64_t>(verifier, VT_SLUGGISHTIME, 8) &&
           VerifyOffset(verifier, VT_RANDOMSCANRANGEX) &&
           verifier.VerifyTable(RandomScanRangeX()) &&
           VerifyOffset(verifier, VT_RANDOMSCANRANGEY) &&
           verifier.VerifyTable(RandomScanRangeY()) &&
           VerifyField<float>(verifier, VT_RANDOMSCANSPEED, 4) &&
           VerifyOffset(verifier, VT_SPECIFYSCANPOINT) &&
           verifier.VerifyVector(SpecifyScanPoint()) &&
           verifier.VerifyVectorOfTables(SpecifyScanPoint()) &&
           VerifyField<float>(verifier, VT_SPECIFYSCANSPEED, 4) &&
           VerifyOffset(verifier, VT_LOCKRANGEX) &&
           verifier.VerifyTable(LockRangeX()) &&
           VerifyOffset(verifier, VT_LOCKRANGEY) &&
           verifier.VerifyTable(LockRangeY()) &&
           VerifyField<float>(verifier, VT_LOCKSPEED, 4) &&
           VerifyField<int64_t>(verifier, VT_LOCKDAMPING, 8) &&
           VerifyField<int64_t>(verifier, VT_AIMTIME, 8) &&
           VerifyField<int64_t>(verifier, VT_ATTACKCD, 8) &&
           VerifyField<float>(verifier, VT_BULLETSPEED, 4) &&
           VerifyField<int64_t>(verifier, VT_BULLETLIFETIME, 8) &&
           VerifyField<float>(verifier, VT_BULLETCOLLIDERRADIUS, 4) &&
           VerifyField<float>(verifier, VT_BULLETBLASTRADIUS, 4) &&
           VerifyOffset(verifier, VT_INITMODELROTATION) &&
           verifier.VerifyTable(InitModelRotation()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(Rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(Scale()) &&
           VerifyOffset(verifier, VT_PREFABPATH) &&
           verifier.VerifyString(PrefabPath()) &&
           verifier.EndTable();
  }
  UAVRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UAVRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<UAVRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UAVRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UAVRowBuilder {
  typedef UAVRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(uint32_t Id) {
    fbb_.AddElement<uint32_t>(UAVRow::VT_ID, Id, 0);
  }
  void add_WorldTypeId(uint32_t WorldTypeId) {
    fbb_.AddElement<uint32_t>(UAVRow::VT_WORLDTYPEID, WorldTypeId, 0);
  }
  void add_MoveType(fb::NpcMoveType MoveType) {
    fbb_.AddElement<int32_t>(UAVRow::VT_MOVETYPE, static_cast<int32_t>(MoveType), 0);
  }
  void add_Speed(float Speed) {
    fbb_.AddElement<float>(UAVRow::VT_SPEED, Speed, 0.0f);
  }
  void add_AttackStationaryPlayer(bool AttackStationaryPlayer) {
    fbb_.AddElement<uint8_t>(UAVRow::VT_ATTACKSTATIONARYPLAYER, static_cast<uint8_t>(AttackStationaryPlayer), 0);
  }
  void add_ModelScale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> ModelScale) {
    fbb_.AddOffset(UAVRow::VT_MODELSCALE, ModelScale);
  }
  void add_Splines(::flatbuffers::Offset<::flatbuffers::String> Splines) {
    fbb_.AddOffset(UAVRow::VT_SPLINES, Splines);
  }
  void add_CenterPosition(::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition) {
    fbb_.AddOffset(UAVRow::VT_CENTERPOSITION, CenterPosition);
  }
  void add_SensitiveAreaRadius(float SensitiveAreaRadius) {
    fbb_.AddElement<float>(UAVRow::VT_SENSITIVEAREARADIUS, SensitiveAreaRadius, 0.0f);
  }
  void add_VisionAreaRadius(float VisionAreaRadius) {
    fbb_.AddElement<float>(UAVRow::VT_VISIONAREARADIUS, VisionAreaRadius, 0.0f);
  }
  void add_VisionAreaAngle(float VisionAreaAngle) {
    fbb_.AddElement<float>(UAVRow::VT_VISIONAREAANGLE, VisionAreaAngle, 0.0f);
  }
  void add_SensitiveAlertSpeed(int32_t SensitiveAlertSpeed) {
    fbb_.AddElement<int32_t>(UAVRow::VT_SENSITIVEALERTSPEED, SensitiveAlertSpeed, 0);
  }
  void add_VisionAlertSpeed(int32_t VisionAlertSpeed) {
    fbb_.AddElement<int32_t>(UAVRow::VT_VISIONALERTSPEED, VisionAlertSpeed, 0);
  }
  void add_AlertValueToAttack(int32_t AlertValueToAttack) {
    fbb_.AddElement<int32_t>(UAVRow::VT_ALERTVALUETOATTACK, AlertValueToAttack, 0);
  }
  void add_AttackBuffId(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_uint32_uint32>>> AttackBuffId) {
    fbb_.AddOffset(UAVRow::VT_ATTACKBUFFID, AttackBuffId);
  }
  void add_SluggishTime(int64_t SluggishTime) {
    fbb_.AddElement<int64_t>(UAVRow::VT_SLUGGISHTIME, SluggishTime, 0);
  }
  void add_RandomScanRangeX(::flatbuffers::Offset<fb::tuple_int32_int32> RandomScanRangeX) {
    fbb_.AddOffset(UAVRow::VT_RANDOMSCANRANGEX, RandomScanRangeX);
  }
  void add_RandomScanRangeY(::flatbuffers::Offset<fb::tuple_int32_int32> RandomScanRangeY) {
    fbb_.AddOffset(UAVRow::VT_RANDOMSCANRANGEY, RandomScanRangeY);
  }
  void add_RandomScanSpeed(float RandomScanSpeed) {
    fbb_.AddElement<float>(UAVRow::VT_RANDOMSCANSPEED, RandomScanSpeed, 0.0f);
  }
  void add_SpecifyScanPoint(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32>>> SpecifyScanPoint) {
    fbb_.AddOffset(UAVRow::VT_SPECIFYSCANPOINT, SpecifyScanPoint);
  }
  void add_SpecifyScanSpeed(float SpecifyScanSpeed) {
    fbb_.AddElement<float>(UAVRow::VT_SPECIFYSCANSPEED, SpecifyScanSpeed, 0.0f);
  }
  void add_LockRangeX(::flatbuffers::Offset<fb::tuple_int32_int32> LockRangeX) {
    fbb_.AddOffset(UAVRow::VT_LOCKRANGEX, LockRangeX);
  }
  void add_LockRangeY(::flatbuffers::Offset<fb::tuple_int32_int32> LockRangeY) {
    fbb_.AddOffset(UAVRow::VT_LOCKRANGEY, LockRangeY);
  }
  void add_LockSpeed(float LockSpeed) {
    fbb_.AddElement<float>(UAVRow::VT_LOCKSPEED, LockSpeed, 0.0f);
  }
  void add_LockDamping(int64_t LockDamping) {
    fbb_.AddElement<int64_t>(UAVRow::VT_LOCKDAMPING, LockDamping, 0);
  }
  void add_AimTime(int64_t AimTime) {
    fbb_.AddElement<int64_t>(UAVRow::VT_AIMTIME, AimTime, 0);
  }
  void add_AttackCD(int64_t AttackCD) {
    fbb_.AddElement<int64_t>(UAVRow::VT_ATTACKCD, AttackCD, 0);
  }
  void add_BulletSpeed(float BulletSpeed) {
    fbb_.AddElement<float>(UAVRow::VT_BULLETSPEED, BulletSpeed, 0.0f);
  }
  void add_BulletLifetime(int64_t BulletLifetime) {
    fbb_.AddElement<int64_t>(UAVRow::VT_BULLETLIFETIME, BulletLifetime, 0);
  }
  void add_BulletColliderRadius(float BulletColliderRadius) {
    fbb_.AddElement<float>(UAVRow::VT_BULLETCOLLIDERRADIUS, BulletColliderRadius, 0.0f);
  }
  void add_BulletBlastRadius(float BulletBlastRadius) {
    fbb_.AddElement<float>(UAVRow::VT_BULLETBLASTRADIUS, BulletBlastRadius, 0.0f);
  }
  void add_InitModelRotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32> InitModelRotation) {
    fbb_.AddOffset(UAVRow::VT_INITMODELROTATION, InitModelRotation);
  }
  void add_Rotation(::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation) {
    fbb_.AddOffset(UAVRow::VT_ROTATION, Rotation);
  }
  void add_Scale(::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale) {
    fbb_.AddOffset(UAVRow::VT_SCALE, Scale);
  }
  void add_PrefabPath(::flatbuffers::Offset<::flatbuffers::String> PrefabPath) {
    fbb_.AddOffset(UAVRow::VT_PREFABPATH, PrefabPath);
  }
  explicit UAVRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UAVRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UAVRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UAVRow> CreateUAVRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    fb::NpcMoveType MoveType = fb::NpcMoveType_NONE,
    float Speed = 0.0f,
    bool AttackStationaryPlayer = false,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> ModelScale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> Splines = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    float SensitiveAreaRadius = 0.0f,
    float VisionAreaRadius = 0.0f,
    float VisionAreaAngle = 0.0f,
    int32_t SensitiveAlertSpeed = 0,
    int32_t VisionAlertSpeed = 0,
    int32_t AlertValueToAttack = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_uint32_uint32>>> AttackBuffId = 0,
    int64_t SluggishTime = 0,
    ::flatbuffers::Offset<fb::tuple_int32_int32> RandomScanRangeX = 0,
    ::flatbuffers::Offset<fb::tuple_int32_int32> RandomScanRangeY = 0,
    float RandomScanSpeed = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::tuple_int32_int32>>> SpecifyScanPoint = 0,
    float SpecifyScanSpeed = 0.0f,
    ::flatbuffers::Offset<fb::tuple_int32_int32> LockRangeX = 0,
    ::flatbuffers::Offset<fb::tuple_int32_int32> LockRangeY = 0,
    float LockSpeed = 0.0f,
    int64_t LockDamping = 0,
    int64_t AimTime = 0,
    int64_t AttackCD = 0,
    float BulletSpeed = 0.0f,
    int64_t BulletLifetime = 0,
    float BulletColliderRadius = 0.0f,
    float BulletBlastRadius = 0.0f,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> InitModelRotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> PrefabPath = 0) {
  UAVRowBuilder builder_(_fbb);
  builder_.add_BulletLifetime(BulletLifetime);
  builder_.add_AttackCD(AttackCD);
  builder_.add_AimTime(AimTime);
  builder_.add_LockDamping(LockDamping);
  builder_.add_SluggishTime(SluggishTime);
  builder_.add_PrefabPath(PrefabPath);
  builder_.add_Scale(Scale);
  builder_.add_Rotation(Rotation);
  builder_.add_InitModelRotation(InitModelRotation);
  builder_.add_BulletBlastRadius(BulletBlastRadius);
  builder_.add_BulletColliderRadius(BulletColliderRadius);
  builder_.add_BulletSpeed(BulletSpeed);
  builder_.add_LockSpeed(LockSpeed);
  builder_.add_LockRangeY(LockRangeY);
  builder_.add_LockRangeX(LockRangeX);
  builder_.add_SpecifyScanSpeed(SpecifyScanSpeed);
  builder_.add_SpecifyScanPoint(SpecifyScanPoint);
  builder_.add_RandomScanSpeed(RandomScanSpeed);
  builder_.add_RandomScanRangeY(RandomScanRangeY);
  builder_.add_RandomScanRangeX(RandomScanRangeX);
  builder_.add_AttackBuffId(AttackBuffId);
  builder_.add_AlertValueToAttack(AlertValueToAttack);
  builder_.add_VisionAlertSpeed(VisionAlertSpeed);
  builder_.add_SensitiveAlertSpeed(SensitiveAlertSpeed);
  builder_.add_VisionAreaAngle(VisionAreaAngle);
  builder_.add_VisionAreaRadius(VisionAreaRadius);
  builder_.add_SensitiveAreaRadius(SensitiveAreaRadius);
  builder_.add_CenterPosition(CenterPosition);
  builder_.add_Splines(Splines);
  builder_.add_ModelScale(ModelScale);
  builder_.add_Speed(Speed);
  builder_.add_MoveType(MoveType);
  builder_.add_WorldTypeId(WorldTypeId);
  builder_.add_Id(Id);
  builder_.add_AttackStationaryPlayer(AttackStationaryPlayer);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UAVRow> CreateUAVRowDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t Id = 0,
    uint32_t WorldTypeId = 0,
    fb::NpcMoveType MoveType = fb::NpcMoveType_NONE,
    float Speed = 0.0f,
    bool AttackStationaryPlayer = false,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> ModelScale = 0,
    const char *Splines = nullptr,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> CenterPosition = 0,
    float SensitiveAreaRadius = 0.0f,
    float VisionAreaRadius = 0.0f,
    float VisionAreaAngle = 0.0f,
    int32_t SensitiveAlertSpeed = 0,
    int32_t VisionAlertSpeed = 0,
    int32_t AlertValueToAttack = 0,
    const std::vector<::flatbuffers::Offset<fb::tuple_uint32_uint32>> *AttackBuffId = nullptr,
    int64_t SluggishTime = 0,
    ::flatbuffers::Offset<fb::tuple_int32_int32> RandomScanRangeX = 0,
    ::flatbuffers::Offset<fb::tuple_int32_int32> RandomScanRangeY = 0,
    float RandomScanSpeed = 0.0f,
    const std::vector<::flatbuffers::Offset<fb::tuple_int32_int32>> *SpecifyScanPoint = nullptr,
    float SpecifyScanSpeed = 0.0f,
    ::flatbuffers::Offset<fb::tuple_int32_int32> LockRangeX = 0,
    ::flatbuffers::Offset<fb::tuple_int32_int32> LockRangeY = 0,
    float LockSpeed = 0.0f,
    int64_t LockDamping = 0,
    int64_t AimTime = 0,
    int64_t AttackCD = 0,
    float BulletSpeed = 0.0f,
    int64_t BulletLifetime = 0,
    float BulletColliderRadius = 0.0f,
    float BulletBlastRadius = 0.0f,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> InitModelRotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32_float32> Rotation = 0,
    ::flatbuffers::Offset<fb::tuple_float32_float32_float32> Scale = 0,
    const char *PrefabPath = nullptr) {
  auto Splines__ = Splines ? _fbb.CreateString(Splines) : 0;
  auto AttackBuffId__ = AttackBuffId ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_uint32_uint32>>(*AttackBuffId) : 0;
  auto SpecifyScanPoint__ = SpecifyScanPoint ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_int32>>(*SpecifyScanPoint) : 0;
  auto PrefabPath__ = PrefabPath ? _fbb.CreateString(PrefabPath) : 0;
  return fb::CreateUAVRow(
      _fbb,
      Id,
      WorldTypeId,
      MoveType,
      Speed,
      AttackStationaryPlayer,
      ModelScale,
      Splines__,
      CenterPosition,
      SensitiveAreaRadius,
      VisionAreaRadius,
      VisionAreaAngle,
      SensitiveAlertSpeed,
      VisionAlertSpeed,
      AlertValueToAttack,
      AttackBuffId__,
      SluggishTime,
      RandomScanRangeX,
      RandomScanRangeY,
      RandomScanSpeed,
      SpecifyScanPoint__,
      SpecifyScanSpeed,
      LockRangeX,
      LockRangeY,
      LockSpeed,
      LockDamping,
      AimTime,
      AttackCD,
      BulletSpeed,
      BulletLifetime,
      BulletColliderRadius,
      BulletBlastRadius,
      InitModelRotation,
      Rotation,
      Scale,
      PrefabPath__);
}

::flatbuffers::Offset<UAVRow> CreateUAVRow(::flatbuffers::FlatBufferBuilder &_fbb, const UAVRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline UAVT::UAVT(const UAVT &o) {
  UAVs.reserve(o.UAVs.size());
  for (const auto &UAVs_ : o.UAVs) { UAVs.emplace_back((UAVs_) ? new fb::UAVRowT(*UAVs_) : nullptr); }
}

inline UAVT &UAVT::operator=(UAVT o) FLATBUFFERS_NOEXCEPT {
  std::swap(UAVs, o.UAVs);
  return *this;
}

inline UAVT *UAV::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UAVT>(new UAVT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UAV::UnPackTo(UAVT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = UAVs(); if (_e) { _o->UAVs.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->UAVs[_i]) { _e->Get(_i)->UnPackTo(_o->UAVs[_i].get(), _resolver); } else { _o->UAVs[_i] = std::unique_ptr<fb::UAVRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->UAVs.resize(0); } }
}

inline ::flatbuffers::Offset<UAV> UAV::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UAVT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUAV(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<UAV> CreateUAV(::flatbuffers::FlatBufferBuilder &_fbb, const UAVT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const UAVT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _UAVs = _o->UAVs.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::UAVRow>> (_o->UAVs.size(), [](size_t i, _VectorArgs *__va) { return CreateUAVRow(*__va->__fbb, __va->__o->UAVs[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateUAV(
      _fbb,
      _UAVs);
}

inline UAVRowT::UAVRowT(const UAVRowT &o)
      : Id(o.Id),
        WorldTypeId(o.WorldTypeId),
        MoveType(o.MoveType),
        Speed(o.Speed),
        AttackStationaryPlayer(o.AttackStationaryPlayer),
        ModelScale((o.ModelScale) ? new fb::tuple_float32_float32_float32T(*o.ModelScale) : nullptr),
        Splines(o.Splines),
        CenterPosition((o.CenterPosition) ? new fb::tuple_float32_float32_float32T(*o.CenterPosition) : nullptr),
        SensitiveAreaRadius(o.SensitiveAreaRadius),
        VisionAreaRadius(o.VisionAreaRadius),
        VisionAreaAngle(o.VisionAreaAngle),
        SensitiveAlertSpeed(o.SensitiveAlertSpeed),
        VisionAlertSpeed(o.VisionAlertSpeed),
        AlertValueToAttack(o.AlertValueToAttack),
        SluggishTime(o.SluggishTime),
        RandomScanRangeX((o.RandomScanRangeX) ? new fb::tuple_int32_int32T(*o.RandomScanRangeX) : nullptr),
        RandomScanRangeY((o.RandomScanRangeY) ? new fb::tuple_int32_int32T(*o.RandomScanRangeY) : nullptr),
        RandomScanSpeed(o.RandomScanSpeed),
        SpecifyScanSpeed(o.SpecifyScanSpeed),
        LockRangeX((o.LockRangeX) ? new fb::tuple_int32_int32T(*o.LockRangeX) : nullptr),
        LockRangeY((o.LockRangeY) ? new fb::tuple_int32_int32T(*o.LockRangeY) : nullptr),
        LockSpeed(o.LockSpeed),
        LockDamping(o.LockDamping),
        AimTime(o.AimTime),
        AttackCD(o.AttackCD),
        BulletSpeed(o.BulletSpeed),
        BulletLifetime(o.BulletLifetime),
        BulletColliderRadius(o.BulletColliderRadius),
        BulletBlastRadius(o.BulletBlastRadius),
        InitModelRotation((o.InitModelRotation) ? new fb::tuple_float32_float32_float32T(*o.InitModelRotation) : nullptr),
        Rotation((o.Rotation) ? new fb::tuple_float32_float32_float32_float32T(*o.Rotation) : nullptr),
        Scale((o.Scale) ? new fb::tuple_float32_float32_float32T(*o.Scale) : nullptr),
        PrefabPath(o.PrefabPath) {
  AttackBuffId.reserve(o.AttackBuffId.size());
  for (const auto &AttackBuffId_ : o.AttackBuffId) { AttackBuffId.emplace_back((AttackBuffId_) ? new fb::tuple_uint32_uint32T(*AttackBuffId_) : nullptr); }
  SpecifyScanPoint.reserve(o.SpecifyScanPoint.size());
  for (const auto &SpecifyScanPoint_ : o.SpecifyScanPoint) { SpecifyScanPoint.emplace_back((SpecifyScanPoint_) ? new fb::tuple_int32_int32T(*SpecifyScanPoint_) : nullptr); }
}

inline UAVRowT &UAVRowT::operator=(UAVRowT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Id, o.Id);
  std::swap(WorldTypeId, o.WorldTypeId);
  std::swap(MoveType, o.MoveType);
  std::swap(Speed, o.Speed);
  std::swap(AttackStationaryPlayer, o.AttackStationaryPlayer);
  std::swap(ModelScale, o.ModelScale);
  std::swap(Splines, o.Splines);
  std::swap(CenterPosition, o.CenterPosition);
  std::swap(SensitiveAreaRadius, o.SensitiveAreaRadius);
  std::swap(VisionAreaRadius, o.VisionAreaRadius);
  std::swap(VisionAreaAngle, o.VisionAreaAngle);
  std::swap(SensitiveAlertSpeed, o.SensitiveAlertSpeed);
  std::swap(VisionAlertSpeed, o.VisionAlertSpeed);
  std::swap(AlertValueToAttack, o.AlertValueToAttack);
  std::swap(AttackBuffId, o.AttackBuffId);
  std::swap(SluggishTime, o.SluggishTime);
  std::swap(RandomScanRangeX, o.RandomScanRangeX);
  std::swap(RandomScanRangeY, o.RandomScanRangeY);
  std::swap(RandomScanSpeed, o.RandomScanSpeed);
  std::swap(SpecifyScanPoint, o.SpecifyScanPoint);
  std::swap(SpecifyScanSpeed, o.SpecifyScanSpeed);
  std::swap(LockRangeX, o.LockRangeX);
  std::swap(LockRangeY, o.LockRangeY);
  std::swap(LockSpeed, o.LockSpeed);
  std::swap(LockDamping, o.LockDamping);
  std::swap(AimTime, o.AimTime);
  std::swap(AttackCD, o.AttackCD);
  std::swap(BulletSpeed, o.BulletSpeed);
  std::swap(BulletLifetime, o.BulletLifetime);
  std::swap(BulletColliderRadius, o.BulletColliderRadius);
  std::swap(BulletBlastRadius, o.BulletBlastRadius);
  std::swap(InitModelRotation, o.InitModelRotation);
  std::swap(Rotation, o.Rotation);
  std::swap(Scale, o.Scale);
  std::swap(PrefabPath, o.PrefabPath);
  return *this;
}

inline UAVRowT *UAVRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UAVRowT>(new UAVRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void UAVRow::UnPackTo(UAVRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = WorldTypeId(); _o->WorldTypeId = _e; }
  { auto _e = MoveType(); _o->MoveType = _e; }
  { auto _e = Speed(); _o->Speed = _e; }
  { auto _e = AttackStationaryPlayer(); _o->AttackStationaryPlayer = _e; }
  { auto _e = ModelScale(); if (_e) { if(_o->ModelScale) { _e->UnPackTo(_o->ModelScale.get(), _resolver); } else { _o->ModelScale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->ModelScale) { _o->ModelScale.reset(); } }
  { auto _e = Splines(); if (_e) _o->Splines = _e->str(); }
  { auto _e = CenterPosition(); if (_e) { if(_o->CenterPosition) { _e->UnPackTo(_o->CenterPosition.get(), _resolver); } else { _o->CenterPosition = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->CenterPosition) { _o->CenterPosition.reset(); } }
  { auto _e = SensitiveAreaRadius(); _o->SensitiveAreaRadius = _e; }
  { auto _e = VisionAreaRadius(); _o->VisionAreaRadius = _e; }
  { auto _e = VisionAreaAngle(); _o->VisionAreaAngle = _e; }
  { auto _e = SensitiveAlertSpeed(); _o->SensitiveAlertSpeed = _e; }
  { auto _e = VisionAlertSpeed(); _o->VisionAlertSpeed = _e; }
  { auto _e = AlertValueToAttack(); _o->AlertValueToAttack = _e; }
  { auto _e = AttackBuffId(); if (_e) { _o->AttackBuffId.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->AttackBuffId[_i]) { _e->Get(_i)->UnPackTo(_o->AttackBuffId[_i].get(), _resolver); } else { _o->AttackBuffId[_i] = std::unique_ptr<fb::tuple_uint32_uint32T>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->AttackBuffId.resize(0); } }
  { auto _e = SluggishTime(); _o->SluggishTime = _e; }
  { auto _e = RandomScanRangeX(); if (_e) { if(_o->RandomScanRangeX) { _e->UnPackTo(_o->RandomScanRangeX.get(), _resolver); } else { _o->RandomScanRangeX = std::unique_ptr<fb::tuple_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->RandomScanRangeX) { _o->RandomScanRangeX.reset(); } }
  { auto _e = RandomScanRangeY(); if (_e) { if(_o->RandomScanRangeY) { _e->UnPackTo(_o->RandomScanRangeY.get(), _resolver); } else { _o->RandomScanRangeY = std::unique_ptr<fb::tuple_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->RandomScanRangeY) { _o->RandomScanRangeY.reset(); } }
  { auto _e = RandomScanSpeed(); _o->RandomScanSpeed = _e; }
  { auto _e = SpecifyScanPoint(); if (_e) { _o->SpecifyScanPoint.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->SpecifyScanPoint[_i]) { _e->Get(_i)->UnPackTo(_o->SpecifyScanPoint[_i].get(), _resolver); } else { _o->SpecifyScanPoint[_i] = std::unique_ptr<fb::tuple_int32_int32T>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->SpecifyScanPoint.resize(0); } }
  { auto _e = SpecifyScanSpeed(); _o->SpecifyScanSpeed = _e; }
  { auto _e = LockRangeX(); if (_e) { if(_o->LockRangeX) { _e->UnPackTo(_o->LockRangeX.get(), _resolver); } else { _o->LockRangeX = std::unique_ptr<fb::tuple_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->LockRangeX) { _o->LockRangeX.reset(); } }
  { auto _e = LockRangeY(); if (_e) { if(_o->LockRangeY) { _e->UnPackTo(_o->LockRangeY.get(), _resolver); } else { _o->LockRangeY = std::unique_ptr<fb::tuple_int32_int32T>(_e->UnPack(_resolver)); } } else if (_o->LockRangeY) { _o->LockRangeY.reset(); } }
  { auto _e = LockSpeed(); _o->LockSpeed = _e; }
  { auto _e = LockDamping(); _o->LockDamping = _e; }
  { auto _e = AimTime(); _o->AimTime = _e; }
  { auto _e = AttackCD(); _o->AttackCD = _e; }
  { auto _e = BulletSpeed(); _o->BulletSpeed = _e; }
  { auto _e = BulletLifetime(); _o->BulletLifetime = _e; }
  { auto _e = BulletColliderRadius(); _o->BulletColliderRadius = _e; }
  { auto _e = BulletBlastRadius(); _o->BulletBlastRadius = _e; }
  { auto _e = InitModelRotation(); if (_e) { if(_o->InitModelRotation) { _e->UnPackTo(_o->InitModelRotation.get(), _resolver); } else { _o->InitModelRotation = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->InitModelRotation) { _o->InitModelRotation.reset(); } }
  { auto _e = Rotation(); if (_e) { if(_o->Rotation) { _e->UnPackTo(_o->Rotation.get(), _resolver); } else { _o->Rotation = std::unique_ptr<fb::tuple_float32_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Rotation) { _o->Rotation.reset(); } }
  { auto _e = Scale(); if (_e) { if(_o->Scale) { _e->UnPackTo(_o->Scale.get(), _resolver); } else { _o->Scale = std::unique_ptr<fb::tuple_float32_float32_float32T>(_e->UnPack(_resolver)); } } else if (_o->Scale) { _o->Scale.reset(); } }
  { auto _e = PrefabPath(); if (_e) _o->PrefabPath = _e->str(); }
}

inline ::flatbuffers::Offset<UAVRow> UAVRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UAVRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUAVRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<UAVRow> CreateUAVRow(::flatbuffers::FlatBufferBuilder &_fbb, const UAVRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const UAVRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _WorldTypeId = _o->WorldTypeId;
  auto _MoveType = _o->MoveType;
  auto _Speed = _o->Speed;
  auto _AttackStationaryPlayer = _o->AttackStationaryPlayer;
  auto _ModelScale = _o->ModelScale ? Createtuple_float32_float32_float32(_fbb, _o->ModelScale.get(), _rehasher) : 0;
  auto _Splines = _o->Splines.empty() ? 0 : _fbb.CreateString(_o->Splines);
  auto _CenterPosition = _o->CenterPosition ? Createtuple_float32_float32_float32(_fbb, _o->CenterPosition.get(), _rehasher) : 0;
  auto _SensitiveAreaRadius = _o->SensitiveAreaRadius;
  auto _VisionAreaRadius = _o->VisionAreaRadius;
  auto _VisionAreaAngle = _o->VisionAreaAngle;
  auto _SensitiveAlertSpeed = _o->SensitiveAlertSpeed;
  auto _VisionAlertSpeed = _o->VisionAlertSpeed;
  auto _AlertValueToAttack = _o->AlertValueToAttack;
  auto _AttackBuffId = _o->AttackBuffId.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_uint32_uint32>> (_o->AttackBuffId.size(), [](size_t i, _VectorArgs *__va) { return Createtuple_uint32_uint32(*__va->__fbb, __va->__o->AttackBuffId[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _SluggishTime = _o->SluggishTime;
  auto _RandomScanRangeX = _o->RandomScanRangeX ? Createtuple_int32_int32(_fbb, _o->RandomScanRangeX.get(), _rehasher) : 0;
  auto _RandomScanRangeY = _o->RandomScanRangeY ? Createtuple_int32_int32(_fbb, _o->RandomScanRangeY.get(), _rehasher) : 0;
  auto _RandomScanSpeed = _o->RandomScanSpeed;
  auto _SpecifyScanPoint = _o->SpecifyScanPoint.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::tuple_int32_int32>> (_o->SpecifyScanPoint.size(), [](size_t i, _VectorArgs *__va) { return Createtuple_int32_int32(*__va->__fbb, __va->__o->SpecifyScanPoint[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _SpecifyScanSpeed = _o->SpecifyScanSpeed;
  auto _LockRangeX = _o->LockRangeX ? Createtuple_int32_int32(_fbb, _o->LockRangeX.get(), _rehasher) : 0;
  auto _LockRangeY = _o->LockRangeY ? Createtuple_int32_int32(_fbb, _o->LockRangeY.get(), _rehasher) : 0;
  auto _LockSpeed = _o->LockSpeed;
  auto _LockDamping = _o->LockDamping;
  auto _AimTime = _o->AimTime;
  auto _AttackCD = _o->AttackCD;
  auto _BulletSpeed = _o->BulletSpeed;
  auto _BulletLifetime = _o->BulletLifetime;
  auto _BulletColliderRadius = _o->BulletColliderRadius;
  auto _BulletBlastRadius = _o->BulletBlastRadius;
  auto _InitModelRotation = _o->InitModelRotation ? Createtuple_float32_float32_float32(_fbb, _o->InitModelRotation.get(), _rehasher) : 0;
  auto _Rotation = _o->Rotation ? Createtuple_float32_float32_float32_float32(_fbb, _o->Rotation.get(), _rehasher) : 0;
  auto _Scale = _o->Scale ? Createtuple_float32_float32_float32(_fbb, _o->Scale.get(), _rehasher) : 0;
  auto _PrefabPath = _o->PrefabPath.empty() ? 0 : _fbb.CreateString(_o->PrefabPath);
  return fb::CreateUAVRow(
      _fbb,
      _Id,
      _WorldTypeId,
      _MoveType,
      _Speed,
      _AttackStationaryPlayer,
      _ModelScale,
      _Splines,
      _CenterPosition,
      _SensitiveAreaRadius,
      _VisionAreaRadius,
      _VisionAreaAngle,
      _SensitiveAlertSpeed,
      _VisionAlertSpeed,
      _AlertValueToAttack,
      _AttackBuffId,
      _SluggishTime,
      _RandomScanRangeX,
      _RandomScanRangeY,
      _RandomScanSpeed,
      _SpecifyScanPoint,
      _SpecifyScanSpeed,
      _LockRangeX,
      _LockRangeY,
      _LockSpeed,
      _LockDamping,
      _AimTime,
      _AttackCD,
      _BulletSpeed,
      _BulletLifetime,
      _BulletColliderRadius,
      _BulletBlastRadius,
      _InitModelRotation,
      _Rotation,
      _Scale,
      _PrefabPath);
}

inline const fb::UAV *GetUAV(const void *buf) {
  return ::flatbuffers::GetRoot<fb::UAV>(buf);
}

inline const fb::UAV *GetSizePrefixedUAV(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::UAV>(buf);
}

inline bool VerifyUAVBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::UAV>(nullptr);
}

inline bool VerifySizePrefixedUAVBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::UAV>(nullptr);
}

inline void FinishUAVBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::UAV> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUAVBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::UAV> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::UAVT> UnPackUAV(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::UAVT>(GetUAV(buf)->UnPack(res));
}

inline std::unique_ptr<fb::UAVT> UnPackSizePrefixedUAV(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::UAVT>(GetSizePrefixedUAV(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_UAV_FB_H_
