// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VERSION_FB_H_
#define FLATBUFFERS_GENERATED_VERSION_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace fb {

struct Version;
struct VersionBuilder;
struct VersionT;

struct VersionRow;
struct VersionRowBuilder;
struct VersionRowT;

struct VersionT : public ::flatbuffers::NativeTable {
  typedef Version TableType;
  std::vector<std::unique_ptr<fb::VersionRowT>> Versions{};
  VersionT() = default;
  VersionT(const VersionT &o);
  VersionT(VersionT&&) FLATBUFFERS_NOEXCEPT = default;
  VersionT &operator=(VersionT o) FLATBUFFERS_NOEXCEPT;
};

struct Version FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VersionT NativeTableType;
  typedef VersionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<fb::VersionRow>> *Versions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<fb::VersionRow>> *>(VT_VERSIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSIONS) &&
           verifier.VerifyVector(Versions()) &&
           verifier.VerifyVectorOfTables(Versions()) &&
           verifier.EndTable();
  }
  VersionT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VersionT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Version> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const VersionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VersionBuilder {
  typedef Version Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Versions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::VersionRow>>> Versions) {
    fbb_.AddOffset(Version::VT_VERSIONS, Versions);
  }
  explicit VersionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Version> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Version>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Version> CreateVersion(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<fb::VersionRow>>> Versions = 0) {
  VersionBuilder builder_(_fbb);
  builder_.add_Versions(Versions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Version> CreateVersionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<fb::VersionRow>> *Versions = nullptr) {
  auto Versions__ = Versions ? _fbb.CreateVector<::flatbuffers::Offset<fb::VersionRow>>(*Versions) : 0;
  return fb::CreateVersion(
      _fbb,
      Versions__);
}

::flatbuffers::Offset<Version> CreateVersion(::flatbuffers::FlatBufferBuilder &_fbb, const VersionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct VersionRowT : public ::flatbuffers::NativeTable {
  typedef VersionRow TableType;
  int32_t Id = 0;
  int32_t V1 = 0;
  int32_t V2 = 0;
  int32_t V3 = 0;
};

struct VersionRow FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VersionRowT NativeTableType;
  typedef VersionRowBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_V1 = 6,
    VT_V2 = 8,
    VT_V3 = 10
  };
  int32_t Id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t V1() const {
    return GetField<int32_t>(VT_V1, 0);
  }
  int32_t V2() const {
    return GetField<int32_t>(VT_V2, 0);
  }
  int32_t V3() const {
    return GetField<int32_t>(VT_V3, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_V1, 4) &&
           VerifyField<int32_t>(verifier, VT_V2, 4) &&
           VerifyField<int32_t>(verifier, VT_V3, 4) &&
           verifier.EndTable();
  }
  VersionRowT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VersionRowT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<VersionRow> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const VersionRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VersionRowBuilder {
  typedef VersionRow Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_Id(int32_t Id) {
    fbb_.AddElement<int32_t>(VersionRow::VT_ID, Id, 0);
  }
  void add_V1(int32_t V1) {
    fbb_.AddElement<int32_t>(VersionRow::VT_V1, V1, 0);
  }
  void add_V2(int32_t V2) {
    fbb_.AddElement<int32_t>(VersionRow::VT_V2, V2, 0);
  }
  void add_V3(int32_t V3) {
    fbb_.AddElement<int32_t>(VersionRow::VT_V3, V3, 0);
  }
  explicit VersionRowBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VersionRow> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VersionRow>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VersionRow> CreateVersionRow(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Id = 0,
    int32_t V1 = 0,
    int32_t V2 = 0,
    int32_t V3 = 0) {
  VersionRowBuilder builder_(_fbb);
  builder_.add_V3(V3);
  builder_.add_V2(V2);
  builder_.add_V1(V1);
  builder_.add_Id(Id);
  return builder_.Finish();
}

::flatbuffers::Offset<VersionRow> CreateVersionRow(::flatbuffers::FlatBufferBuilder &_fbb, const VersionRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline VersionT::VersionT(const VersionT &o) {
  Versions.reserve(o.Versions.size());
  for (const auto &Versions_ : o.Versions) { Versions.emplace_back((Versions_) ? new fb::VersionRowT(*Versions_) : nullptr); }
}

inline VersionT &VersionT::operator=(VersionT o) FLATBUFFERS_NOEXCEPT {
  std::swap(Versions, o.Versions);
  return *this;
}

inline VersionT *Version::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<VersionT>(new VersionT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Version::UnPackTo(VersionT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Versions(); if (_e) { _o->Versions.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->Versions[_i]) { _e->Get(_i)->UnPackTo(_o->Versions[_i].get(), _resolver); } else { _o->Versions[_i] = std::unique_ptr<fb::VersionRowT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->Versions.resize(0); } }
}

inline ::flatbuffers::Offset<Version> Version::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const VersionT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVersion(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Version> CreateVersion(::flatbuffers::FlatBufferBuilder &_fbb, const VersionT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const VersionT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Versions = _o->Versions.size() ? _fbb.CreateVector<::flatbuffers::Offset<fb::VersionRow>> (_o->Versions.size(), [](size_t i, _VectorArgs *__va) { return CreateVersionRow(*__va->__fbb, __va->__o->Versions[i].get(), __va->__rehasher); }, &_va ) : 0;
  return fb::CreateVersion(
      _fbb,
      _Versions);
}

inline VersionRowT *VersionRow::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<VersionRowT>(new VersionRowT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void VersionRow::UnPackTo(VersionRowT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = Id(); _o->Id = _e; }
  { auto _e = V1(); _o->V1 = _e; }
  { auto _e = V2(); _o->V2 = _e; }
  { auto _e = V3(); _o->V3 = _e; }
}

inline ::flatbuffers::Offset<VersionRow> VersionRow::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const VersionRowT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVersionRow(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<VersionRow> CreateVersionRow(::flatbuffers::FlatBufferBuilder &_fbb, const VersionRowT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const VersionRowT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _Id = _o->Id;
  auto _V1 = _o->V1;
  auto _V2 = _o->V2;
  auto _V3 = _o->V3;
  return fb::CreateVersionRow(
      _fbb,
      _Id,
      _V1,
      _V2,
      _V3);
}

inline const fb::Version *GetVersion(const void *buf) {
  return ::flatbuffers::GetRoot<fb::Version>(buf);
}

inline const fb::Version *GetSizePrefixedVersion(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<fb::Version>(buf);
}

inline bool VerifyVersionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<fb::Version>(nullptr);
}

inline bool VerifySizePrefixedVersionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<fb::Version>(nullptr);
}

inline void FinishVersionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Version> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVersionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<fb::Version> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<fb::VersionT> UnPackVersion(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::VersionT>(GetVersion(buf)->UnPack(res));
}

inline std::unique_ptr<fb::VersionT> UnPackSizePrefixedVersion(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<fb::VersionT>(GetSizePrefixedVersion(buf)->UnPack(res));
}

}  // namespace fb

#endif  // FLATBUFFERS_GENERATED_VERSION_FB_H_
